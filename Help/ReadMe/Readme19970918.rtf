{\rtf1\ansi \deff4\deflang1033{\fonttbl{\f1\froman\fcharset2\fprq2 Symbol;}{\f3\fmodern\fcharset0\fprq1 Courier;}{\f4\froman\fcharset0\fprq2 Times New Roman;}{\f5\fswiss\fcharset0\fprq2 Arial;}
{\f9\fswiss\fcharset0\fprq2 Helvetica;}{\f11\fmodern\fcharset0\fprq1 Courier New;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;
\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\qj\sa120 \f4\lang1031 \snext0 
Normal;}{\s1\qj\sb240\sa120 \b\f5\ul\lang1031 \sbasedon0\snext0 heading 1;}{\s2\qj\sb600\sa360\keepn \b\f4\fs40\lang1031 \sbasedon0\snext0 heading 2;}{\s3\qj\sb480\sa360\keepn \b\f4\fs32\lang1031 \sbasedon0\snext15 heading 3;}{\s4\qj\sb240\sa60\keepn 
\b\f5\lang1031 \sbasedon0\snext0 heading 4;}{\s5\qj\sb240\sa60 \f5\fs22\lang1031 \sbasedon0\snext0 heading 5;}{\s6\qj\sb240\sa60 \i\f4\fs22\lang1031 \sbasedon0\snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}{\s15\qj\li708\sa120 \f4\lang1031 
\sbasedon0\snext15 Normal Indent;}{\*\cs16 \additive\super \sbasedon10 endnote reference;}{\s17\qj\sa120\tqc\tx4819\tqr\tx9071 \f4\lang1031 \sbasedon0\snext17 footer;}{\s18\qj\sa240\keepn \b\f4\lang1031 \sbasedon0\snext18 header;}{\*\cs19 \additive
\fs16\up6 \sbasedon10 footnote reference;}{\s20\qj\sa120 \f4\fs20\lang1031 \sbasedon0\snext20 footnote text;}{\s21\qj\sa120 \f9\fs18\lang1031 \sbasedon0\snext21 helptext;}{\s22\qj\fi-357\li357\sa120 \b\f4\lang1031 \sbasedon0\snext22 CountHead;}{
\s23\qj\sa120\tx426 \f4\lang1031 \sbasedon0\snext23 Count;}{\s24\qj\sa240\keepn \b\f4\fs20\lang1031 \sbasedon18\snext24 Header2;}{\s25\sb360\sa120 \b\f4\lang1031 \sbasedon0\snext25 Head2;}{\s26\li567\tx1134 \f11\lang1031 \sbasedon0\snext26 Source;}{
\s27\sb72\sa120\sl288\slmult1 \f9\fs28\lang1031 \sbasedon0\snext27 helptopic;}{\s28\sl288\slmult1 \f9\fs20\lang1031 \sbasedon0\snext28 helpkey;}{\s29\li567\sb180\sa120\tx1134 \b\f11\fs18\lang1031 \sbasedon26\snext29 helpsource;}{\s30\sb240\sa180 
\b\f9\fs22\lang1031 \sbasedon21\snext30 helplarge;}{\s31\fi-284\li284\tx284 \f9\fs18\lang1031 \sbasedon21\snext31 helpvorgang;}{\s32\qj\sa120\tx284 \f4\lang1031 \sbasedon0\snext32 StandardOut;}{\s33\qc\sb240\sa240\tx1134 \f4\fs16\lang1031 
\sbasedon26\snext33 Abbildung;}{\s34\qj\sb240\sa120\keepn \f4\fs32\lang2057 \sbasedon0\snext34 headline;}{\s35\li1134\sa72\tqc\tx567\tx2835 \f4\lang1031 \sbasedon0\snext35 help1;}{\s36\qj\fi-283\li283\sa120 \f4\lang1031 \sbasedon0\snext36 List;}{
\s37\qj\fi-283\li566\sa120 \f4\lang1031 \sbasedon0\snext37 List 2;}{\s38\sa120 \f4\lang2057 \sbasedon0\snext38 Body Text;}{\s39\qj\li283\sa120 \f4\lang1031 \sbasedon0\snext39 Body Text Indent;}{\s40\qj\fi-283\li284\sa120{\*\pn \pnlvl11
\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}\f4\lang2057 \sbasedon39\snext40 Feature;}{\*\cs41 \additive\strike\cf11\lang2057 \sbasedon10 Link;}}{\info{\title Pow! - Introduction}{\author Bernhard Leisch}{\keywords Pow!}{\operator Fimling}
{\creatim\yr1996\mo3\dy20\hr10\min37}{\revtim\yr1996\mo12\dy19\hr14\min17}{\version1}{\edmins0}{\nofpages0}{\nofwords0}{\nofchars0}{\vern49213}}\paperw11907\paperh31185\margl1418\margr1418\margt1701\margb1134 
\deftab709\widowctrl\ftnbj\aenddoc\hyphhotz425\noextrasprl\prcolbl\cvmme\sprsspbf\brkfrm\swpbdr\hyphcaps0 \fet0\sectd \binfsxn1\binsxn1\psz9\sbknone\linex0\headery709\footery709\colsx426\endnhere {\header \pard\plain \s18\qj\sa120\tqr\tlul\tx9072 
\b\f4\lang1031 {\b0\fs20 
\par }}{\footer \pard\plain \s17\qj\sb120\sa120\tqc\tx4819\tqr\tlul\tx9072 \f4\lang1031 
\par }{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5
\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \s34\qj\sb240\sa120\keepn \f4\fs32\lang2057 {\cs19\fs16\up6 #{\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 #} FIRSTSTEPINDEX
}${\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 $} Help Index}K{\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 K} Help Index}} {\i\fs40 Pow! - }{\fs40 Programmers Open Workbench}
\par \pard\plain \s1\qj\sb240\sa120 \b\f5\ul\lang1031 {\ulnone\lang2057 Release 3.0 32 Bit  Beta 09-18-97
\par }{\fs20\ulnone\lang2057 This is an early beta release. The essential functionality has been implemented, but the following parts of the distribution are not completed yet:
\par {\pntext\pard\plain\b\f1\fs20 \'b7\tab}}\pard\plain \qj\fi-283\li283\sa120{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}\f4\lang1031 {\b\f5\fs20 garbage collector
\par {\pntext\pard\plain\b\f1\fs20 \'b7\tab}run time system for multithreaded applications
\par {\pntext\pard\plain\b\f1\fs20 \'b7\tab}help files
\par }\pard \qj\sa120 {\b\f5\fs20 If you notice any bugs (please check the }{\cs41\strike\cf11\lang2057 known bugs}{\v\cf11\lang2057 KnownBugs}{\b\f5\fs20  first) or have suggestions for improvements, please mail them to pow@fim.uni-linz.ac.at
\par 
\par }\pard\plain \s36\qj\fi-283\li283\sa120 \f4\lang1031 {\b\strike\cf10\lang2057 Release Notes}{\b\v\cf10\lang2057 ReleaseNotes} / {\b\strike\cf10\lang2057 What\rquote s new?}{\v Release3_0_32}{\b\cf10\lang2057 
\par }\pard\plain \qj\sa120 \f4\lang1031 {\b\f5\fs20 
\par }\pard\plain \s36\qj\fi-283\li283\sa120 \f4\lang1031 {\cs41\strike\cf11\lang2057 General Introduction}{\v\cf11\lang2057 GeneralIntroduction}{\cf11\lang2057 
\par }{\cs41\strike\cf11\lang2057 System Requirements}{\v\cf11\lang2057 SystemRequirements}{\cf11\lang2057 
\par }{\cs41\strike\cf11\lang2057 Programming Environment}{\v\cf11\lang2057 ProgrammingEnvironment}{\cf11\lang2057 
\par }{\cs41\strike\cf11\lang2057 Stepping through the examples}{\v\cf11\lang2057 Examples}{\cf11\lang2057 
\par }{\cs41\strike\cf11\lang2057 Creating new Applications}{\v\cf11\lang2057 CreatingNewApplications}{\cf11\lang2057 
\par }{\cs41\strike\cf11\lang2057 Additional Information}{\v\cf11\lang2057 AdditionalInformation}{\cf11\lang2057 
\par }{\cs41\strike\cf11\lang2057 Compiler and linker}{\v\cf11\lang2057 CompilerAndLinker}{\cf11\lang2057 
\par }{\cs41\strike\cf11\lang2057 Files needed by applications created with Pow!}{\v\cf11\lang2057 FilesNeeded}{\cf11\lang2057 
\par }{\cs41\strike\cf11\lang2057 Online help}{\v\cf11\lang2057 OnlineHelp}{\cf11\lang2057 
\par }\pard\plain \qj\sa120 \f4\lang1031 {\cs41\strike\cf11\lang2057 Contacts}{\v\cf11\lang2057 Contacts}{\cf11\lang2057 
\par }\pard\plain \s36\qj\fi-283\li283\sa120 \f4\lang1031 {\cf11\lang2057 
\par }\pard\plain \s34\qj\sb240\sa120\keepn \f4\fs32\lang2057 \page {\cs19\fs16\up6 #{\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 #}{\fs16  GeneralIntroduction}}${\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 $
}{\fs16  General Introduction}}K{\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 K}{\fs16  General Introduction}}} General Introduction
\par \pard\plain \s38\sa120 \f4\lang2057 {\i Pow!} is a software development environment for use under {\i MS-Windows}. It allows the generation of {\i native Windows-Applications} using the hybrid object-oriented programming lan\-gua\-ge {\i Oberon\_2}
. Included in the package is an Oberon-2 compiler developed by Robinson Associates.
\par {\i Pow!} supports all the functions known from other programming environments: a multi\-
document-editor, embedded compile- and link calls, integrated make- and build-algorithms for project management and online help for the environment, the programming language Oberon-2 and the enclosed programming library {\i Opal}.{\i 
\par }Additionally, {\i Pow!} has an interface for integration of external software-tools. These tools can be assigned to buttons and/or menu bar commands. Tools can be applications, dynamic link lib\-ra\-ries or dynamic data exchange servers.
\par There are some concepts new to programming environments:
\par \pard\plain \qj\sa120 \f4\lang1031 {\i\lang2057 * Pow!}{\lang2057  works with meta-projects, so-called }{\i\lang2057 templates}{\lang2057 
, that can be used to create own projects with basic functionality. The package contains templates for the most common types of  applications (programs using Opal, programs using Windows-API only, DLL\rquote s, programs using graphics, ...).
\par * A tiling-scheme - }{\i\lang2057 Panes}{\lang2057  - allows fast and non-overlapping resizing of edit-windows.
\par }\pard\plain \s38\sa120 \f4\lang2057 The enclosed programming library {\i Opal (Oberon Portable Applications Library)} includes modules for text and graphics I/O, mathematical functions, file I/O, string handling, etc.
\par \pard\plain \s34\qj\sb240\sa120\keepn \f4\fs32\lang2057 \page {\cs19\fs16\up6 #{\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 #} CreatingNewApplications}${\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 $}
 creating new applications}K{\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 K} creating new applications}} Creating new applications
\par \pard\plain \s38\sa120 \f4\lang2057 To create an executable file {\i Pow!} has to know which files have to be compiled and linked for that specific application. There are two ways to go about this:
\par {\cs41\strike\cf11 Use a project}{\v CreatingNewProjects}, where each source file, library and resource file belonging to an application have to be explicitely registered.
\par {\cs41\strike\cf11 Use the default project}{\v DefaultProjects} and let {\i Pow!} figure out which files belong to your application.
\par \pard\plain \s34\qj\sb240\sa120\keepn \f4\fs32\lang2057 \page {\cs19\fs16\up6 #{\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 #} DefaultProjects}${\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 $}
 Using the default project}K{\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 K} Using the default project}} Using the Default Project
\par \pard\plain \s38\sa120 \f4\lang2057 When you do not work with a specific project file (e.g. you have select \ldblquote close project\rdblquote  in the menu), {\i Pow!}
 will use its default project. The default project can be edited like any other project, but extra care is needed: any changes will have a global effect!
\par With the default project active, Pow! will think that the source contained in the active edit windo
w is the main module. The .EXE file will be given its name. Pow! will link all the files defined in the default project (which is only the Opal library after installation) plus all the modules which are imported in your source and which can be found in th
e same directory. Because of the easy handling the default project is very convenient for small programs.
\par The default project is stored in the file \ldblquote pow.prj\rdblquote , which is usually located in your Windows directory (this allows sharing a common network installation of {\i Pow!} where every user is allowed his individual default project).
\par \pard\plain \s34\qj\sb240\sa120\keepn \f4\fs32\lang2057 \page {\cs19\fs16\up6 #{\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 #} SystemRequirements}${\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 $}
 System requirements}K{\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 K}System requirements}} System Requirements
\par \pard\plain \s38\sa120 \f4\lang2057 {\i Pow!} works with Microsoft Win95, Win97 and Windows NT 4.0. Your computer must have at least 16 Megabytes of memory and a 80486DX Intel processor or better.
\par \pard\plain \s34\qj\sb240\sa120\keepn \f4\fs32\lang2057 \page {\cs19 #{\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 #} ProgrammingEnvironment}${\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 $}
 Programming Environment}K{\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 K} Programming Environment}} The Oberon-2 programming environment
\par \pard\plain \s38\sa120 \f4\lang2057 Programs are written using a multi-document editor and compiled and linked together using the other integrated tools. The picture on the next page shows a typical screen layout when working with {\i Pow!}
. In this example some files are opened for editing and the message-window contains the output of the last compile-process.
\par \pard\plain \s3\qj\sb480\sa360 \b\f4\fs32\lang1031 {\b0\fs28\lang2057 Speed buttons
\par }\pard\plain \s38\sa120 \f4\lang2057 The most commonly used functions are provided as buttons in a toolbar for fast access. Instead of selecting a command in the menu bar, it is sufficient to press the equivalent speed button.
\par Defined buttons are:
\par \pard\plain \s4\qj\sa120 \b\f5\lang1031 {\b0\f4\lang2057 \{bmc open.bmp\} \'85 }{\b0\i\f4\lang2057 Open}{\b0\f4\lang2057  \'85 Select a file for editing (=}{\b0\i\f4\lang2057 File/Open}{\b0\f4\lang2057 ).
\par \{bmc save.bmp\} \'85 }{\b0\i\f4\lang2057 Save}{\b0\f4\lang2057  \'85 Save the contents of the active edit window (=}{\b0\i\f4\lang2057 File/Save}{\b0\f4\lang2057 ).
\par \{bmc comp.bmp\} \'85 }{\b0\i\f4\lang2057 Compile}{\b0\f4\lang2057  \'85 Compile the contents of the active window (=}{\b0\i\f4\lang2057 Compile/Compile}{\b0\f4\lang2057 ).
\par \{bmc make.bmp\} \'85 }{\b0\i\f4\lang2057 Make}{\b0\f4\lang2057  \'85 Compiles changed files of the project and generates the program (=}{\b0\i\f4\lang2057 Compile/Make}{\b0\f4\lang2057 ).
\par \{bmc run.bmp\} \'85 }{\b0\i\f4\lang2057 Run}{\b0\f4\lang2057  \'85 Starts the project; if necessary the function Make is called before that (=}{\b0\i\f4\lang2057 Run/Run}{\b0\f4\lang2057 ).
\par \{bmc combo.bmp\} \'85 }{\b0\i\f4\lang2057 Project\~files}{\b0\f4\lang2057  \'85 This listbox holds the names of all source files of the project. Selection of an entry opens the editor with the appropriate file.
\par }\pard\plain \s38\sa120 \f4\lang2057 Other buttons can be defined by adding software tools using the {\i Tools/Options} dialog.
\par \pard\plain \s3\qj\sb480\sa360 \b\f4\fs32\lang1031 {\b0\fs28\lang2057 Status bar
\par }\pard\plain \s38\sa120 \f4\lang2057 The last line of the main window is reserved for displaying information about the current status of the programming environment:
\par \pard\plain \sb240\sa240\pvpara\posy0\dxfrtext142\dfrmtxtx142\dfrmtxty0\nowrap \f4\lang1031 {\lang2057 \{bmc statbar.bmp\}
\par }\pard\plain \s32\qj\sa120\tx709 \f4\lang1031 {\lang2057 The first field shows line and column number of the caret position in the active edit file.
\par The second field shows whether the editor is in }{\i\lang2057 insert}{\lang2057  or }{\i\lang2057 overwrite}{\lang2057  mode.
\par }\pard \s32\sa120\tx709 {\lang2057 If the file in the active edit window has been changed since the last save,\line the third field holds the string }{\i\lang2057 modified}{\lang2057 .
\par }\pard \s32\qj\sa120\tx709 {\lang2057 The last field of the status bar is reserved for displaying messages.
\par }\pard\plain \s34\qj\sb240\sa120\keepn \f4\fs32\lang2057 \page {\cs19\fs16\up6 #{\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 #} Examples}${\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 $}
 Stepping through the examples}K{\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 K} Stepping through the examples}} Stepping through the examples
\par \pard\plain \s38\sa120 \f4\lang2057 After starting {\i Pow!} the programming environment restores the state which was reached at the end of the last session. The first time you start {\i Pow!}, no specific project will be active and the file \ldblquote 
hello.mod\rdblquote  will be opened. This means that you are using the default project, which interprets the module in the currently active edit window as the main module:
\par \pard\plain \s33\qc\sb240\sa240\tx1134 \f4\fs16\lang1031 {\lang2057 \{bmc powhello.bmp\}
\par }\pard\plain \s38\sa120 \f4\lang2057 To generate the executable select the menu entry {\i Compile/Make}. Alternatively, function key {\i F9} or the {\cs41\strike\cf11 make speed-button}{\v ProgrammingEnvironment} can be used.
\par The programming environment takes care of all actions necessary to create the program. Compiler and linker output is displayed in a message window:
\par \pard\plain \s33\qc\sb240\sa240\tx1134 \f4\fs16\lang1031 {\lang2057 \{bmc message1.bmp\}
\par }\pard\plain \qj\sa120 \f4\lang1031 If no error was detected, the generated program can be started with the menu command {\i Run/\-Run} (key {\i CTRL-F9}) or via the {\cs41\strike\cf11\lang2057 run button}{\v\lang2057 ProgrammingEnvironment}
. The example program shows some text in a window until the user presses a key to terminate the application:
\par \pard\plain \s33\qc\sb240\sa240\tx1134 \f4\fs16\lang1031 {\lang2057 \{bmc hello1.bmp\}
\par }\pard\plain \s38\sa120 \f4\lang2057 {\i Pow!} comes with a variety of examples. Let\rquote s have a look at another program, a more attractive application which draws a fractal fern. The example can be found in the subdirectory {\i examples\\opal\\fern}
 of the {\i Pow!} directory. Simply open the file {\i fern.mod}.
\par You could build the application as shown above, but there is an easier way: simply press the run button. {\i Pow!}
 checks whether the project is up to date and - if necessary - automatically starts a make process. If this is successful, the generated application is started.
\par The example draws a fractal fern until the program window is closed (function {\i close} in the system menu{\dn6  }or key {\i ALT-F4}):
\par \pard\plain \s33\qc\sb240\sa240\tx1134 \f4\fs16\lang1031 {\lang2057 \{bmc fern1.bmp\}
\par }\pard\plain \s38\sa120 \f4\lang2057 You can have a look at all the examples the same way as above.
\par \pard\plain \s34\qj\sb240\sa120\keepn \f4\fs32\lang2057 \page {\cs19\fs16\up6 #{\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 #} CreatingNewProjects}${\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 $}
 Creating new projects}K{\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 K} Creating new projects}} Creating new projects
\par \pard\plain \s38\sa120 \f4\lang2057 Information about applications is kept in project files. {\i Pow!} supports a productive and convenient way to generate these project files out of meta projects ({\i templates}
). There are templates for most types of applications. Let us use {\i display.tpl} for our first example, which uses the module Display for output (see {\i Opal }documentation for further information). The command {\i Project/New} lists all t
emplates. Select the menu entry for the {\i Display} template.
\par \pard\plain \s33\qc\sb120\sa120\tx1134 \f4\fs16\lang1031 {\lang2057 \{bmc templ1.bmp\}
\par }\pard\plain \s38\sa120 \f4\lang2057 Enter the name of the new project and the directory, where it will be created. If the checkbox {\i Create\~new\~directory\~for\~project} is enabled, a new subdirectory will be created for the project.
\par After pressing the {\i Ok} button {\i Pow!} generates the directories, copies the source modules and creates a new project file. The main module is automatically renamed to the name of the new project.
\par In our example the new project generates an application which opens an output window and waits for the user to press a key. You can now add your own code. To retrieve the current date, your program could look like this:
\par \pard\plain \s26\li567\sb240\tx1134 \f11\lang1031 {\f3\fs20\lang2057 MODULE MyFirst;
\par }\pard \s26\li567\tx1134 {\f3\fs20\lang2057 IMPORT Display,Utils;
\par }\pard \s26\li567\sb120\tx1134 {\f3\fs20\lang2057 PROCEDURE ProgMain*;
\par }\pard \s26\li567\tx1134 {\f3\fs20\lang2057 VAR
\par    date: ARRAY 11 OF CHAR;
\par BEGIN
\par    Utils.GetDateStr(date);
\par 
\par    Display.WriteStr(\ldblquote Today\rquote s date: \ldblquote );
\par    Display.WriteStr(date);
\par    Display.WriteLn;
\par 
\par    REPEAT
\par    UNTIL Display.KeyPressed();
\par END ProgMain;
\par }\pard \s26\li567\sb120\sa240\tx1134 {\f3\fs20\lang2057 END MyFirst.
\par }\pard\plain \s34\qj\sb240\sa120 \f4\fs32\lang2057 {\f3 \page }{\cs19\fs16\up6 #{\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 #} AdditionalInformation}${\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 $}
 Additional information}K{\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 K} Additional information}} Additional Information
\par \pard\plain \s3\qj\sb480\sa360 \b\f4\fs32\lang1031 {\b0\fs28\lang2057 Editor
\par }\pard\plain \s38\sa120 \f4\lang2057 The current default editor (\ldblquote boosted\rdblquote  selected in preferences) works like the standard application {\i Notepad}, but has some additional features to aid the creation of program sources:
\par \pard\plain \s32\sa120\tx227 \f4\lang1031 {\b\lang2057 auto\~indent:
\par }{\lang2057 When }{\i\lang2057 ENTER}{\lang2057  is pressed, the new line starts with the same indentations as the previous one automatically.
\par }{\b\lang2057 help\~on\~topic:
\par }{\lang2057 Pressing the right mouse button on a keyword in the edit window displays context sensitive help for this keyword.
\par }{\b\lang2057 insert/overwrite:
\par }{\lang2057 The insert key toggles between insert and overwrite mode.
\par }{\b\lang2057 delete line:
\par }{\lang2057 Pressing }{\i\lang2057 CTRL+Y}{\lang2057  purges the current line.
\par }{\b\lang2057 block indent:
\par }{\lang2057 All lines in the current selection can be indented or unindented by pressing }{\i\lang2057 CTRL\_I}{\lang2057  or }{\i\lang2057 CTRL\_U}{\lang2057 .
\par }{\b\lang2057 Oberon-2 syntax support
\par }{\lang2057 An optional syntax support for Oberon-2 programs can be activated. Some keywords then cause an automatic change of indentation level and the insertion of additional text, e.g. for the end of procedures or loops.
\par }{\b\lang2057 status\~bar:
\par }{\lang2057 Displays information like line and column number of the caret position.
\par }{\b\lang2057 project\~interface:
\par }{\lang2057 Source files can be opened faster using the project file list than by the file open dialogue.
\par }{\b\lang2057 compiler\~interface:
\par }{\lang2057 Compile messages are collected in a message window; double clicking a mes\-sage in this window automatically opens the appropriate file and po\-si\-tions the caret on the erroneous line. The functions }{\i\lang2057 Edit/\-Next\~Er\-ror}{
\lang2057  (}{\i\lang2057 F8}{\lang2057 ) and }{\i\lang2057 Edit/Prev\~Error}{\lang2057  (}{\i\lang2057 F7}{\lang2057 ) display the next/previous error.
\par }\pard\plain \s3\qj\sb480\sa360 \b\f4\fs32\lang1031 {\b0\fs28\lang2057 Panes
\par }\pard\plain \s38\sa120 \f4\lang2057 {\i Pow!} defines a new tiling scheme for edit windows, which is especially useful for pro\-gramming: non-overlap\-ping windows ({\i panes}
). As usually, windows can be moved and resized using the left mouse button on the border of any edit window. The new scheme is activated when using the {\i right\~mouse\~button}
. If you resize an edit window using the right mouse button, all direct neighbour windows are resized, too.
\par Let\rquote s say you have opened two files and placed them non-overlapping (e.g. with {\i Window/\-Tile}). Normally, if you want to make one edit window smaller and the other one greater by the same amount, you would need to resize both windows. With {\i 
panes} you resize only one window (right mousebutton), the other window will be resized by the pane scheme automatically.
\par \pard\plain \s34\qj\sb240\sa120\keepn \f4\fs32\lang2057 \page {\cs19\fs16\up6 #{\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 #} FilesNeeded}${\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 $}
 Files needed by applications created with {\i Pow!}}K{\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 K} Files needed by applications created with {\i Pow!}}} Files needed by applications created with {\i Pow!}
\par \pard\plain \s38\sa120 \f4\lang2057 If your application makes use of the Opal library, it needs the opal????.dll located in your Windows system directory. In the current version this is opal32dll.dll.
\par If you selected \ldblquote DLL runtime-system\rdblquote  in the linker options, your application needs the rts32d*.dll located in your Windows system directory.
\par \pard\plain \s34\qj\sb240\sa120 \f4\fs32\lang2057 \page {\cs19\fs16\up6 #{\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 #} CompilerAndLinker}${\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 $}
 Compiler and linker}K{\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 K} Compiler and linker}} Oberon-2 compiler and linker
\par \pard\plain \s38\sa120 \f4\lang2057 {\i Pow!}
 contains all necessary tools for developing applications for Microsoft Windows: an Oberon-2 compiler which generates object files in Microsoft object file format and a Linker that handles these object files, libraries and resource files.
\par The compiler has been developed by Robinson Associates. It complies with the Oberon\_2 lan\-gua\-ge definition. According to the needs of Microsoft Windows, some extensions had to be made:
\par \pard\plain \s32\qj\fi-227\li227\sa120\tx284 \f4\lang1031 {\lang2057 Code can be generated for }{\i\lang2057 EXE}{\lang2057 -files and for dynamic link libraries (}{\i\lang2057 DLL}{\lang2057 \rquote s).
\par }\pard \s32\qj\sa120 {\lang2057 DLL\rquote s that were not written in Oberon can be used by programming a definition module for these DLL\rquote s. When using the keyword }{\i\lang2057 DEFINITION}{\lang2057 
 instead of MODULE, the compiler generates symbol information for foreign DLL\rquote s (this is the mechanism for }{\i\lang2057 mixed language programming}{\lang2057  with }{\i\lang2057 Pow!}{\lang2057 ).
\par DLL functions have to be declared as }{\i\lang2057 PROCEDURE\~[_APICALL]}{\lang2057 , if it should be possible for programs not written in Oberon-2 to make use of the DLL.
\par }\pard\plain \s34\qj\sb240\sa120 \f4\fs32\lang2057 \page {\cs19\fs16\up6 #{\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 #} OnlineHelp}${\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 $} online help}K
{\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 K} online help}} Online help
\par \pard\plain \s38\sa120 \f4\lang2057 {\i Pow!} provides different levels of online help:
\par \pard\plain \s32\qj\sa120 \f4\lang1031 {\lang2057 Every dialog in the environment contains a help button that comes up with specific infor\-ma\-tion about the dialog elements. The help file covers all features of }{\i\lang2057 Pow!}{\lang2057 
 itself. It can also be accessed by the menu entry Help/Pow.
\par Help about the compiler can be gained via the menu entry Help/Compiler. This contains information about the programming language Oberon-2 and about Opal. This help file is searched for a specific topic if the right mousebutton is pressed on a 
keyword in the editor.
\par Help about the currently selected editor can be accessed via the menu entry Help/Editor.
\par }\pard\plain \s34\qj\sb240\sa120 \f4\fs32\lang2057 \page {\cs19\fs16\up6 #{\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 #} Contacts}${\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 $} Contacts}K{\footnote 
\pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 K} Contacts}} Contacts
\par \pard\plain \s38\sa120 \f4\lang2057 Hints and suggestions are most welcome.\line Please email them to: {\i pow@fim.uni-linz.ac.at}.\line {\i Pow!} bug reports (see the {\i Help/Bug\~report} dialogue) can be sent to the same address.\line 
Compiler specific reports or comments, email to: {\i oberon@robinsons.co.uk}.
\par \pard\plain \s3\qj\sb480\sa360 \b\f4\fs32\lang1031 {\b0\fs28\lang2057 WWW
\par }\pard\plain \qj\sa120 \f4\lang1031 Check our Pow! Homepage {\i http://www.fim.uni-linz.ac.at/pow/pow.htm} for latest information about this product and for links to other Oberon-2 related servers.
\par \pard\plain \s3\qj\sb480\sa360 \b\f4\fs32\lang1031 {\b0\fs28\lang2057 Ftp
\par }\pard\plain \s38\sa120 \f4\lang2057 {\i Pow!} is available via FTP on host {\i ftp.fim.uni-linz.ac.at}, subdirectory {\i pub/soft/pow-oberon2}. Additionally, this FTP site collects software tools and programs written using the {\i Pow!}
 programming environment. If you want to make your Oberon ({\i Pow!}) programs public, simply put them in the upload-directory of the ftp-server.
\par \pard\plain \s34\qj\sb240\sa120\keepn \f4\fs32\lang2057 \page {\cs19\fs16\up6 #{\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 #} ReleaseNotes}${\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 $}
 Release notes; fixed bugs}K{\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 K} Release notes}} Release Notes
\par \pard\plain \s38\sa120 \f4\lang2057 This distribution contains
\par \pard\plain \s37\qj\fi-284\li568 \f4\lang1031 {\lang2057 Pow! Environment 3.0
\par OberonEDitor (OED) 0.9 (has to be selected manually)
\par }\pard \s37\fi-284\li568 {\lang2057 Oberon-2 Compiler 32 1.0
\par }\pard \s37\qj\fi-284\li568 {\lang2057 Runtime System 32 1.0
\par Pow! compiler interface 32 1.0
\par Pow! Link 32 1.0
\par Opal 32 1.0
\par }\pard\plain \s1\qj\sb240\sa120 \b\f5\ul\lang1031 {\lang2057 Important !
\par }\pard\plain \s38\sa120 \f4\lang2057 You have to be careful not to put object or symbol files with the same name as one of the modules of imported libraries such as Opal in your object directory.
\par \pard\plain \s2\qj\sb360\sa240 \b\f4\fs40\lang1031 {\b0\fs28\lang2057 New features and bug fixes
\par }\pard\plain \qj\sa120 \f4\lang1031 {\cs41\strike\cf11\lang2057 Release 3.0 32}{\v\lang2057 Release3_0_32}{\lang2057 
\par }{\cs41\strike\cf11\lang2057 Release 3.0}{\v\lang2057 Release3_0}{\lang2057 
\par }{\cs41\strike\cf11\lang2057 Release 2.0}{\v\lang2057 Release2_0}{\lang2057 
\par }{\cs41\strike\cf11\lang2057 Release 1.3}{\v\lang2057 Release1_3}{\lang2057 
\par }{\cs41\strike\cf11\lang2057 Release 1.3 CD-ROM}{\v\lang2057 Release1_3CD}{\lang2057 
\par }{\cs41\strike\cf11\lang2057 Release 1.2f}{\v\lang2057 Release1_2f}{\lang2057 
\par }{\cs41\strike\cf11\lang2057 Release 1.2e}{\v\lang2057 Release1_2e}{\lang2057 
\par }{\cs41\strike\cf11\lang2057 Release 1.2d}{\v\lang2057 Release1_2d}{\lang2057 
\par }\pard\plain \s34\qj\sb240\sa120\keepn \f4\fs32\lang2057 \page {\cs19\fs16\up6 #{\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 #} Release1_2d}${\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 $} Release 1.2d}K
{\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 K} Release 1.2d}} {\b Release 1.2d and earlier}
\par \pard\plain \s1\qj\sb240\sa120 \b\f5\ul\lang1031 {\lang2057 Pow:
\par }\pard\plain \s38\sa120 \f4\lang2057 Stability problems after using the right mouse button to resize panes have been cured.
\par Several minor bugs have been fixed.
\par Build marked a compiled file as done (although errors occured) if the compiler generated an object file.
\par Templates can now create subdirectories and projects in root (this caused a \lquote can not create...\rquote -error in earlier versions).
\par \pard\plain \s1\qj\sb240\sa120 \b\f5\ul\lang1031 {\lang2057 Opal libraries:
\par }\pard\plain \s38\sa120 \f4\lang2057 The malfunctions of the File.Seek, File.Pos and File.AtEnd functions, which occurred when certain combinations of versions of Windows and DOS where used, have been eliminated.
\par A bug in module Volume preventing the nested usage of Scan objects has been fixed.
\par The Line function in module ColorPlane had a bug which somtimes caused assert faults in module CBitPane.
\par The DLL version of the libraries caused unpredictable program behaviour for some programs when starting the same program several times.
\par \pard\plain \s1\qj\sb240\sa120 \b\f5\ul\lang1031 {\lang2057 Compiler:
\par }\pard\plain \s38\sa120 \f4\lang2057 Pointer initialization in dynamically allocated structures has been fixed.
\par Assigning NIL to a procedure variable and checking the same variable for being NIL caused an exception.
\par Assigning whole Strings to dereferenced pointers to open arrays of char caused the dimension information of the array to be damaged.
\par \pard\plain \s1\qj\sb240\sa120 \b\f5\ul\lang1031 {\lang2057 Linker
\par }\pard\plain \s38\sa120 \f4\lang2057 The library hashing algorithm is not correctly documented by Microsoft. The linker now uses the correct algorithm (documented in Dr. Dobbs 9\rquote 91).
\par Generation of Import libraries for DLL\rquote s did not work if the possible 37 Symbols per page allocated more than 384 Bytes.
\par \pard\plain \s34\qj\sb240\sa120 \f4\fs32\lang2057 \page {\cs19\fs16\up6 #{\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 #} Release1_2e}${\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 $} Release 1.2e}K
{\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 K} Release 1.2e}} {\b Release} {\b 1.2e}
\par \pard\plain \s1\qj\sb240\sa120 \b\f5\ul\lang1031 {\lang2057 Pow:
\par }\pard\plain \s36\qj\fi-283\li283\sa120 \f4\lang1031 {\lang2057 The edit controls now have horizontal scroll bars.
\par The message window can be printed.
\par }\pard\plain \s38\sa120 \f4\lang2057 A history funktion has been introduced to remember the last four opened files and projects. The names are added at the end of the File- and Compile-menus.
\par When the main window was moved with the project combobox open then the combobox did not move with the other windows.
\par New tools now produce entries in the Tools-menu as a default.
\par Remembering the size of the main window did not work if it was iconized or maximized.
\par The tool argument token \lquote %%\rquote  has been introduced.
\par The length of text input in the File-Open dialog is not restricted by the size of the combobox any more.
\par Message boxes have been made larger to avoid truncation of large filenames.
\par Template name and subdirectory name are now truncated to eight characters in the Create-Project-From-Template dialog.
\par Pressing \ldblquote Cancel\rdblquote  in the Edit-Project dialog now restores the list of project files to the old values.
\par \pard\plain \s1\qj\sb240\sa120 \b\f5\ul\lang1031 {\lang2057 Opal libraries:
\par }\pard\plain \s38\sa120 \f4\lang2057 It was not possible to open several different applications using the OPAL.DLL at the same time.
\par Strings.Val caused an arithmetic overflow when the numbers in the string where too big.
\par Out.Open did not work properly (a call of Out.Open was and is not necessary in Opal).
\par ColorPlane.Line drew one endpoint of the line (separate from the rest of the line, which was correct) at the wrong position with most of the Windows display drivers.
\par The procedures Close, LongReal, F, F2, F3 and F4 have been added to the module Out.
\par Out.String now converts the \lquote $\rquote  character into newlines.
\par \pard\plain \s1\qj\sb240\sa120 \b\f5\ul\lang1031 {\lang2057 Linker:
\par }\pard\plain \s38\sa120 \f4\lang2057 Does not crash after Error \ldblquote Cannot allocate memory for cached write!\rdblquote  any more.
\par \pard\plain \s34\qj\sb240\sa120\keepn \f4\fs32\lang2057 \page {\cs19\fs16\up6 #{\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 #} Release1_2f}${\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 $} Release 1.2f}K
{\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 K} Release 1.2f}} {\b Release} {\b 1.2f}
\par \pard\plain \s1\qj\sb240\sa120 \b\f5\ul\lang1031 {\lang2057 Pow:
\par }\pard\plain \s38\sa120 \f4\lang2057 The update problems of the edit-controls which occurred after long error messages where passed from the compiler have been fixed.
\par \pard\plain \s1\qj\sb240\sa120 \b\f5\ul\lang1031 {\lang2057 Opal libraries:
\par }\pard\plain \s38\sa120 \f4\lang2057 The procedure In.String did not work properly.
\par Exit-procedures defined with Process.SetExitProc caused an exception in Rel. 1.2e.
\par \pard\plain \s34\qj\sb240\sa120\keepn \f4\fs32\lang2057 \page {\cs19\fs16\up6 #{\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 #} Release1_3CD}${\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 $}
 Release 1.3 CD-ROM}K{\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 K} Release 1.3 CD-ROM}} {\b Release 1.3 CD-ROM}
\par \pard\plain \s1\qj\sb240\sa120 \b\f5\ul\lang1031 {\lang2057 Browser:
\par }\pard\plain \s38\sa120 \f4\lang2057 The browser did not accept TAB characters in the source.
\par \pard\plain \s1\qj\sb240\sa120 \b\f5\ul\lang1031 {\lang2057 Compiler:
\par }\pard\plain \s38\sa120 \f4\lang2057 Type bound procedures could not have a return value of type REAL or LONGREAL.
\par When an open array was accessed more than once in a single expression, the result was not always predictable.
\par \pard\plain \s1\qj\sb240\sa120 \b\f5\ul\lang1031 {\lang2057 Runtime System:
\par }\pard\plain \s38\sa120 \f4\lang2057 An empty record could not be used with type bound procedures when allocated with NEW due to a bug in the heap management.
\par \pard\plain \s1\qj\sb240\sa120 \b\f5\ul\lang1031 {\lang2057 Opal libraries:
\par }\pard\plain \s38\sa120 \f4\lang2057 In.Char did not block keys which are not relevant for this procedure (e.g. the cursor keys).
\par The procedure ColorPlane.GetDot did not work properly.
\par \pard\plain \s34\qj\sb240\sa120\keepn \f4\fs32\lang2057 \page {\cs19\fs16\up6 #{\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 #} Release1_3}${\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 $} Release 1.3}K
{\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 K} Release 1.3}} {\b Release 1.3}
\par \pard\plain \s1\qj\sb240\sa120 \b\f5\ul\lang1031 {\lang2057 Runtime System:
\par }\pard\plain \s38\sa120 \f4\lang2057 The RTS has been modified to enable the creation of objects from their symbolic types at runtime. Functions using this feature are currently in beta test stage. You can try them using the module {\strike OOBase}{\v 
OOBase}.
\par \pard\plain \s1\qj\sb240\sa120 \b\f5\ul\lang1031 {\lang2057 Opal libraries:
\par }\pard\plain \s38\sa120 \f4\lang2057 ColorPlane.Close did not work properly.
\par Module OOBase has been extended to support the implementation of persistent objects.
\par \pard\plain \s34\qj\sb240\sa120\keepn \f4\fs32\lang2057 \page {\cs19\fs16\up6 #{\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 #} Release2_0}${\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 $} Release 2.0}K
{\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 K} Release 2.0}} {\b Release 2.0}
\par \pard\plain \s1\qj\sb240\sa120 \b\f5\ul\lang1031 {\lang2057 Pow:
\par }\pard\plain \s38\sa120 \f4\lang2057 
The editor is not an integral part of the Pow! application any more, but has been moved into a DLL with a specific interface (called ELL - editor link library) and can therefore be exchanged. The default editor has been improved to handle up to 60 kBytes 
of text (total of all open files).
\par \pard\plain \s1\qj\sb240\sa120 \b\f5\ul\lang1031 {\lang2057 Opal libraries:
\par }\pard\plain \s38\sa120 \f4\lang2057 See topic \ldblquote Changes in Opal\rdblquote  in the Opal help file.
\par \pard\plain \s1\qj\sb240\sa120 \b\f5\ul\lang1031 {\lang2057 Linker:
\par }\pard\plain \s38\sa120 \f4\lang2057 .RES files created with Borland tools are now handled correctly.
\par \pard\plain \s1\qj\sb240\sa120 \b\f5\ul\lang1031 {\lang2057 Compiler:
\par }\pard\plain \s38\sa120 \f4\lang2057 
The floating point unit is now initialized before floating point operations. Therefore the result of floating point operations does not depend any more on previous calls to C libraries which might have led to different rounding modes.
\par A change in not exported global variables does not cause changes in the symbol file any more.
\par A bug in the front end which missed a certain type mismatch (procedure returning an integer could be used as index of an array instead of the result of the procedure) has been fixed.
\par The object file \ldblquote libentry.obj\rdblquote  is no longer part of the library \ldblquote dllobero.lib\rdblquote 
. The startup code libraries for DLLs and EXE-files are now of standard contents. The old system sometimes caused trouble when more than one Oberon DLL was being used (LibMain was not called in special circumstances).
\par Correction of a code generator problem when assigning a complex Boolean expression to a complex variable (e.g. {\f11 x^.r:=(a<0) & (1<b-c) OR ...})
\par \pard\plain \s1\qj\sb240\sa120 \b\f5\ul\lang1031 {\lang2057 Resource Compiler:
\par }\pard\plain \s38\sa120 \f4\lang2057 File references in a resource file can now be made relative to the position of the file itself.
\par Standard modules can be INCLUDEd to access the constants declared there. Therefore constants declared in standard source do not have to be declared in resource files a second time.
\par \pard\plain \s1\qj\sb240\sa120 \b\f5\ul\lang1031 {\lang2057 Module Definition Browser:
\par }\pard\plain \s38\sa120 \f4\lang2057 More than one exported global variable in one {\i identList} (identifiers of the same type seperated by \ldblquote ,\rdblquote ) caused a crash.
\par The output format for typebound procedures has been enhanced to show whether they are bound to a pointer or a VAR receiver.
\par \pard\plain \s34\qj\sb240\sa120\keepn \f4\fs32\lang2057 \page {\cs19\fs16\up6 #{\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 #} Release3_0}${\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 $} Release 3.0}K
{\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 K} Release 3.0}} {\b Release 3.0}
\par \pard\plain \s38\sb240\sa120 \f4\lang2057 {\b\i\fs28 new features
\par }\pard\plain \s1\qj\sb240\sa120 \b\f5\ul\lang1031 {\lang2057 Pow:
\par }\pard\plain \s40\qj\li284\sa120 \f4\lang2057 The template mechanism has been made easier to use. Pow! checks for templates at startup time and enumerates them in the popup menu {\i Project/New}
. Simply select a template, enter the name of the new project and press the {\i Ok} button. Creating a new project now takes only two mouseclicks and a project name to enter!
\par Separated Compile and Project menus.
\par File-Open, Project-Open and Create-Template use common dialogs.
\par All controls used in dialogs are standard Windows controls now.
\par The Control3d library is used for 3-dimensional controls.
\par Old instances of applications can now be terminated automatically before a new program is started.
\par The Save-As dialog now appears when a still untitled file has to be compiled.
\par The executable name can now be calculated for default projects, too (important for the tool interface, tools like "Find Error" now also work with default projects).
\par A new menu entry Compile/Link has been introduced.
\par There is a new option "Ask before replace" in the Edit/Replace dialog.
\par \pard\plain \s1\qj\sb240\sa120 \b\f5\ul\lang1031 {\lang2057 Editor:
\par }\pard\plain \s38\li284\sa120 \f4\lang2057 A new editor is now included.
\par It is capable of handling large files, limited only by the amount of memory available.
\par The entire marked block can be indented and unindented.
\par Some syntax support is offered for Oberon-2 language elements.
\par Oberon-2 comments can be displayed in a separate colour.
\par \pard\plain \s1\qj\sb240\sa120 \b\f5\ul\lang1031 {\lang2057 Compiler:
\par }\pard\plain \s40\qj\li284\sa120 \f4\lang2057 
The compiler option "Nil check" has been added. If selected, all pointers are checked for a NIL-value before dereferencing. If a NIL-value is found, a runtime error is generated. The use of this option significantly reduces performance and increases code 
size. It is mainly a convenience for beginners, because the operating system detects this kind of error anyway and generates an exception. In this case it is just much more difficult to find the location in the program which caused the error.
\par The compiler o
ption "Smart callbacks" has been added. If this option is used the compiler generates code which is capable of selecting the correct data segment when entering a procedure, even if it is not included in the exports section of the definition file (or the e
xports in the linker options of {\i Pow!}). It also eliminates the need to call Windows.MakeProcInstance(\'85
) for callback functions because thunks are not necessary any more. Smart callbacks must not be used with programs which explicitely change the contents of the SS register or when compiling a module of a runtime system for the {\i Pow!}
 Oberon-2 compiler. IF smart callbacks are not selected, it is not possible to call procedures of a module in a .EXE file from within a DLL using procedure variables or to use type bound procedures located in a .EXE file from within a DLL (e.g. via polymo
rphism). Smart callbacks are therefore essential if a class hierarchy located in a DLL should be extended in a .EXE file.
\par Warnings have been added if a procedure of type |WINDOWS| ha
s a capitalized name equal to "WINMAIN", "LIBMAIN" or "PROGMAIN", but the spelling is different from "WinMain", "LibMain" or "ProgMain". If the intention was to put the procedure to the use implied by its name, the module initialization was not properly e
xecuted in those cases, but the linker would not find an error because it is not case sensitive.
\par Using a file name that differs from the module name now causes an error.
\par Read only VAR parameters have been introduced. This is intended to solve the problem of
 having to choose between efficient string parameter passing and a clean interface definition (example: PROCEDURE Length(VAR txt-:ARRAY OF CHAR);). It is also possible to use string constants as an argument for an ARRAY OF CHAR which is declared as a read
 only VAR parameter.
\par Run time type information is now supported to aid the implementation of persistent objects and a meta-programming interface.
\par The error messages generated by the compiler now sometimes include the ident from the source which caused the error (e.g. for unresolved forward declarations).
\par The compiler now supports C calling convention. To select it the system flag [CDECL] has been introduced. It can be used instead of [WINDOWS] with procedures and procedure variables. Interfaces to standard DLLs require the [WINDOWS] flag, interfaces to OL
E functions.require the [CDECL] flag.
\par \pard\plain \s1\qj\sb240\sa120 \b\f5\ul\lang1031 {\lang2057 Runtime System:
\par }\pard\plain \s38\sa120 \f4\lang2057 The runtime system now includes a garbage collector. It can be activated or deactivated in the linker options.
\par \pard\plain \s1\qj\sb240\sa120 \b\f5\ul\lang1031 {\lang2057 Module Definition Browser:
\par }\pard\plain \s40\qj\li284\sa120 \f4\lang2057 The module definition browser now also accepts source files including read only VAR parameters.
\par \pard\plain \s1\qj\sb240\sa120 \b\f5\ul\lang1031 {\cs41\strike\ulnone\cf11\lang2057 Opal++:}{\v\ulnone\lang2057 Contents@opalpp.hlp}{\lang2057 
\par }\pard\plain \s40\qj\li284\sa120 \f4\lang2057 Pre-release of a new object oriented library.
\par \pard\plain \s38\sb240\sa120 \f4\lang2057 {\b\i\fs28 corrected bugs
\par }\pard\plain \s1\qj\sb240\sa120 \b\f5\ul\lang1031 {\lang2057 Pow:
\par }\pard\plain \s40\qj\li284\sa120 \f4\lang2057 Make did not check the timestamp of executables of the default project
\par The order of compilation was sometimes wrong if a module A was imported from a module B and B from a module C, and both modules A and C changed between two calls make, compile or build.
\par After selecting a new editor all open windows were closed without saving changes. Now a \ldblquote Save?\rdblquote  message box appears in this case.
\par Instead of "Ok/Cancel" some message boxes now show "Yes/No", where this is more appropriate.
\par The caret was lost after pressing the save-button.
\par Pow! crashed when no editor was selected (e.g. after deleting "pow.cfg").
\par \pard\plain \s1\qj\sb240\sa120 \b\f5\ul\lang1031 {\cs41\strike\ulnone\cf11\lang2057 Opal libraries:}{\v\lang2057 OPAL_CHANGES@_oberon.hlp}{\lang2057 
\par }\pard\plain \s40\li284\sa120 \f4\lang2057 If\line a program A using Opal was terminated while the Opal.DLL was still in use by a different program (e.g. {\i Pow!}) and\line 
a program B using Opal was started and Windows assigned the same Process Description Block as previously for program A,\line program B was terminated instantly because of an ASSERT fault in module IOManage.
\par \pard\plain \s1\qj\sb240\sa120 \b\f5\ul\lang1031 {\lang2057 Linker:
\par }\pard\plain \s40\qj\li284\sa120 \f4\lang2057 The linker crashed when it could not find a runtime library.
\par \pard\plain \s1\qj\sb240\sa120 \b\f5\ul\lang1031 {\lang2057 Compiler:
\par }\pard\plain \s40\qj\li284\sa120 \f4\lang2057 File errors reported (e.g. when accessing a symbol file) allow now to distinguish between different causes of the problem (sharing violation, access denied, read-only,\'85
) instead of interpreting all problems as "file not found".
\par \pard\plain \s1\qj\sb240\sa120 \b\f5\ul\lang1031 {\lang2057 Resource Compiler:
\par }\pard\plain \s40\qj\li284\sa120 \f4\lang2057 A bug has been fixed which caused problems when more than one icon was specified in a resource file.
\par The proper error position is now reported if an error in an included file is encountered.
\par \pard\plain \s1\qj\sb240\sa120 \b\f5\ul\lang1031 {\lang2057 Browser:
\par }\pard\plain \s40\qj\li284\sa120 \f4\lang2057 Ranges in case labels were not handled correctly in some cases.
\par \pard\plain \s34\qj\sb240\sa120\keepn \f4\fs32\lang2057 \page {\cs19\fs16\up6 #{\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 #} Release3_0_32}${\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 $}
 Release 3.0 32 Bit}K{\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 K} Release 3.0 32 Bit}} {\b Release 3.0 32 Bit}
\par \pard\plain \s38\sb240\sa120 \f4\lang2057 {\b\i\fs28 new features
\par }\pard\plain \s1\qj\sb240\sa120 \b\f5\ul\lang1031 {\lang2057 Pow:
\par }\pard\plain \s40\qj\li284\sa120 \f4\lang2057 Pow has been migrated to the 32 bit world.
\par \pard\plain \s1\qj\sb240\sa120 \b\f5\ul\lang1031 {\lang2057 Compiler:
\par }\pard\plain \s40\qj\li284\sa120 \f4\lang2057 The compiler generates 32 bit code suitable for multithreaded applications under Windows NT and Windows 95.
\par The compiler can now generate either CodeView 4 or CodeView 5 compatible symbolic debug information. As a result it is possible to use Microsofts Visual C++ as a symbolic debugger for Oberon-2 programs.
\par The declaration modifier [WINDOWS] has been replaced by [_APICALL] for call-back procedures and API functions and by [_NOTALIGNED] for records which should use alignment for the individual record fields.
\par Definition modules only: If a parameter of an API function is a pointer to a record, this parameter may be declared as VAR STATICTYPED in the
 Oberon-2 definition module. The actual parameter passed may then be either a record of the appropriate type or NIL. In contrast to ordinary VAR parameters only a pointer to the record but no type tag is pushed on the stack.
\par New module SYSTEM functions: BITOR(int, int):int, BITXOR(int, int):int, BITAND(int, int):int, HIWORD(LONGINT): INTEGER, LOWORD(LONGINT): INTEGER
\par \pard\plain \s1\qj\sb240\sa120 \b\f5\ul\lang1031 {\lang2057 Libraries:
\par }\pard\plain \s40\qj\li284\sa120 \f4\lang2057 The sources of the run time system, the Opal library and the start-up code are now part of the distribution.
\par \pard\plain \s34\qj\sb240\sa120\keepn \f4\fs32\lang2057 \page {\cs19\fs16\up6 #{\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 #} KnownBugs}${\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 $} Known bugs}K
{\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 K} Known bugs}} {\f5 Known Bugs
\par }\pard\plain \s38\sa120 \f4\lang2057 {\f5\fs20 The following bugs and limitations are known, but could not be fixed for this release.
\par {\pntext\pard\plain\f1\fs20\lang2057 \'b7\tab}}\pard \s38\fi-283\li283\sa120{\*\pn \pnlvlblt\pnf1\pnstart1\pnindent283\pnhang{\pntxtb \'b7}}{\f5\fs20 Help files are not up to date.
\par {\pntext\pard\plain\f1\fs20\lang2057 \'b7\tab}The garbage collector is not implemented yet.
\par {\pntext\pard\plain\f1\fs20\lang2057 \'b7\tab}It is not possible to set breakpoints in modules linked from a static library in MSVC 5.0.
\par }\pard\plain \s34\qj\sb240\sa120 \f4\fs32\lang2057 \page {\cs19\fs16\up6 #{\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 #} OOBase}${\footnote \pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 $} OOBase}K{\footnote 
\pard\plain \s20\qj\sa120 \f4\fs20\lang1031 {\cs19\fs16\up6 K} OOBase}} Module OOBase
\par \pard\plain \s38\sa120 \f4\lang2057 The module OOBase is contained in Opal starting from Rel. 1.4f  (OPAL104F.DLL).
\par \pard\plain \s4\qj\sb240\sa60 \b\f5\lang1031 {\lang2057 (preliminary definition)
\par }\pard\plain \s38\sa120 \f4\lang2057 The type OOBase.ObjectT is intended to be the root of any class hierarchy. It will be used as parameter type for container classes.
\par ObjToName returns the module and class name as well as the filename (EXE or DLL) of any given object derived from OOBase.ObjectT.
\par With NameToObj an object can be created from its symbolic name. The call of NEW is already done by NameToObj. The dynamic type of the pointer returned is the one defined in the parameter name using the form \ldblquote moduleName.RecordType\rdblquote 
. If anything goes wrong a NIL pointer is returned.
\par Objects from DLLs which are not imported using an import library must not be loaded dynamically by directly referencing an object contained in the DLL yet.
\par You have to select \ldblquote DLL runtime system\rdblquote  in the linker options or NameToObj and ObjToName will not work properly.
\par DEFINITION OF MODULE OOBase;
\par \pard\plain \s5\qj\sb240\sa60 \f5\fs22\lang1031 {\lang2057 TYPE
\par }\pard\plain \s39\qj\li283\sa120 \f4\lang1031 {\lang2057 ObjectT*=RECORD 
\par }\pard\plain \s6\qj\sb240\sa60 \i\f4\fs22\lang1031 {\lang2057 END;
\par }\pard\plain \s39\qj\li283\sa120 \f4\lang1031 {\lang2057 Object*=POINTER TO ObjectT;
\par }\pard\plain \s38\sa120 \f4\lang2057 PROCEDURE ObjToName*(p:Object; 
\par \pard\plain \s39\qj\li283\sa120 \f4\lang1031 {\lang2057 VAR codeName, name:ARRAY OF CHAR);
\par }\pard\plain \s38\sa120 \f4\lang2057 PROCEDURE NameToObj*(codeName, name:ARRAY OF CHAR; 
\par \pard\plain \s39\qj\li283\sa120 \f4\lang1031 {\lang2057 VAR p:Object);
\par }\pard\plain \s38\sa120 \f4\lang2057 END OOBase.
\par \pard\plain \qj\sa120 \f4\lang1031 {\lang2057 
\par }}