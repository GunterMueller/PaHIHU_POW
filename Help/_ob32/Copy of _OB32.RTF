{\rtf1\ansi \deff5\deflang1033{\fonttbl{\f0\froman\fcharset0\fprq2 Tms Rmn;}{\f1\froman\fcharset2\fprq2 Symbol;}{\f2\fswiss\fcharset0\fprq2 Helv;}{\f3\fmodern\fcharset0\fprq1 Courier;}
{\f4\froman\fcharset0\fprq2 Times New Roman;}{\f5\fswiss\fcharset0\fprq2 Arial;}{\f6\froman\fcharset0\fprq2 MS Serif;}{\f7\fswiss\fcharset0\fprq2 MS Sans Serif;}{\f8\froman\fcharset0\fprq2 Times;}{\f9\fswiss\fcharset0\fprq2 Helvetica;}
{\f10\fswiss\fcharset0\fprq2 System;}{\f11\fmodern\fcharset0\fprq1 Courier New;}{\f12\fswiss\fcharset0\fprq2 Helvetica-Narrow;}{\f13\fnil\fcharset2\fprq2 Marlett;}{\f14\fmodern\fcharset0\fprq1 Lucida Console;}
{\f15\fswiss\fcharset0\fprq2 Lucida Sans Unicode;}{\f16\fswiss\fcharset0\fprq2 Tahoma;}{\f17\fswiss\fcharset0\fprq2 Arial Narrow;}{\f18\fswiss\fcharset2\fprq2 Bookshelf Symbol 1;}{\f19\fnil\fcharset2\fprq2 Bookshelf Symbol 2;}
{\f20\froman\fcharset2\fprq2 Bookshelf Symbol 3;}{\f21\froman\fcharset2\fprq2 MT Extra;}{\f22\fswiss\fcharset0\fprq2 Arial Black;}{\f23\fswiss\fcharset0\fprq2 Arial Rounded MT Bold;}{\f24\froman\fcharset0\fprq2 Book Antiqua;}
{\f25\froman\fcharset0\fprq2 Bookman Old Style;}{\f26\fswiss\fcharset0\fprq2 Century Gothic;}{\f27\froman\fcharset0\fprq2 Century Schoolbook;}{\f28\fnil\fcharset2\fprq2 Monotype Sorts;}{\f29\froman\fcharset0\fprq2 Map Symbols;}
{\f30\fswiss\fcharset0\fprq2 Verdana;}{\f31\fdecor\fcharset0\fprq2 Algerian;}{\f32\fdecor\fcharset0\fprq2 Braggadocio;}{\f33\fswiss\fcharset0\fprq2 Britannic Bold;}{\f34\fscript\fcharset0\fprq2 Brush Script MT;}{\f35\fdecor\fcharset0\fprq2 Colonna MT;}
{\f36\fscript\fcharset0\fprq2 Comic Sans MS;}{\f37\fdecor\fcharset0\fprq2 Desdemona;}{\f38\froman\fcharset0\fprq2 Footlight MT Light;}{\f39\froman\fcharset0\fprq2 Garamond;}{\f40\fswiss\fcharset0\fprq2 Impact;}{\f41\fdecor\fcharset0\fprq2 Kino MT;}
{\f42\froman\fcharset0\fprq2 Wide Latin;}{\f43\fmodern\fcharset2\fprq1 MS LineDraw;}{\f44\fscript\fcharset0\fprq2 Matura MT Script Capitals;}{\f45\fdecor\fcharset0\fprq2 Playbill;}{\f46\fnil\fcharset2\fprq2 Wingdings;}
{\f47\fswiss\fcharset0\fprq2 Haettenschweiler;}{\f48\froman\fcharset255\fprq2 Roman;}{\f49\fscript\fcharset255\fprq2 Script;}{\f50\fmodern\fcharset255\fprq2 Modern;}{\f51\fswiss\fcharset0\fprq1 MS Dialog;}{\f52\fswiss\fcharset0\fprq2 Geneva;}
{\f53\froman\fcharset0\fprq2 New York;}{\f54\froman\fcharset0\fprq2 Palatino;}{\f55\froman\fcharset0\fprq2 NewCenturySchlbk;}{\f56\froman\fcharset2\fprq2 MT SYMBOL;}{\f57\froman\fcharset0\fprq2 Bookman;}{\f58\fswiss\fcharset0\fprq2 AvantGarde;}
{\f59\fscript\fcharset0\fprq2 ZapfChancery;}{\f60\fdecor\fcharset2\fprq2 ZapfDingbats;}{\f61\froman\fcharset0\fprq0 u;}{\f62\froman\fcharset0\fprq0 f;}{\f63\froman\fcharset238\fprq2 Times New Roman CE;}{\f64\froman\fcharset204\fprq2 Times New Roman Cyr;}
{\f65\froman\fcharset161\fprq2 Times New Roman Greek;}{\f66\froman\fcharset162\fprq2 Times New Roman Tur;}{\f67\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f68\fswiss\fcharset238\fprq2 Arial CE;}{\f69\fswiss\fcharset204\fprq2 Arial Cyr;}
{\f70\fswiss\fcharset161\fprq2 Arial Greek;}{\f71\fswiss\fcharset162\fprq2 Arial Tur;}{\f72\fswiss\fcharset186\fprq2 Arial Baltic;}{\f73\fmodern\fcharset238\fprq1 Courier New CE;}{\f74\fmodern\fcharset204\fprq1 Courier New Cyr;}
{\f75\fmodern\fcharset161\fprq1 Courier New Greek;}{\f76\fmodern\fcharset162\fprq1 Courier New Tur;}{\f77\fmodern\fcharset186\fprq1 Courier New Baltic;}{\f78\froman\fcharset238\fprq2 TIMES CE;}{\f79\froman\fcharset204\fprq2 TIMES Cyr;}
{\f80\froman\fcharset161\fprq2 TIMES Greek;}{\f81\froman\fcharset162\fprq2 TIMES Tur;}{\f82\froman\fcharset186\fprq2 TIMES Baltic;}{\f83\fswiss\fcharset238\fprq2 HELVETICA CE;}{\f84\fswiss\fcharset204\fprq2 HELVETICA Cyr;}
{\f85\fswiss\fcharset161\fprq2 HELVETICA Greek;}{\f86\fswiss\fcharset162\fprq2 HELVETICA Tur;}{\f87\fswiss\fcharset186\fprq2 HELVETICA Baltic;}{\f88\fswiss\fcharset238\fprq2 Arial Narrow CE;}{\f89\fswiss\fcharset204\fprq2 Arial Narrow Cyr;}
{\f90\fswiss\fcharset161\fprq2 Arial Narrow Greek;}{\f91\fswiss\fcharset162\fprq2 Arial Narrow Tur;}{\f92\fswiss\fcharset186\fprq2 Arial Narrow Baltic;}{\f93\fswiss\fcharset238\fprq2 Arial Black CE;}{\f94\fswiss\fcharset204\fprq2 Arial Black Cyr;}
{\f95\fswiss\fcharset161\fprq2 Arial Black Greek;}{\f96\fswiss\fcharset162\fprq2 Arial Black Tur;}{\f97\fswiss\fcharset186\fprq2 Arial Black Baltic;}{\f98\froman\fcharset238\fprq2 Bookman Old Style CE;}
{\f99\froman\fcharset204\fprq2 Bookman Old Style Cyr;}{\f100\froman\fcharset161\fprq2 Bookman Old Style Greek;}{\f101\froman\fcharset162\fprq2 Bookman Old Style Tur;}{\f102\froman\fcharset186\fprq2 Bookman Old Style Baltic;}}{\colortbl;\red0\green0\blue0;
\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;
\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\nowidctlpar \f5\fs20\lang1031 \snext0 Normal;}{\s1\sb240\nowidctlpar \b\f9\ul\lang1031 \sbasedon0\snext0 heading 1;}{\s2\sb120\nowidctlpar 
\b\f9\lang1031 \sbasedon0\snext0 heading 2;}{\s3\li354\nowidctlpar \b\f8\lang1031 \sbasedon0\snext15 heading 3;}{\s4\sb240\keep\keepn\nowidctlpar \f5\lang1031 \sbasedon0\snext15 heading 4;}{\s5\li567\sb360\keep\keepn \b\f5\lang1031 \sbasedon0\snext0 
heading 5;}{\s6\li567\sb240\keep\keepn \i\f5\lang1031 \sbasedon0\snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}{\s15\li708\nowidctlpar \f5\fs20\lang1031 \sbasedon0\snext15 Normal Indent;}{\*\cs16 \additive\super \sbasedon10 
endnote reference;}{\s17\nowidctlpar\tqc\tx4819\tqr\tx9071 \f5\fs20\lang1031 \sbasedon0\snext17 footer;}{\*\cs18 \additive\fs16\up6 \sbasedon10 footnote reference;}{\s19\nowidctlpar \f5\fs20\lang1031 \sbasedon0\snext19 footnote text;}{
\s20\sb360\sa120\nowidctlpar \b\f5\lang1031 \sbasedon0\snext20 Head2;}{\s21\sa72\nowidctlpar \f11\lang1031 \sbasedon0\snext21 Source;}{\s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 \sbasedon0\snext22 helptopic;}{
\s23\sl288\slmult1\nowidctlpar \f5\fs20\lang1031 \sbasedon0\snext23 helpkey;}{\s24\nowidctlpar \f5\fs20\lang1031 \sbasedon0\snext24 helptext;}{\s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 \sbasedon21\snext25 helpsource;}{\s26\sb240\sa180\nowidctlpar 
\b\f5\fs22\lang1031 \sbasedon24\snext26 helplarge;}{\s27\fi-284\li284\nowidctlpar\tx284 \f5\fs20\lang1031 \sbasedon24\snext27 helpvorgang;}{\s28\li567\sb120\sa120\nowidctlpar \f5\fs20\lang1031 \sbasedon24\snext28 helpSingleEBNF;}{
\s29\li567\sb120\nowidctlpar \f5\fs20\lang1031 \sbasedon28\snext29 helpfirstEBNF;}{\s30\li567\sa120\nowidctlpar \f5\fs20\lang1031 \sbasedon28\snext30 helpLastEBNF;}{\s31\li567\nowidctlpar \f5\fs20\lang1031 \sbasedon28\snext31 helpEBNF;}{
\s32\li567\sb120\nowidctlpar \f5\lang1031 \sbasedon0\snext32 procdescr;}{\s33\sb120\nowidctlpar \f5\lang2057 \sbasedon0\snext33 descr;}{\s34\nowidctlpar\tx1702 \f11\fs20\lang2057 \sbasedon32\snext34 realsource;}{\s35\sb240\sa180\nowidctlpar 
\b\f5\fs22\cf6\lang1031 \sbasedon26\snext35 modulename;}{\s36\fi-2552\li2552\nowidctlpar \f11\fs20\lang1031 \sbasedon24\snext36 Syntax;}{\s37\fi-2268\li2268\nowidctlpar\tx2268 \f5\fs20\lang2057 \sbasedon24\snext37 konstlist;}{
\s38\qj\li284\sb60\sa60\nowidctlpar \f5\lang2057 \sbasedon0\snext38 Prozedurbeschreibung;}{\*\cs39 \additive\sbasedon10 page number;}{\s40\li567\sb120\tx1702 \f11\lang1031 \sbasedon0\snext40 source;}{\s41\fi-2835\li3402\sb60\keep\keepn \f5\lang1031 
\sbasedon0\snext41 parameter;}{\s42\fi-2835\li3402\sb120\keep \f5\lang1031 \sbasedon0\snext42 constant;}{\s43\li567\sb120 \f5\lang1031 \sbasedon0\snext43 method;}{\s44\fi-2835\li3402\sb120\keep\keepn \f5\lang1031 \sbasedon0\snext44 variable;}{
\s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \sbasedon0\snext25 helpheading1;}{\s46\sb180 \b\f5\lang1031 \sbasedon0\snext45 helpheading2;}{\s47\sb60 \f5\fs20\lang1031 \sbasedon0\snext46 helpNormal;}{\s48\sb120\sa120 \b\f5\fs20\lang1031 \sbasedon0\snext48 
helpModuleRef;}{\s49\fi-2880\li2880\sb60 \f5\fs20\lang1031 \sbasedon0\snext49 help Parameter;}{\s50\sb160 \b\f5\fs22\lang1031 \sbasedon0\snext50 helpheading3;}{\s51\sb90 \b\f5\fs20\lang1031 \sbasedon0\snext47 helpNormal1;}{\s52\sb6\tqc\tx4536\tqr\tx9072 
\f5\fs12\lang1031 \sbasedon0\snext0 header;}{\s53\sb360\tqr\tx9077 \b\caps\f5\fs28\lang1031 \sbasedon0\snext0 toc 1;}{\s54\sb240\tqr\tx9077 \b\f5\lang1031 \sbasedon0\snext0 toc 2;}{\s55\tqr\tx9077 \f5\lang1031 \sbasedon0\snext0 toc 3;}{
\s56\li360\tqr\tx9077 \f5\fs20\lang1031 \sbasedon0\snext0 toc 4;}{\s57\li480\tqr\tx9077 \f5\fs20\lang1031 \sbasedon0\snext0 toc 5;}{\s58\li600\tqr\tx9077 \f5\fs20\lang1031 \sbasedon0\snext0 toc 6;}{\s59\li720\tqr\tx9077 \f5\fs20\lang1031 
\sbasedon0\snext0 toc 7;}{\s60\li840\tqr\tx9077 \f5\fs20\lang1031 \sbasedon0\snext0 toc 8;}{\s61\li960\tqr\tx9077 \f5\fs20\lang1031 \sbasedon0\snext0 toc 9;}{\s62\fi-120\li120\keepn\tqr\tldot\tx4178 \f5\fs20\lang1031 \sbasedon0\snext0 index 1;}{
\s63\fi-120\li240\tqr\tldot\tx4178 \f5\fs20\lang1031 \sbasedon0\snext0 index 2;}{\s64\fi-120\li360\tqr\tldot\tx4178 \f5\fs20\lang1031 \sbasedon0\snext0 index 3;}{\s65\fi-120\li480\tqr\tldot\tx4178 \f5\fs20\lang1031 \sbasedon0\snext0 index 4;}{
\s66\fi-120\li600\tqr\tldot\tx4178 \f5\fs20\lang1031 \sbasedon0\snext0 index 5;}{\s67\fi-120\li720\tqr\tldot\tx4178 \f5\fs20\lang1031 \sbasedon0\snext0 index 6;}{\s68\fi-120\li840\tqr\tldot\tx4178 \f5\fs20\lang1031 \sbasedon0\snext0 index 7;}{
\s69\fi-120\li960\tqr\tldot\tx4178 \f5\fs20\lang1031 \sbasedon0\snext0 index 8;}{\s70\fi-120\li1080\tqr\tldot\tx4178 \f5\fs20\lang1031 \sbasedon0\snext0 index 9;}{\s71\sb120\sa120\keepn \b\f5\fs28\lang1031 \sbasedon0\snext0 index heading;}}{\info
{\title Pow! - Help}{\subject Hilfesystem f\'fcr Pow!}{\author fim}{\keywords Pow!}{\doccomm Was f\'fcr eine Plage...}{\operator Bernhard Leisch}{\creatim\yr1993\mo4\dy15\hr13\min58}{\revtim\yr1997\mo4\dy9\hr8\min40}{\version1}{\edmins0}{\nofpages0}
{\nofwords0}{\nofchars0}{\vern49213}}\paperw11907\paperh31185\margl1418\margr1984\margt1418\margb1531 \deftab737\widowctrl\ftnbj\aenddoc\hyphhotz425\noextrasprl\prcolbl\cvmme\sprsspbf\brkfrm\swpbdr\hyphcaps0 \fet0\sectd 
\psz9\linex0\headery709\footery709\colsx709\endnhere {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4
\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {
\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} Pow_Hilfe_Index}${\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 $} Pow! Help Index}K{\footnote \pard\plain \s19\nowidctlpar 
\f5\fs20\lang1031 {\cs18\fs16\up6 K} Index}}{\lang2057  Oberon Help Index
\par }\pard\plain \s23\sl288\slmult1\nowidctlpar \f5\fs20\lang1031 {\lang2057 
\par }{\strike\lang2057 Opal}{\v\lang2057 Basic_Libraries}{\lang2057 
\par 
\par }{\strike\lang2057 The Programming Language Oberon-2}{\v\lang2057 Oberon2}{\lang2057 
\par }{\strike\lang2057 Information specific to the RA Oberon-2 Compiler}{\v\lang2057 Oberon2_Extensions}{\lang2057 
\par 
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} Basic_Libraries}${\footnote \pard\plain \s19\nowidctlpar 
\f5\fs20\lang1031 {\cs18\fs16\up6 $} OPAL}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} OPAL; Libraries}}{\lang2057  OPAL
\par }\pard\plain \s23\sl288\slmult1\nowidctlpar \f5\fs20\lang1031 {\lang2057 Oberon Portable Applications Library Rel. 1.0 32 Bit
\par 
\par Basic modules
\par }\pard\plain \s47\sb60 \f5\fs20\lang1031 {\strike\cf4 module Strings}{\v Strings}
\par {\strike\cf4 module Float}{\v Float}
\par {\strike\cf4 module Utils}{\v Utils}
\par {\strike\cf4 module OOBase}{\v OOBase}
\par {\strike\cf4 module Param}{\v Param}
\par {\strike\cf4 module Process}{\v Process}
\par \pard\plain \s23\sl288\slmult1\nowidctlpar \f5\fs20\lang1031 {\lang2057 
\par User Interface
\par }\pard\plain \s47\sb60 \f5\fs20\lang1031 {\strike\cf4 module Display}{\v Display}
\par {\strike\cf4 module ColorPlane}{\v ColorPlane}
\par \pard\plain \s23\sl288\slmult1\nowidctlpar \f5\fs20\lang1031 {\lang2057 
\par File System Access
\par }\pard\plain \s47\sb60 \f5\fs20\lang1031 {\strike\cf4 module File}{\v File}
\par {\strike\cf4 module Volume}{\v Volume}
\par \pard\plain \s23\sl288\slmult1\nowidctlpar \f5\fs20\lang1031 {\lang2057 
\par Printing
\par }\pard\plain \s47\sb60 \f5\fs20\lang1031 {\strike\cf4 module Print}{\v Print}
\par \pard\plain \s23\sl288\slmult1\nowidctlpar \f5\fs20\lang1031 {\lang2057 
\par Compatibility modules according to the Oakwood Guidelines
\par }\pard\plain \s47\sb60 \f5\fs20\lang1031 {\strike\cf4 module In}{\v In}
\par {\strike\cf4 module Out}{\v Out}
\par {\strike\cf4 module XYplane}{\v XYplane}
\par \pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} Oberon2}${\footnote \pard\plain \s19\nowidctlpar 
\f5\fs20\lang1031 {\cs18\fs16\up6 $} Oberon - 2}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} Oberon - 2}}{\lang2057  Oberon - 2
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 Oberon - 2 was developed at the ETH Z\'fcrich.
\par This chapter of the help text contains most of the information found in a paper by H. M\'f6ssenb\'f6ck and N. Wirth, "The Programming Language Oberon - 2".
\par 
\par }\pard\plain \s23\sl288\slmult1\nowidctlpar \f5\fs20\lang1031 {\strike\lang2057 Syntax}{\v\lang2057 Syntax}{\lang2057 
\par }{\strike\lang2057 Vocabulary and Representation}{\v\lang2057 Vocabulary_Representation}{\lang2057 
\par }{\strike\lang2057 Declarations and scope rules}{\v\lang2057 Declarationsandscoperules}{\lang2057 
\par }{\strike\lang2057 Constant declarations}{\v\lang2057 Constantdeclarations}{\lang2057 
\par }{\strike\lang2057 Type declarations}{\v\lang2057 Typedeclarations}{\lang2057 
\par }{\strike\lang2057 Variable declarations}{\v\lang2057 Variabledeclarations}{\lang2057 
\par }{\strike\lang2057 Expressions}{\v\lang2057 Expressions}{\lang2057 
\par }{\strike\lang2057 Statements}{\v\lang2057 Statements}{\lang2057 
\par }{\strike\lang2057 Procedure declarations}{\v\lang2057 Proceduredeclarations}{\lang2057 
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 
\par }\pard\plain \s23\sl288\slmult1\nowidctlpar \f5\fs20\lang1031 {\strike\lang2057 The module SYSTEM}{\v\lang2057 ThemoduleSYSTEM}{\lang2057 
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} Syntax}}{\lang2057  Syntax
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 An extended Backus-Naur Formalism (EBNF) is used to describe the syntax of Oberon-2:
\par Alternatives are separated by |. Brackets [ and ] denote optionality of the enclosed expression, and braces \{ and \}
 denote its repetition (possibly 0 times). Non-terminal symbols start with an upper-case letter (e.g. Statement). Terminal symbols either st
art with a lower-case letter (e.g. ident), or are written all in upper-case letters (e.g. BEGIN), or are denoted by strings (e.g. ":=").
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} {\v Vocabulary_Representation}}${\footnote \pard\plain 
\s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 $} Vocabulary and Representation}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} Vocabulary and Representation}}{\lang2057  Vocabulary and Representation
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 
The representation of (terminal) symbols in terms of characters is defined using the ASCII set. Symbols are identifiers, numbers, strings, operators, and delimiters. The following lexical rules must be observed: Blanks and line breaks must not occur withi
n symbols (except in comments, and blanks in strings). They are ignored unless they are essential to separate two consecutive symbols. Capital and lower-case letters are considered as distinct.
\par 
\par 1. }{\b\lang2057 Identifiers }{\lang2057 are sequences of letters and digits. The first character must be a letter.
\par }\pard\plain \s28\li567\sb120\sa120\nowidctlpar \f5\fs20\lang1031 {\lang2057 ident = letter \{ letter | digit \}.
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 Examples: x  Scan  Oberon2  GetSymbol  firstLetter
\par 
\par 2. }{\b\lang2057 Numbers }{\lang2057 
are (unsigned) integer or real constants. The type of an integer constant is the minimal type to which the constant value belongs. If the constant is specified with the suffix H, the representation is hexadecimal otherwise it is decimal.
\par A real numberr always contains a decimal point. Optionally it may also contain a decimal scale factor
. The letter E (or D) means "times ten to the power of". A real number is of type REAL, unless it has a scale factor containing the letter D. In this case it is of type LONGREAL.
\par }\pard\plain \s29\li567\sb120\nowidctlpar \f5\fs20\lang1031 {\lang2057 number = integer | real.
\par }\pard\plain \s31\li567\nowidctlpar \f5\fs20\lang1031 {\lang2057 integer = digit \{digit\} | digit \{hexDigit\} "H"
\par real = digit \{digit\} "." \{digit\} [ScaleFactor].
\par ScaleFactor = ("E" | "D") ["+" | "-"] digit \{digit\}.
\par hexDigit = digit | "A" | "B" | "C" | "D" | "E" | "F".
\par }\pard\plain \s30\li567\sa120\nowidctlpar \f5\fs20\lang1031 {\lang2057 digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9".
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 Examples: 1991  0DH  12.3  4.567E8  0.57712566D-6
\par 
\par 3. }{\b\lang2057 Character constants }{\lang2057 are denoted by the ordinal number of the character in hexadecimal notation followed by the letter X.
\par }\pard\plain \s28\li567\sb120\sa120\nowidctlpar \f5\fs20\lang1031 {\lang2057 character = digit \{HexDigit\}"X".
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 4. }{\b\lang2057 Strings }{\lang2057 
are sequences of characters enclosed in singel (') or double (") quote marks. The opening quote must be the same as the closing quote and must not occur within the string. The number of characters in a string is called its length. A string of length 1 can
 be used wherever a character constant is allowed and vice vers.
\par }\pard\plain \s28\li567\sb120\sa120\nowidctlpar \f5\fs20\lang1031 {\lang2057 string = ' " ' \{char\} ' " ' | " ' " \{char\} " ' ".
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 Examples: "Oberon-2"  "Don't worry!"
\par 
\par 5. }{\b\lang2057 Operators and delimiters }{\lang2057 are the special characters, character pairs, or reserved words listed below. The reserved words consist excusively of capital letters and cannot be used as identifiers.
\par \tab +\tab :=\tab ARRAY\tab IMPORT\tab RETURN
\par \tab -\tab ^\tab BEGIN\tab IN\tab \tab THEN
\par \tab *\tab =\tab BY\tab IS\tab \tab TO
\par \tab /\tab #\tab CASE\tab LOOP\tab \tab TYPE
\par \tab ~\tab <\tab CONST\tab MOD\tab \tab UNTIL
\par \tab &\tab >\tab DIV\tab MODULE\tab VAR
\par \tab .\tab <=\tab DO\tab NIL\tab \tab WHILE
\par \tab ,\tab >=\tab ELSE\tab OF\tab \tab WITH
\par \tab ;\tab ..\tab ELSIF\tab OR
\par \tab |\tab :\tab END\tab POINTER
\par \tab (\tab )\tab EXIT\tab PROCEDURE
\par \tab [\tab ]\tab FOR\tab RECORD
\par \tab \{\tab \}\tab IF\tab REPEAT
\par 
\par 6. }{\b\lang2057 Comments }{\lang2057 may be inserted between any two symbols in a program. They are arbitrary character sequences opened by the bracket (* and closed by *). Comments may be nested. They do not affect the meaning of a program.
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} Declarationsandscoperules}${\footnote \pard\plain 
\s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 $} Declarations and scope rules}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} Declarations and scope rules}}{\lang2057  Declarations and scope rules
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 Every identifier occuring in a program must be introduced by a declaration, unless it is a predeclared identifier. Declarations also specify certain permanent pro
perties of an object, such as whether it is a constant, a type, a variable, or a procedure. The identifier is then used to refer to the associated object.
\par The }{\b\lang2057 scope}{\lang2057  of an object x extends textually from the point of its declaration to the end of the block (module, procedure, or record) to which the declaration belongs and hence to which the object is }{\b\lang2057 local}{\lang2057 
. It excludes the scopes of equally named objects which are declared in nested blocks. The scope rules are:
\par 
\par }\pard \s24\fi-142\li284\nowidctlpar {\lang2057 1. No identifier may denote more than one object within a given scopy (i.e. no identifier may be declared twice in a block);
\par 2. An object may only be referenced within its scope;
\par 3. A type T of the form POINTER TO T1 can be declared before the scope of T1. In this case, the declaration of T1 must follow in the same block to which T is local;
\par 4. Identifiers denoting record fields or type-bound procedures are valid in record designators only.
\par }\pard \s24\nowidctlpar {\lang2057 
\par An identifier declared in a module block may be followed by an export mark ("*" or "-") in its declaration to i
ndicate that it is exported. An identifier x exported by a module M may be used in other modules, if they import M. The identifier is then denoted as M.x in these modules and is called }{\b\lang2057 qualified identifier}{\lang2057 
. Identifiers marked with "-" in their declaration are read-only in importing modules.
\par }\pard\plain \s29\li567\sb120\nowidctlpar \f5\fs20\lang1031 {\lang2057 Qualident = [ident "."] ident.
\par }\pard\plain \s30\li567\sa120\nowidctlpar \f5\fs20\lang1031 {\lang2057 IdentDef = ident ["*" |"-"].
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 The following identifiers are predeclared:
\par 
\par }{\strike\lang2057 \tab ABS}{\v\lang2057 Predeclaredprocedures}{\strike\lang2057 \tab \tab LEN}{\v\lang2057 Predeclaredprocedures}{\strike\lang2057 
\par \tab ASH}{\v\lang2057 Predeclaredprocedures}{\strike\lang2057 \tab \tab LONG}{\v\lang2057 Predeclaredprocedures}{\strike\lang2057 
\par \tab BOOLEAN}{\v\lang2057 Basictypes}{\strike\lang2057 \tab LONGINT}{\v\lang2057 Basictypes}{\strike\lang2057 
\par \tab CAP}{\v\lang2057 Predeclaredprocedures}{\strike\lang2057 \tab \tab LONGREAL}{\v\lang2057 Basictypes}{\strike\lang2057 
\par \tab CHAR}{\v\lang2057 Basictypes}{\strike\lang2057 \tab \tab MAX}{\v\lang2057 Predeclaredprocedures}{\strike\lang2057 
\par \tab CHR}{\v\lang2057 Predeclaredprocedures}{\strike\lang2057 \tab \tab MIN}{\v\lang2057 Predeclaredprocedures}{\strike\lang2057 
\par \tab COPY}{\v\lang2057 Predeclaredprocedures}{\strike\lang2057 \tab \tab NEW}{\v\lang2057 Predeclaredprocedures}{\strike\lang2057 
\par \tab DEC}{\v\lang2057 Predeclaredprocedures}{\strike\lang2057 \tab \tab ODD}{\v\lang2057 Predeclaredprocedures}{\strike\lang2057 
\par \tab ENTIER}{\v\lang2057 Predeclaredprocedures}{\strike\lang2057 \tab \tab ORD}{\v\lang2057 Predeclaredprocedures}{\strike\lang2057 
\par \tab EXCL}{\v\lang2057 Predeclaredprocedures}{\strike\lang2057 \tab \tab REAL}{\v\lang2057 Basictypes}{\strike\lang2057 
\par \tab FALSE}{\v\lang2057 Basictypes}{\strike\lang2057 \tab \tab SET}{\v\lang2057 Basictypes}{\strike\lang2057 
\par \tab HALT}{\v\lang2057 Predeclaredprocedures}{\strike\lang2057 \tab \tab SHORT}{\v\lang2057 Predeclaredprocedures}{\strike\lang2057 
\par \tab INC}{\v\lang2057 Predeclaredprocedures}{\strike\lang2057 \tab \tab SHORTINT}{\v\lang2057 Basictypes}{\strike\lang2057 
\par \tab INCL}{\v\lang2057 Predeclaredprocedures}{\strike\lang2057 \tab \tab SIZE}{\v\lang2057 Predeclaredprocedures}{\strike\lang2057 
\par \tab INTEGER}{\v\lang2057 Basictypes}{\strike\lang2057 \tab TRUE}{\v\lang2057 Basictypes}{\strike\lang2057 
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} Constantdeclarations}${\footnote \pard\plain \s19\nowidctlpar 
\f5\fs20\lang1031 {\cs18\fs16\up6 $} Constant declarations}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} Constant declarations}}{\lang2057  Constant declarations
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 A constant declaration associates an identifier with a constant value.
\par }\pard\plain \s29\li567\sb120\nowidctlpar \f5\fs20\lang1031 {\lang2057 ConstantDeclaration = IdentDef "=" ConstExpression.
\par }\pard\plain \s30\li567\sa120\nowidctlpar \f5\fs20\lang1031 {\lang2057 ConstExpression = Expression.
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 A constant expression is an expression that can be evaluated by a mere textual scan without actually executing the program. Its operands are constants or }{\strike\lang2057 predeclared functions}{
\v\lang2057 Predeclaredprocedures}{\lang2057  that can be evaluated at compile time. Examples of constant declarations are:
\par 
\par \tab N = 100
\par \tab limit = 2*'N - 1
\par \tab fullSet = \{MIN(SET)..MAX(SET)\}
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} Typedeclarations}${\footnote \pard\plain \s19\nowidctlpar 
\f5\fs20\lang1031 {\cs18\fs16\up6 $} Type declarations}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} Type declarations}}{\lang2057  Type declarations
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 A data type determines the set of values which variables of that type may assume, and the opera
tors that are applicable. A type declaration associates an identifier with a type. In the case of structured types (arrays and records) it also defines the structure of variables of this type.
\par }\pard\plain \s29\li567\sb120\nowidctlpar \f5\fs20\lang1031 {\lang2057 TypeDeclaration = IdentDef "=" Type.
\par }\pard\plain \s30\li567\sa120\nowidctlpar \f5\fs20\lang1031 {\lang2057 Type = Qualident | ArrayType | RecordType | PointerType | ProcedureType.
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 Examples:
\par \tab Table=ARRAY N OF REAL
\par \tab Tree=POINTER TO Node
\par \tab Node=RECORD
\par \tab \tab key:INTEGER;
\par \tab \tab left,right:Tree
\par \tab END
\par \tab Function=PROCEDURE(x:INTEGER):INTEGER
\par 
\par }\pard\plain \s23\sl288\slmult1\nowidctlpar \f5\fs20\lang1031 {\strike\lang2057 Basic types}{\v\lang2057 Basictypes}{\lang2057 
\par }{\strike\lang2057 Array types}{\v\lang2057 Arraytypes}{\lang2057 
\par }{\strike\lang2057 Record types}{\v\lang2057 Recordtypes}{\lang2057 
\par }{\strike\lang2057 Pointer types}{\v\lang2057 Pointertypes}{\lang2057 
\par }{\strike\lang2057 Procedure types}{\v\lang2057 Proceduretypes}{\lang2057 
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} Variabledeclarations}${\footnote \pard\plain \s19\nowidctlpar 
\f5\fs20\lang1031 {\cs18\fs16\up6 $} Variable declarations}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} Variable declarations}}{\lang2057  Variable declarations
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 Variable declarations introduce variables by defining an identifier and a data type for them.
\par }\pard\plain \s28\li567\sb120\sa120\nowidctlpar \f5\fs20\lang1031 {\lang2057 VariableDeclaration = IdentList ":" Type.
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 Record and pointer variables have both a }{\b\lang2057 static type}{\lang2057  (the type with which they are declared - simply called their type) and a }{\b\lang2057 dynamic type}{\lang2057 
 (the type they assume at run time). For pointers and variable parameters of record type the dynamic type may be an extension of their static type. The static type determines which fields of a record are accessible. The dynamic type is used to call }{
\strike\lang2057 type-bound procedures}{\v\lang2057 Typeboundprocedures}{\lang2057 .
\par 
\par Examples of variable declarations:
\par \tab i,j,k:INTEGER
\par \tab x,y:REAL
\par \tab p,q:BOOLEAN
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} Expressions}${\footnote \pard\plain \s19\nowidctlpar 
\f5\fs20\lang1031 {\cs18\fs16\up6 $} Expressions}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} Expressions}}{\lang2057  Expressions
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 Expressions are constructs denoting rules of computation whereby constants and current values of variables are combined to compute other values by the applicati
on of operators and function procedures. Expressions consist of operands and operators. Parentheses may be used to express specific associations of operators and operands.
\par 
\par }{\strike\lang2057 Operands}{\v\lang2057 Operands}{\lang2057 
\par }{\strike\lang2057 Operators}{\v\lang2057 Operators}{\lang2057 
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} Statements}${\footnote \pard\plain \s19\nowidctlpar 
\f5\fs20\lang1031 {\cs18\fs16\up6 $} Statements}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K}Statements}}{\lang2057  Statements
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 
Statements denote actions. There are elementary and structured statements. Elementary statements are not composed of any parts that are themselves statements. They are the assignment, the procedure call, the return, and the exit statement. Structure
d statements are composed of parts that are themselves statements. They are used to express sequencing and conditional, selective, and repetitive execution. A statement may also be empty, in which case it denotes no action. The empty statement is included
 in order to relax punctuation rules in statement sequences.
\par }\pard\plain \s28\li567\sb120\sa120\nowidctlpar \f5\fs20\lang1031 {\lang2057 
Statement = [Assignment | ProcedureCall | IfStatement | CaseStatement | WhileStatement | RepeatStatement | ForStatement | LoopStatement | WithStatement | EXIT | RETURN [Expression]].
\par }\pard\plain \s23\sl288\slmult1\nowidctlpar \f5\fs20\lang1031 {\strike\lang2057 Assignments}{\v\lang2057 Assignments}{\lang2057 
\par }{\strike\lang2057 Procedure calls}{\v\lang2057 Procedurecalls}{\lang2057 
\par }{\strike\lang2057 Statement sequences}{\v\lang2057 Statementsequences}{\lang2057 
\par }{\strike\lang2057 If statements}{\v\lang2057 Ifstatements}{\lang2057 
\par }{\strike\lang2057 Case statements}{\v\lang2057 Casestatements}{\lang2057 
\par }{\strike\lang2057 While statements}{\v\lang2057 Whilestatements}{\lang2057 
\par }{\strike\lang2057 Repeat statements}{\v\lang2057 Repeatstatements}{\lang2057 
\par }{\strike\lang2057 For statements}{\v\lang2057 Forstatements}{\lang2057 
\par }{\strike\lang2057 Loop statements}{\v\lang2057 Loopstatements}{\lang2057 
\par }{\strike\lang2057 Return and exit statements}{\v\lang2057 Returnandexit}{\lang2057 
\par }{\strike\lang2057 With statements}{\v\lang2057 Withstatements}{\lang2057 
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} Proceduredeclarations}${\footnote \pard\plain \s19\nowidctlpar 
\f5\fs20\lang1031 {\cs18\fs16\up6 $} Procedure declarations}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} Procedure declarations; PROCEDURE}}{\lang2057  Procedure declarations
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 A procedure declaration consists of a procedure heading and a procedure
 body. The heading specifies the procedure identifier and the formal parameters. For type-bound procedures it also specifies the receiver parameter. The body contains declarations and statements. The procedure identifier is repeated at the end of the proc
edure declaration.
\par There are two kinds of procedures: proper procedures and function procedures. The latter are activated by a function designator as a constituent of an expression and yield a result that is an operand of the expression. Proper procedures a
re activatec by a procedure call. A procedure is a function procedure it its formal parameters specify a result type. The body of a function procedure must contain a return statement which defines its result.
\par All constants, variables, types, and procedures declared within a preocedure body are local to the procedure. Since procedures may be declared as local objects too, procedure declarations may be nested. The call of a procedure within its declaration impli
es recursive activation.
\par In addition to its formal parameters and locally declared objects, the objects declared in the environment of the procedure are also visible in the procedure (with the exception of those objects that have the same name as an object declared locally).

\par }\pard\plain \s29\li567\sb120\nowidctlpar \f5\fs20\lang1031 {\lang2057 ProcedureDeclaration = ProcedureHeading ";" ProcedureBody ident.
\par }\pard\plain \s31\li567\nowidctlpar \f5\fs20\lang1031 {\lang2057 ProcedureHeading = PROCEDURE [Receiver] IdentDef [FormalParameters].
\par ProcedureBody = DeclarationSequence [BEGIN StatementSequence] END.
\par DeclarationSequence = \{CONST \{ConstantDeclaration ";"\} TYPE \{TypeDeclaration ";"\} | VAR \{VariableDeclaration ";"\}\} \{ProcedureDeclaration ";" | ForwardDeclaration ";"\}.
\par }\pard\plain \s30\li567\sa120\nowidctlpar \f5\fs20\lang1031 {\lang2057 ForwardDeclaration = PROCEDURE "^" [Receiver] IdentDef [FormalParameters].
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 
If a procedure declaration specifies a receiver parameter, the procedure is considered to be bound to a type. A forward declaration serves to allow forward references to a procedure whose actual declaration appears later in the text. The formal parameter 
lists of the forward declaration and the actual declaration must match.
\par 
\par }\pard\plain \s23\sl288\slmult1\nowidctlpar \f5\fs20\lang1031 {\strike\lang2057 Formal parameters}{\v\lang2057 Formalparameters}{\lang2057 
\par }{\strike\lang2057 Predeclared procedures}{\v\lang2057 Predeclaredprocedures}{\lang2057 
\par }{\strike\lang2057 Type-bound procedures}{\v\lang2057 Typeboundprocedures}{\lang2057 
\par }\pard\plain \s22\sb72\sa120\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} Modules}${\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {
\cs18\fs16\up6 $} Modules}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} Modules; MODULE; IMPORT}}{\lang2057  Modules
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 
A module is a collection of declarations of constants, types, variables, and procedures, together with a sequence of statements for the purpose of assigning initial values to the variables. A module constitutes a text that is compilable as a unit.
\par }\pard\plain \s29\li567\sb120\nowidctlpar \f5\fs20\lang1031 {\lang2057 Module = MODULE ident ";" [ImportList] DeclarationSequence [BEGIN StatementSequence] END ident ".".
\par }\pard\plain \s31\li567\nowidctlpar \f5\fs20\lang1031 {\lang2057 ImportList = IMPORT Import \{ "," Import \} ";".
\par }\pard\plain \s30\li567\sa120\nowidctlpar \f5\fs20\lang1031 {\lang2057 Import = [ident ":="] ident.
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 
The import list specifies the names of the imported modules. If a module A is imported by a module M and A exports an identifier x, then x is referred to as A.x within M. If A is imported as B:=A, the object x is referenced as B.x. This allows short alias
 names in qualified identifiers. Identifiers that are to be exported (i.e. that are visible in client modules) must be marked by an export mark in their declaration.
\par The statement s
equence following the symbol BEGIN is executed when the module is added to a system (loaded), which is done after the imported modules have been loaded. It follows that cyclic import of modules is illegal. Individual (parameterless and exported) procedure
s can be activated from the system, and these procedures serve as commands}{\up6\lang2057 *}{\lang2057 .
\par 
\par 
\par 
\par }{\up6\lang2057 *}{\lang2057  These commands are a property of the Oberon System and are not available from the Windows environment. Building a Windows program, it is necessary to implement a WinMain Proce
dure which serves as the entry point of the program.
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} ThemoduleSYSTEM}${\footnote \pard\plain \s19\nowidctlpar 
\f5\fs20\lang1031 {\cs18\fs16\up6 $} The module SYSTEM}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} The module SYSTEM; SYSTEM; VAL; ROT; LSH; CC; BIT; ADR; GET; PUT; GETREG; PUTREG; MOVE; NEW}}{\lang2057  The module SYSTEM

\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 
The module SYSTEM contains certain types and procedures that are necessary to implement low-level operations particular to a given computer and/or implementation. These include for example facilities for accessing devices that are controlled by the comput
er, and facilities to break the type compatibilit
y rules otherwise imposed by the language definition. It is stringly recommended to restrict their use to specific modules (called low-level modules). Such modules are inherently non-portable, but easily recognized due to the identifier SYSTEM appearing i
n their import list. The following specifications hold for the implementation of Oberon-2 on the Ceres computer.
\par Module SYSTEM exports a type BYTE with the following characteristics: Variables of type CHAR or SHORTINT can be assigned to variables of type BY
TE. If a formal variable parameter is of type ARRAY OF BYTE then the corresponding actual parameter may be of any type.
\par Another type exported by the module SYSTEM is the type PTR. Variables of any pointer type may be assigned to variables of type PTR. If a formal variable is of type PTR, the actual parameter may be of any pointer type.
\par The procedures contained in module SYSTEM are listed in the following tables. Most of them correspond to single instructions compiled as in-line code. For details, the reader
 is referred to the processor manual. v stands vor variable, x, y, a, and n for expressions, and T for a type.
\par 
\par }{\b\lang2057 Function procedures
\par }{\lang2057 
\par Name\tab \tab Argument types\tab Result type\tab Function
\par 
\par }{\b\lang2057 ADR}{\lang2057 (v)\tab \tab any\tab \tab LONGINT\tab address of variable v
\par }{\b\lang2057 BIT}{\lang2057 (a,n)\tab a:LONGINT\tab BOOLEAN\tab bit n of Mem[a]
\par \tab \tab n:integer
\par }{\b\lang2057 CC}{\lang2057 (n)\tab \tab integer constant\tab BOOLEAN\tab condition n
\par \tab \tab \tab \tab \tab \tab (0<=n<=15)
\par }{\b\lang2057 LSH}{\lang2057 (x,n)\tab x:integer,\tab type of x\tab logical shift
\par \tab \tab CHAR, BYTE
\par \tab \tab n:integer
\par }{\b\lang2057 ROT}{\lang2057 (x,n)\tab x:integer,\tab type of x\tab rotation
\par \tab \tab CHAR, BYTE
\par \tab \tab n:integer
\par }{\b\lang2057 VAL}{\lang2057 (T,x)\tab T,x:any type\tab T\tab \tab x interpreted
\par \tab \tab \tab \tab \tab \tab as of type T
\par 
\par 
\par }{\b\lang2057 Proper procedures
\par }{\lang2057 
\par Name\tab \tab Argument types\tab \tab Function
\par 
\par }{\b\lang2057 GET}{\lang2057 (a,v)\tab a:LONGINT; v any\tab v:=M[a]
\par \tab \tab basic type, pointer,
\par \tab \tab procedure type
\par }{\b\lang2057 PUT}{\lang2057 (a,x)\tab a:LONGINT; x any\tab M[a]:=x
\par \tab \tab basic type, pointer,
\par \tab \tab procedure type
\par }{\b\lang2057 GETREG}{\lang2057 (n,v)\tab n:integer constant;\tab v:=Register}{\dn6\lang2057 n}{\lang2057 
\par \tab \tab v any basic type, pointer,
\par \tab \tab procedure type
\par }{\b\lang2057 PUTREG}{\lang2057 (n,x)\tab n:integer constant;\tab Register}{\dn6\lang2057 n:}{\lang2057 =x
\par \tab \tab x any basic type, pointer,
\par \tab \tab procedure type
\par }{\b\lang2057 MOVE}{\lang2057 (a}{\dn6\lang2057 0}{\lang2057 ,a}{\dn6\lang2057 1}{\lang2057 ,n)\tab a}{\dn6\lang2057 0}{\lang2057 ,a}{\dn6\lang2057 1}{\lang2057 :LONGINT;\tab M[a}{\dn6\lang2057 1}{\lang2057 ..a}{\dn6\lang2057 1}{\lang2057 +n-1]:=
\par \tab \tab n:integer\tab \tab M[a}{\dn6\lang2057 0}{\lang2057 ..a}{\dn6\lang2057 0}{\lang2057 +n-1]
\par }{\b\lang2057 NEW}{\lang2057 (v,n)\tab v: any pointer; n:integer\tab allocate storage block
\par \tab \tab \tab \tab \tab of n bytes; assign
\par \tab \tab \tab \tab \tab its address to v
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} Predeclaredprocedures}${\footnote \pard\plain \s19\nowidctlpar 
\f5\fs20\lang1031 {\cs18\fs16\up6 K}{\fs16\up6 $} Predeclared procedures}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} Predeclared procedures}}{\lang2057  Predeclared procedures
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 The following table list the predeclared procedures. Some are generic procedures, i.e. they apply to several types of operands. v stands for a variable, x and n for expressions, and T for a type.

\par 
\par 
\par Function procedures
\par 
\par }\pard\plain \s23\sl288\slmult1\nowidctlpar \f5\fs20\lang1031 {\strike\lang2057 \tab ABS}{\v\lang2057 ABS}{\strike\lang2057 \tab ASH}{\v\lang2057 ASH}{\strike\lang2057 \tab CAP}{\v\lang2057 CAP}{\strike\lang2057 
\par \tab CHR}{\v\lang2057 CHR}{\strike\lang2057 \tab ENTIER}{\v\lang2057 ENTIER}{\strike\lang2057 \tab LEN}{\v\lang2057 LEN}{\strike\lang2057 
\par \tab LONG}{\v\lang2057 LONG}{\strike\lang2057 \tab MAX}{\v\lang2057 MAX}{\strike\lang2057 \tab MIN}{\v\lang2057 MIN}{\strike\lang2057 
\par \tab ODD}{\v\lang2057 ODD}{\strike\lang2057 \tab ORD}{\v\lang2057 ORD}{\strike\lang2057 \tab SHORT}{\v\lang2057 SHORT}{\strike\lang2057 
\par \tab SIZE}{\v\lang2057 SIZE}{\strike\lang2057 
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 
\par 
\par Proper procedures
\par 
\par }\pard\plain \s23\sl288\slmult1\nowidctlpar \f5\fs20\lang1031 {\lang2057 \tab }{\strike\lang2057 COPY}{\v\lang2057 COPY}{\lang2057 \tab }{\strike\lang2057 DEC}{\v\lang2057 DEC}{\lang2057 \tab }{\strike\lang2057 EXCL}{\v\lang2057 EXCL}{\lang2057 
\par \tab }{\strike\lang2057 HALT}{\v\lang2057 HALT}{\lang2057 \tab }{\strike\lang2057 INC}{\v\lang2057 INC}{\lang2057 \tab }{\strike\lang2057 INCL}{\v\lang2057 INCL}{\lang2057 
\par \tab }{\strike\lang2057 NEW}{\v\lang2057 NEW}{\lang2057 \tab }{\strike\lang2057 ASSERT}{\v\lang2057 ASSERT}{\lang2057 
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} Basictypes}${\footnote \pard\plain \s19\nowidctlpar 
\f5\fs20\lang1031 {\cs18\fs16\up6 $} Basic types}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} Basic types; BOOLEAN; CHAR; SHORTINT; INTEGER; LONGINT; REAL; LONGREAL; SET}}{\lang2057  Basic types
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 The basic types are denoted by predeclared identifiers. The }{\strike\lang2057 associated operators}{\v\lang2057 Operators}{\lang2057  and the }{\strike\lang2057 predeclared function procedures}{
\v\lang2057 Predeclaredprocedures}{\lang2057  are described in the corresponding chapters. The values of the given basic types are the following:
\par 
\par 1. }{\b\lang2057 BOOLEAN}{\lang2057 \tab the truth values TRUE and FALSE
\par 2. }{\b\lang2057 CHAR}{\lang2057 \tab the characters of the extended ASCII set (0X..0FFX
\par 3. }{\b\lang2057 SHORTINT}{\lang2057 \tab the integers between MIN(SHORTINT) and MAX(SHORTINT)
\par 4. }{\b\lang2057 INTEGER}{\lang2057 \tab the integers between MIN(INTEGER) and MAX(INTEGER)
\par 5. }{\b\lang2057 LONGINT}{\lang2057 \tab the integers between MIN(LONGINT) and MAX(LONGINT)
\par 6. }{\b\lang2057 REAL}{\lang2057 \tab the real numbers between MIN(REAL) and MAX(REAL)
\par 7. }{\b\lang2057 LONGREAL}{\lang2057 \tab the real numbers between MIN(LONGREAL) and MAX(LONGREAL)
\par 8. }{\b\lang2057 SET}{\lang2057 \tab \tab the sets of integers between 0 and MAX(SET)
\par 
\par Types 3 to 5 are integer types, types 6 and 7 are real types, and together they are called numeric types. They form a hierarchy; the larger type includes (the values of) the smaller type.
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} Arraytypes}${\footnote \pard\plain \s19\nowidctlpar 
\f5\fs20\lang1031 {\cs18\fs16\up6 $} Array types}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} Array types; ARRAY}}{\lang2057  Array types
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 
An array is a structure consisting of a number of elements which are all of the same type, called the element type. The number of elements in an array is called length. The elements of the array are designated by indices, which are integers between 0 and 
the length minus 1.
\par }\pard\plain \s29\li567\sb120\nowidctlpar \f5\fs20\lang1031 {\lang2057 ArrayType = ARRAY [Length \{"," Length\}] OF TYPE.
\par }\pard\plain \s30\li567\sa120\nowidctlpar \f5\fs20\lang1031 {\lang2057 Length = ConstExpression
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 A type of the form
\par }\pard\plain \s28\li567\sb120\sa120\nowidctlpar \f5\fs20\lang1031 {\lang2057 ARRAY L}{\dn6\lang2057 0}{\lang2057 , L}{\dn6\lang2057 1}{\lang2057 , ..., L}{\dn6\lang2057 n}{\lang2057  OF T
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 is understood as an abbreviation of
\par }\pard\plain \s29\li567\sb120\nowidctlpar \f5\fs20\lang1031 {\lang2057 ARRAY L}{\dn6\lang2057 0}{\lang2057  OF
\par }\pard\plain \s31\li567\nowidctlpar \f5\fs20\lang1031 {\lang2057   ARRAY L}{\dn6\lang2057 1}{\lang2057  OF
\par     ...
\par }\pard\plain \s30\li567\sa120\nowidctlpar \f5\fs20\lang1031 {\lang2057       ARRAY L}{\dn6\lang2057 n}{\lang2057  OF T
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 Arrays declared without length are called open arrays. They are restricted to pointer base types, element types of open array types, and formal parameter types.
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} Recordtypes}${\footnote \pard\plain \s19\nowidctlpar 
\f5\fs20\lang1031 {\cs18\fs16\up6 $} Record types}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} Record types; RECORD}}{\lang2057  Record types
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 
A record type is a structure consisting of a fixed number of elements, called fields, with possibly different types. The record type declaration specifies the name and type of each field. The scope of the field identifiers extends from the point of their 
declaration to the end of the record type, but they are also visible within designators referring to elements of record variables. If a record type is exported, field identifiers that are to be visible outside the declaring module must be marked. They are
 called public fields; unmarked elements are called private fields.
\par }\pard\plain \s29\li567\sb120\nowidctlpar \f5\fs20\lang1031 {\lang2057 RecordType=RECORD ["("BaseType")"] FieldList \{ ";" FieldList\} END.
\par }\pard\plain \s31\li567\nowidctlpar \f5\fs20\lang1031 {\lang2057 BaseType = Qualident.
\par }\pard\plain \s30\li567\sa120\nowidctlpar \f5\fs20\lang1031 {\lang2057 FieldList = [IdentList ":" Type].
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 Record types are extensible, i. e. a record type can be declared as an extension of another record type. In the example
\par \tab T0 = RECORD x:INTEGER END
\par \tab T1 = RECORD (T0) y:REAL END
\par T1 is a (direct) extension of T0 and T0 is the (direct) base type of T1. An extended type T1 consists of the fields of its base type and of the fie
lds which are declared in T1. Identifiers declared in the extension must be different from the identifiers declared in its base type(s).
\par 
\par Examples of record type declarations:
\par 
\par \tab RECORD
\par \tab \tab day,month,year:INTEGER
\par \tab END
\par 
\par \tab RECORD
\par \tab \tab name,firstname:ARRAY 32 OF CHAR;
\par \tab \tab age:INTEGER;
\par \tab \tab salary:REAL
\par \tab END
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} Pointertypes}${\footnote \pard\plain \s19\nowidctlpar 
\f5\fs20\lang1031 {\cs18\fs16\up6 $} Pointer types}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} Pointer types; POINTER}}{\lang2057  Pointer types
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 Variables of a pointer type P assume as values pointers to variables of some type T. T is called the pointer base type of P and must be a record
 or array type. Pointer types inherit the extension relation of their pointer base types: if a type T1 is an extension of T, and P1 is of type POINTER TO T1, then p1 is also an extension of P.
\par }\pard\plain \s28\li567\sb120\sa120\nowidctlpar \f5\fs20\lang1031 {\lang2057 PointerType = POINTER TO Type.
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 
If p is a variable of type P = POINTER TO T, a call of the predeclared procedure NEW(p) allocates a variable of type T in free storage. If T is a record type or an array type with fixed length, the allocation has to be done with NEW(p); if T is an n-dimen
sional open array the allocation has to be done with NEW(p,e}{\dn6\lang2057 0}{\lang2057 ,....e}{\dn6\lang2057 n-1}{\lang2057 ) where T is allocated with lengths given by the expression e}{\dn6\lang2057 0}{\lang2057 ,....,e}{\dn6\lang2057 n-1}{\lang2057 
. In eitherr case a pointer to the allocated varaible is assigned to p. p is of type P. The referenced variable p^ (pronounced as p-referenced) is of type T.
\par Any pointer variable may assume the value NIL, which points to no variable at all.
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} Proceduretypes}${\footnote \pard\plain \s19\nowidctlpar 
\f5\fs20\lang1031 {\cs18\fs16\up6 $} Procedure types}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} Procedure types; PROCEDURE}}{\lang2057  Procedure types
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 Variables of a procedure type T have a procedure (or NIL) as value. If a proc
edure P is assigned to a variable of type T, the formal parameter lists of P and T must match. P must not be a predeclared or type-bound procedure nor may it be local to another procedure.
\par }\pard\plain \s28\li567\sb120\sa120\nowidctlpar \f5\fs20\lang1031 {\lang2057 ProcedureType = PROCEDURE [FormalParameters].
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} Operands}${\footnote \pard\plain \s19\nowidctlpar 
\f5\fs20\lang1031 {\cs18\fs16\up6 $} Operands}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} Operands; Type guard}}{\lang2057  Operands
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 
With the exception of set constructors and literal constants (numbers, character constants, or strings), operands are denoted by designators. A designator consists of an identifier referring to a constant, variable, or
 procedure. This identifier may possibly be qualified by a module identifier and may be followed by selectors if the designated object is an element of a structure.
\par }\pard\plain \s29\li567\sb120\nowidctlpar \f5\fs20\lang1031 {\lang2057 Designator = Qualident \{ "." ident | "[" ExpressionList "]" | "^" | "(" Qualident ")" \}.
\par }\pard\plain \s30\li567\sa120\nowidctlpar \f5\fs20\lang1031 {\lang2057 ExpressionList = Expression \{ "," Expression \}.
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 If a designates an array, then a[e] denotes that element of a whose index is the current value of the expression e. The type of e must be an integer type. A designator of the form a[e}{
\dn6\lang2057 0}{\lang2057 ,e}{\dn6\lang2057 1}{\lang2057 ,...,e}{\dn6\lang2057 n}{\lang2057 ]  stands for a[e}{\dn6\lang2057 0}{\lang2057 ][e}{\dn6\lang2057 1}{\lang2057 ]...[e}{\dn6\lang2057 n}{\lang2057 
]. If r designates a record, then r.f denotes the field f of r or the procedure f bound to the dynamic type of r. If p designates a pointer, p^ denotes the variable which is referenced by p. The designators p^.f and p^[e] may be abbreviated as p.f and p[e
], i.e. record and array selectors imply dereferencing. If a or r are readn-only, then also a[e] and r.f are read-only.
\par A }{\b\lang2057 type guard}{\lang2057  v(T) asserts that the dynamic type of v is T (or an extension of T), i.e. program execution is aborted, if the 
dynamic type of v is not T (or an extension of T). Within the designator, v is then regarded as having the static type T. The guard is applicable, if
\par 1. v is a variable parameter of record type or v is a pointer, and if
\par 2. T is an extension of the static type of v.
\par 
\par If the designated object is a constant or a variable, then the designator refers to its current value. If it is a procedure, the designator refers to that procedure unless it is followed by a (possibly empty) parameter list in which case it impl
ies an activation of that procedure and stands for the value resulting from its execution. The actual parameters must correspond to the formal parameters as in proper procedure calls.
\par 
\par Examples of designators:
\par \tab i\tab \tab \tab (INTEGER)
\par \tab a[i]\tab \tab \tab (REAL)
\par \tab w[3].name[i]\tab \tab (CHAR)
\par \tab t.left.right\tab \tab (Tree)
\par \tab t(CenterNode).subnode\tab (Tree)
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} Operators}${\footnote \pard\plain \s19\nowidctlpar 
\f5\fs20\lang1031 {\cs18\fs16\up6 $} Operators}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} Operators; OR; DIV; MOD; IS; IN}}{\lang2057  Operators
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 
Four classes of operators with different precedences (binding strengths) are syntactically distinguished in expressions. The operator ~ has the highest precedence, followed by multiplication operators, addition operators, and relations. Operators of the s
ame precedence associate from left to right. For example, x-y-z stands for (x-y)-z.
\par 
\par Expression \tab = SimpleExpression [Relation SimpleExpression].
\par SimpleExpression\tab = ["+" | "-"] Term \{AddOperator Term\}.
\par Term \tab = Factor \{MulOperator Factor\}.
\par Factor \tab = Designator [ActualParameters] | 
\par \tab     number | character | string | NIL | Set | "(" Expression ")" | "~" Factor.
\par Set \tab = "\{" [Element \{"," Element\}] "\}".
\par Element \tab = Expression [".." Expression].
\par ActualParameters \tab = "(" [ExpressionList] ")".
\par Relation \tab = "=" | "#" | "<" | "<=" | ">" | ">=" | IN | IS.
\par AddOperator \tab = "+" | "-" | OR.
\par MulOperator \tab = "*" | "/" | DIV | MOD | "&".
\par 
\par The available operators are listed in the following tables. Some operators are applicable to operands of various types, denoting different operati
ons. In these cases, the actual operation is identified by the type of the operands. The operands must be expression compatible with respect to the operator (see App.A).
\par 
\par }{\b\lang2057 Logical operators
\par }{\lang2057 
\par OR\tab logical disjunction \tab p OR q\tab   "if p then TRUE, else q"
\par &\tab logical conjunction \tab p & q\tab   "if p then q, else FALSE"
\par ~\tab negation \tab ~ p\tab   "not p"
\par 
\par These operators apply to BOOLEAN operands and yield a BOOLEAN result.
\par 
\par }{\b\lang2057 Arithmetic operators
\par }{\lang2057 
\par +\tab sum
\par -\tab difference
\par *\tab product
\par /\tab real quotient
\par DIV\tab integer quotient
\par MOD\tab modulus
\par 
\par The oper
ators +, -, *, and / apply to operands of numeric types. The type of the result is the type of that operand which includes the type of the other operand, except for division (/), where the result is the smallest real type which includes both operand types
. When used as monadic operators, - denotes sign inversion and + denotes the identity operation. The operators DIV and MOD apply to integer operands only. They are related by the following formulas defined for any x and positive divisors y:
\par 
\par x = (x DIV y) * y + (x MOD y)
\par 0 <= (x MOD y) < y
\par 
\par Examples:
\par x\tab y\tab x DIV y\tab x MOD y
\par 5\tab 3\tab 1\tab 2
\par -5\tab 3\tab -2\tab 1
\par 
\par }{\b\lang2057 Set Operators
\par }{\lang2057 
\par +\tab union
\par -\tab difference (x - y = x * (-y))
\par *\tab intersection
\par /\tab symmetric set difference (x / y = (x-y) + (y-x))
\par 
\par Set operators apply to operands of type SET and yield a result of type SET. The monadic minus sign denotes the complement of x, i.e. -x denotes the set of integers between 0 and MAX(SET) which are not elements of x.
\par A set constructor defines the value of a set by listing its elements between curly brackets. The elements must be integers in the range 0..MAX(SET). A range a..b denotes all integers in the interval [a, b].
\par 
\par }{\b\lang2057 Relations
\par }{\lang2057 
\par =\tab equal
\par #\tab unequal
\par <\tab less
\par <=\tab less or equal
\par >\tab greater
\par >=\tab greater or equal
\par IN\tab set membership
\par IS\tab type test
\par 
\par Relations yield a BOOLEAN result. The relations =, #, <, <=, >, and >= apply to the numeric types, CHAR, (open) character arrays, and strings. The relations = and # also apply to BOOLEAN an
d SET, as well as to pointer and procedure types (including the value NIL). x IN s stands for "x is an element of s". x must be of an integer type, and s of type SET. v IS T stands for "the dynamic type of v is T (or an extension of T)" and is called a ty
pe test. It is applicable if
\par 
\par 1.  v is a variable parameter of record type or v is a pointer, and if
\par 2.  T is an extension of the static type of v
\par 
\par Examples of expressions (refer to examples in Ch.7):
\par 
\par 1991\tab INTEGER
\par i DIV 3\tab INTEGER
\par ~p OR q\tab BOOLEAN
\par (i+j) * (i-j)\tab INTEGER
\par s - \{8, 9, 13\}\tab SET
\par i + x\tab REAL
\par a[i+j] * a[i-j]\tab REAL
\par (0<=i) & (i<100)\tab BOOLEAN
\par t.key = 0\tab BOOLEAN
\par k IN \{i..j-1\}\tab BOOLEAN
\par w[i].name <= "John"\tab BOOLEAN
\par t IS CenterTree\tab BOOLEAN
\par 
\par 
\par 
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} Assignments}${\footnote \pard\plain \s19\nowidctlpar 
\f5\fs20\lang1031 {\cs18\fs16\up6 $} Assignments}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} Assignments}}{\lang2057  Assignments
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 
\par Assignments replace the current value of a variable by a new value specified by an expression. The expression must be assignment compatible with the variable (see App. A). The assignment operator is written as ":=" and pronounced as becomes.
\par 
\par \tab Assignment = Designator ":=" Expression.
\par 
\par If an expression e of type Te is assigned to a variable v of type Tv, the following happens:
\par 
\par \tab 1.  if Tv and Te are record types, only those fields of Te are assigned which also belong to Tv (projection); the dynamic 
\par \tab \tab type of v  must be the same as the static type of v and  is not changed by the assignment;
\par \tab 2.  if Tv and Te are pointer types, the dynamic type of v becomes the dynamic type of e;
\par \tab 3.  if Tv is ARRAY n OF CHAR and e is a string of length m<n, v[i] becomes ei for i = 0..m-1 and v[m] becomes 0X.
\par 
\par Examples of assignments (refer to examples in Ch.7):
\par 
\par i := 0
\par p := i = j
\par x := i + 1
\par k := log2(i+j)
\par F := log2\tab \tab (* see 10.1 *)
\par s := \{2, 3, 5, 7, 11, 13\}
\par a[i] := (x+y) * (x-y)
\par t.key := i
\par w[i+1].name := "John"
\par t := c
\par 
\par 
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} Procedurecalls}${\footnote \pard\plain \s19\nowidctlpar 
\f5\fs20\lang1031 {\cs18\fs16\up6 $} Procedure calls}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} Procedure calls}}{\lang2057  Procedure calls
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 
\par A procedure call activates a procedure. It may contain a list of actual parameters which replace the corresponding formal parameters defined in the }{\strike\lang2057 procedure declaration}{\v\lang2057 Proceduredeclarations}{\lang2057 
. The correspondence is established by the positions of the parameters in the actual and formal parameter lists. There are two kinds of parameters: variable and value parameters.
\par \tab 
If a formal parameter is a variable parameter, the corresponding actual parameter must be a designator denoting a variable. If it denotes an element of a structured variable, the component selectors are evaluated when the formal/actual parameter substitu
tion takes place, i.e. before the execution of the procedure. If
 a formal parameter is a value parameter, the corresponding actual parameter must be an expression. This expression is evaluated before the procedure activation, and the resulting value is assigned to the }{\strike\lang2057 formal parameter}{\v\lang2057 
Formalparameters}{\lang2057 .
\par 
\par }\pard\plain \s28\li567\sb120\sa120\nowidctlpar \f5\fs20\lang1031 {\lang2057 \tab ProcedureCall = Designator [ActualParameters].
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 
\par Examples:
\par 
\par WriteInt(i*2+1)
\par INC(w[k].count)
\par t.Insert("John")
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} Statementsequences}}{\lang2057  Statement sequences
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 Statement sequences denote the sequence of actions specified by the component statements which are spearated by semicolons.
\par }\pard\plain \s28\li567\sb120\sa120\nowidctlpar \f5\fs20\lang1031 {\lang2057 StatementSequence  = Statement \{ ";" Statement\}.
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} Ifstatements}${\footnote \pard\plain \s19\nowidctlpar 
\f5\fs20\lang1031 {\cs18\fs16\up6 $} If statements}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} IF}}{\lang2057  If statements
\par }\pard\plain \s28\li567\sb120\sa120\nowidctlpar \f5\fs20\lang1031 {\lang2057 IfStatement = IF Expression THEN StatementSequence \{ ELSIF Expression THEN StatementSequence \} [ELSE StatementSequence] END.
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 If statements specify the conditional execution of guarded statement sequences. The Boolean expression preceding a statement sequence is called its guard. The 
guards are evaluated in sequence of occurrence, until one evaluates to TRUE, whereafter its associated statement sequence is executed. If no guard is satisfied, the statement sequence following the symbol ELSE is executed, if there is one.
\par 
\par Example:
\par \tab IF (ch>="A") & (ch<="Z") THEN ReadIdentifier
\par \tab ELSIF (ch>="0") & (ch<="9") THEN ReadNumber
\par \tab ELSIF (ch="'") OR (ch='"') THEN ReadString
\par \tab ELSE SpecialCharacter
\par \tab END
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} Casestatements}${\footnote \pard\plain \s19\nowidctlpar 
\f5\fs20\lang1031 {\cs18\fs16\up6 $} Case statements}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} CASE}}{\lang2057  Case statements
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 
Case statements specify the selection and execution of a statement sequence according to the value of an expression. First the case expression is evaluated, then that statement sequence is executed whose case label list contains the obtained value. The ca
se expression must either be of an integer type that includes the types of all case labels, or both the case expression and the case labels must be of type CHAR. Case labels are constants, and no value must occur more than once. If the value of the expres
sion does not occur as a label of any case, the statement sequence following the symbol ELSE is selected, if there is one, otherwise the program is aborted.
\par 
\par }\pard\plain \s29\li567\sb120\nowidctlpar \f5\fs20\lang1031 {\lang2057 CaseStatement \tab = CASE Expression OF Case \{"|" Case\} [ELSE StatementSequence] END.
\par }\pard\plain \s31\li567\nowidctlpar \f5\fs20\lang1031 {\lang2057 Case \tab = [CaseLabelList ":" StatementSequence].
\par CaseLabelList \tab = CaseLabels \{"," CaseLabels\}.
\par }\pard\plain \s30\li567\sa120\nowidctlpar \f5\fs20\lang1031 {\lang2057 CaseLabels \tab = ConstExpression [".." ConstExpression].
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 
\par Example:
\par 
\par CASE ch OF
\par \tab "A" .. "Z": ReadIdentifier 
\par |\tab "0" .. "9": ReadNumber 
\par |\tab " ' ", ' " ': ReadString
\par ELSE SpecialCharacter
\par END
\par 
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} Whilestatements}${\footnote \pard\plain \s19\nowidctlpar 
\f5\fs20\lang1031 {\cs18\fs16\up6 $} While statements}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} WHILE}}{\lang2057  While statements
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 While statements specify the repeated execution of a statement sequence while the Boolean expression (its guard) yields TRUE. The guard is checked before every execution of the statement sequence.

\par 
\par }\pard\plain \s28\li567\sb120\sa120\nowidctlpar \f5\fs20\lang1031 {\lang2057 \tab WhileStatement = WHILE Expression DO StatementSequence END.
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 
\par Examples:
\par WHILE i > 0 DO i := i DIV 2; k := k + 1 END
\par WHILE (t # NIL) & (t.key # i) DO t := t.left END
\par 
\par 
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} Repeatstatements}${\footnote \pard\plain \s19\nowidctlpar 
\f5\fs20\lang1031 {\cs18\fs16\up6 $} Repeat statements}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} REPEAT}}{\lang2057  Repeat statements
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 A repeat statement specifies the repeated execution of a statement sequence until a condition specified by a Boolean expression is satisfied. The statement sequence is executed at least once.

\par 
\par \tab RepeatStatement = REPEAT StatementSequence UNTIL Expression.
\par 
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} Forstatements}${\footnote \pard\plain \s19\nowidctlpar 
\f5\fs20\lang1031 {\cs18\fs16\up6 $} For statements}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} FOR}}{\lang2057  For statements
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 
A for statement specifies the repeated execution of a statement sequence for a fixed number of times while a progression of values is assigned to an integer variable called the control variable of the for statement.
\par 
\par }\pard\plain \s28\li567\sb120\sa120\nowidctlpar \f5\fs20\lang1031 {\lang2057 \tab ForStatement = FOR ident ":=" Expression TO Expression [BY ConstExpression] DO StatementSequence END.
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 
\par The statement
\par 
\par \tab FOR v := low TO high BY step DO statements END
\par 
\par is equivalent to
\par 
\par v := low; temp := high;
\par IF step > 0 THEN
\par \tab WHILE v <= temp DO statements; v := v + step END
\par ELSE
\par \tab WHILE v >= temp DO statements; v := v + step END
\par END
\par 
\par low must be assignment compatible with v (see App. A), high must be expression compatible (i.e. comparable) with v, and step must be a nonzero constant expression of an integer type. If step is not specified, it is assumed to be 1.
\par 
\par Examples:
\par FOR i := 0 TO 79 DO k := k + a[i] END
\par FOR i := 79 TO 1 BY -1 DO a[i] := a[i-1] END
\par 
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} Loopstatements}${\footnote \pard\plain \s19\nowidctlpar 
\f5\fs20\lang1031 {\cs18\fs16\up6 $} Loop statements}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} LOOP; EXIT}}{\lang2057  Loop statements
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 A loop statement specifies the repeated execution of a statement sequence. It is terminated upon execution of an exit statement within that sequence.
\par 
\par }\pard\plain \s28\li567\sb120\sa120\nowidctlpar \f5\fs20\lang1031 {\lang2057 \tab LoopStatement = LOOP StatementSequence END.
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 
\par Example:
\par LOOP
\par \tab ReadInt(i);
\par \tab IF i < 0 THEN EXIT END;
\par \tab WriteInt(i)
\par END
\par 
\par Loop statements are useful to express repetitions with several exit points or cases where the exit condition is in the middle of the repeated statement sequence.
\par 
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} Returnandexit}${\footnote \pard\plain \s19\nowidctlpar 
\f5\fs20\lang1031 {\cs18\fs16\up6 $} Return and exit statements}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} RETURN; EXIT}}{\lang2057  Return and exit statements
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 
A return statement indicates the termination of a procedure. It is denoted by the symbol RETURN, followed by an expression if the procedure is a function procedure. The type of the expression must be assignment compatible with the result type specified in
 the procedure heading.
\par \tab 
Function procedures require the presence of a return statement indicating the result value. In proper procedures, a return statement is implied by the end of the procedure body. Any explicit return statement therefore appears as an additional (probably e
xceptional) termination point.
\par \tab An exit statement is denoted by the symbol EXIT. It specifies termination of the enclosing loop statement and continuation with the statement following that loop statement. Exit statements are contextual
ly, although not syntactically associated with the loop statement which contains them.
\par 
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} Withstatements}${\footnote \pard\plain \s19\nowidctlpar 
\f5\fs20\lang1031 {\cs18\fs16\up6 $} With statements}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} WITH}}{\lang2057  With statements
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 With statements execute a statement sequence depending on the result of a type test and apply a type guard to every occurrence of the tested variable within this statement sequence.
\par 
\par }\pard\plain \s29\li567\sb120\nowidctlpar \f5\fs20\lang1031 {\lang2057 WithStatement \tab = WITH Guard DO StatementSequence \{"|" Guard DO StatementSequence\}
\par }\pard\plain \s31\li567\nowidctlpar \f5\fs20\lang1031 {\lang2057 \tab \tab [ELSE StatementSequence] END.
\par }\pard\plain \s30\li567\sa120\nowidctlpar \f5\fs20\lang1031 {\lang2057 Guard\tab = Qualident ":" Qualident.
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 
\par If v is a variable parameter of record type or a pointer variable, and if it is of a static type T0, the statement
\par 
\par \tab WITH v: T1 DO S1 | v: T2 DO S2 ELSE S3 END
\par 
\par has the following meaning: if the dynamic type of v is T1, then the statement sequence S1 is executed where v is regarded as if it had the static type T1; else if the dynamic type of v is T2, then S2 is executed where v is regarded as if it had the static
 type T2; else S3 is executed. T1 and T2 must be extensions of T0. If no type test is satisfied and if an else clause is missing the program is aborted.
\par 
\par Example:
\par \tab WITH t: CenterTree DO i := t.width; c := t.subnode END
\par 
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} Formalparameters}${\footnote \pard\plain \s19\nowidctlpar 
\f5\fs20\lang1031 {\cs18\fs16\up6 $} Formal parameters}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} Formal parameters}}{\lang2057  Formal parameters
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 
Formal parameters are identifiers declared in the formal parameter list of a procedure. They correspond to actual parameters specified in the procedure call. The correspondence between formal and actual parameters is established when the procedure is call
ed. There are two kinds of parameters, value and va
riable parameters, indicated in the formal parameter list by the absence or presence of the keyword VAR. Value parameters are local variables to which the value of the corresponding actual parameter is assigned as an initial value. Variable parameters cor
respond to actual parameters that are variables, and they stand for these variables. The scope of a formal parameter extends from its declaration to the end of the procedure block in which it is declared. A function procedure without parameters must have 
an empty parameter list. It must be called by a function designator whose actual parameter list is empty too. The result type of a procedure can be neither a record nor an array.
\par 
\par }\pard\plain \s29\li567\sb120\nowidctlpar \f5\fs20\lang1031 {\lang2057 FormalParameters\tab = "(" [FPSection \{";" FPSection\}] ")" [":" Qualident].
\par }\pard\plain \s30\li567\sa120\nowidctlpar \f5\fs20\lang1031 {\lang2057 FPSection \tab = [VAR] ident \{"," ident\} ":" Type.
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 
\par Let Tf be the type of a formal parameter f (not an open array) and Ta the type of the corresponding actual parameter a. For variable parameters, Ta must be the same as Tf, or Tf must be a record type and Ta an exte
nsion of Tf. For value parameters, a must be assignment compatible with f (see App. A).
\par \tab If Tf is an open array , then a must be array compatible with f (see App. A). The lengths of f are taken from a.
\par 
\par Examples of procedure declarations:
\par 
\par PROCEDURE ReadInt(VAR x: INTEGER);
\par \tab VAR i: INTEGER; ch: CHAR;
\par BEGIN i := 0; Read(ch);
\par \tab WHILE ("0" <= ch) & (ch <= "9") DO
\par \tab \tab i := 10*i + (ORD(ch)-ORD("0")); Read(ch)
\par \tab END;
\par \tab x := i
\par END ReadInt
\par 
\par PROCEDURE WriteInt(x: INTEGER); (*0 <= x <100000*)
\par \tab VAR i: INTEGER; buf: ARRAY 5 OF INTEGER;
\par BEGIN i := 0;
\par \tab REPEAT buf[i] := x MOD 10; x := x DIV 10; INC(i) UNTIL x = 0;
\par \tab REPEAT DEC(i); Write(CHR(buf[i] + ORD("0"))) UNTIL i = 0
\par END WriteInt
\par 
\par PROCEDURE WriteString(s: ARRAY OF CHAR);
\par \tab VAR i: INTEGER;
\par BEGIN i := 0;
\par \tab WHILE (i < LEN(s)) & (s[i] # 0X) DO Write(s[i]); INC(i) END
\par END WriteString;
\par 
\par 
\par PROCEDURE log2(x: INTEGER): INTEGER;
\par \tab VAR y: INTEGER; (*assume x>0*)
\par BEGIN
\par \tab y := 0; WHILE x > 1 DO x := x DIV 2; INC(y) END;
\par \tab RETURN y
\par END log2
\par 
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 \page {\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} Typeboundprocedures}${\footnote \pard\plain \s19\nowidctlpar 
\f5\fs20\lang1031 {\cs18\fs16\up6 $} Type-bound procedures}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} Type-bound procedures}} Type-bound procedures
\par \pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 
Globally declared procedures may be associated with a record type declared in the same module. The procedures are said to be bound to the record type. The binding is expressed by the type of the receiver in the heading of a procedure declaration.  The rec
eiver may be either a variable parameter of record type T or a value parameter of type POINTER TO T (where T is a record type). The procedure is bound to the type T and is considered local to it.
\par 
\par }\pard\plain \s29\li567\sb120\nowidctlpar \f5\fs20\lang1031 {\lang2057 ProcedureHeading\tab = PROCEDURE [Receiver] IdentDef [FormalParameters].
\par }\pard\plain \s30\li567\sa120\nowidctlpar \f5\fs20\lang1031 {\lang2057 Receiver \tab = "(" [VAR] ident ":" ident ")".
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 
\par If a procedure P is bound to a type T0, it is implicitly also bound to any type T1 which is an extension of T0. However, a procedure P ' (with the same name as P) may be explicitly bound to T1 in which case it overrides the binding of P. P ' is considered
 a redefinition of P for T1. The formal parameters of P and P ' must match. If P and T1 are exported P ' must be exported too.
\par \tab If v is a designator and P is 
a type-bound procedure, then v.P denotes that procedure P which is bound to the dynamic type of v (dynamic binding). Note, that this may be a different procedure than the one bound to the static type of v. v is passed to P's receiver according to the para
meter passing rules.
\par \tab If r is a receiver parameter declared with type T, r.P^ denotes the (redefined) procedure P bound to the base type of T.
\par In a forward declaration of a type-bound procedure the receiver parameter must be of the same type as in the actual procedure declaration. The formal parameter lists of both declarations must match.
\par 
\par Examples:
\par 
\par PROCEDURE (t: Tree) Insert (node: Tree);
\par \tab VAR p, father: Tree;
\par BEGIN p := t;
\par \tab REPEAT father := p;
\par \tab \tab IF node.key = p.key THEN RETURN END;
\par \tab \tab IF node.key < p.key THEN p := p.left ELSE p := p.right END
\par \tab UNTIL p = NIL;
\par \tab IF node.key < father.key THEN father.left := node ELSE father.right := node END;
\par \tab node.left := NIL; node.right := NIL
\par END Insert;
\par 
\par PROCEDURE (t: CenterTree) Insert (node: Tree);  (*redefinition*)
\par BEGIN
\par \tab WriteInt(node(CenterTree).width);
\par \tab t.Insert^ (node)  (* calls the Insert procedure bound to Tree *)
\par END Insert;
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} ABS}${\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {
\cs18\fs16\up6 $} ABS}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} ABS}}{\lang2057  ABS
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 ABS(x)
\par 
\par Argument type: numeric type
\par 
\par Result type: type of x
\par 
\par Function
\par absolute value
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} ASH}${\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {
\cs18\fs16\up6 $} ASH}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} ASH}}{\lang2057  ASH
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 ASH(x,n)
\par 
\par Argument types: integer type
\par 
\par Result type: LONGINT
\par 
\par Function
\par arithmetic shift (x*2^n)
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} CAP}${\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {
\cs18\fs16\up6 $} CAP}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} CAP}}{\lang2057  CAP
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 CAP(x)
\par 
\par Argument type: CHAR
\par 
\par Result type: CHAR
\par 
\par Function
\par x is letter: corresponding capital letter
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} CHR}${\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {
\cs18\fs16\up6 $} CHR}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} CHR}}{\lang2057  CHR
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 CHR(x)
\par 
\par Argument type: integer type
\par 
\par Result type: CHAR
\par 
\par Function
\par character with ordinal number x
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} ENTIER}${\footnote \pard\plain \s19\nowidctlpar 
\f5\fs20\lang1031 {\cs18\fs16\up6 $} ENTIER}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} ENTIER}}{\lang2057  ENTIER
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 ENTIER(x)
\par 
\par Argument type: real type
\par 
\par Result type: LONGINT
\par 
\par Function
\par largest integer not greater than x
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} LEN}${\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {
\cs18\fs16\up6 $} LEN}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} LEN}}{\lang2057  LEN
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 LEN(v) or LEN(v,n)
\par 
\par Argument type: v:array, n:integer constant
\par 
\par Result type: LONGINT
\par 
\par Function
\par length of v in dimension n or length of v in dimension 0 if n is not given.
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} LONG}${\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 
{\cs18\fs16\up6 $} LONG}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} LONG}}{\lang2057  LONG
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 LONG(x)
\par 
\par Argument type: numeric type
\par 
\par Result type: next numeric type in type inclusion hierarchy
\par 
\par Function
\par identity
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} MAX}${\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {
\cs18\fs16\up6 $} MAX}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} MAX}}{\lang2057  MAX
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 MAX(T)
\par 
\par Argument type: T=basic type
\par Result type: T
\par Function: maximum value of type T
\par 
\par Argument type: T=SET
\par Result type: INTEGER
\par Function: maximum element of a set
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} MIN}${\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {
\cs18\fs16\up6 $} MIN}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} MIN}}{\lang2057  MIN
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 MIN(T)
\par 
\par Argument type: T=basic type
\par Result type: T
\par Function: minimum value of type T
\par 
\par Argument type: T=SET
\par Result type: INTEGER
\par Function: 0
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} ODD}${\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {
\cs18\fs16\up6 $} ODD}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} ODD}}{\lang2057  ODD
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 ODD(x)
\par 
\par Argument type: integer type
\par 
\par Result type: BOOLEAN
\par 
\par Function
\par x MOD 2 = 1
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} ORD}${\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {
\cs18\fs16\up6 $} ORD}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} ORD}}{\lang2057  ORD
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 ORD(x)
\par 
\par Argument type: CHAR
\par 
\par Result type: INTEGER
\par 
\par Function
\par ordinal number of x
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} SHORT}${\footnote \pard\plain \s19\nowidctlpar 
\f5\fs20\lang1031 {\cs18\fs16\up6 $} SHORT}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} SHORT}}{\lang2057  SHORT
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 SHORT(x)
\par 
\par Argument type: numeric type
\par 
\par Result type: previous type in type inclusion hierarchy
\par 
\par Function
\par identity
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} SIZE}${\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 
{\cs18\fs16\up6 $} SIZE}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} SIZE}}{\lang2057  SIZE
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 SIZE(T)
\par 
\par Argument type: any type
\par 
\par Result type: integer type
\par 
\par Function
\par number of bytes required by T
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} COPY}${\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 
{\cs18\fs16\up6 $} COPY}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} COPY}}{\lang2057  COPY
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 COPY(x,v)
\par 
\par Argument types: x,v:character array
\par 
\par Function
\par v:=x
\par COPY allows the assignment between (open) character arrays with different types. If necessary, the source is shortened to the target length minus one. The target is always terminated by the character 0X.
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} DEC}${\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {
\cs18\fs16\up6 $} DEC}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} DEC}}{\lang2057  DEC
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 DEC(x) or DEC(x,d)
\par 
\par Argument types: integer types
\par 
\par Function
\par x:=x-1 or x:=x-d
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} EXCL}${\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 
{\cs18\fs16\up6 $} EXCL}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} EXCL}}{\lang2057  EXCL
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 EXCL(v,x)
\par 
\par Argument types: v:SET, x:integer type
\par 
\par Function
\par v:=v-\{x\}
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} HALT}${\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 
{\cs18\fs16\up6 $} HALT}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} HALT}}{\lang2057  HALT
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 HALT(x)
\par 
\par Argument type: integer constant
\par 
\par Function
\par Terminate program execution.
\par The interpretation of x is left to the underlying system implementation. 
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} INC}${\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {
\cs18\fs16\up6 $} INC}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} INC}}{\lang2057  INC
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 INC(x) or INC(x,d)
\par 
\par Argument types: integer types
\par 
\par Function
\par x:=x+1 or x:=x+d
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} INCL}${\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 
{\cs18\fs16\up6 $} INCL}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} INCL}}{\lang2057  INCL
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 INCL(v,x)
\par 
\par Argument types: v:SET, x:integer type
\par 
\par Function
\par v:=v + \{x\}
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} NEW}${\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {
\cs18\fs16\up6 $} NEW}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} NEW}}{\lang2057  NEW
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 NEW(v)
\par 
\par Argument type: pointer to record or fixed array
\par 
\par Function
\par allocate v^
\par 
\par 
\par NEW(v,x0,...,xn)
\par 
\par Argument types: v: pointer to open array, xi:integer type
\par 
\par Function
\par allocate v^ with lengths x0..xn
\par 
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} ASSERT}${\footnote \pard\plain \s19\nowidctlpar 
\f5\fs20\lang1031 {\cs18\fs16\up6 $} ASSERT}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} ASSERT}}{\lang2057  ASSERT
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 ASSERT(x)
\par ASSERT(x,n)
\par 
\par Argument types: x: boolean expression, n:integer constant
\par 
\par Function
\par terminate program execution if not x.
\par 
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} OBERON2_EXTENSIONS}${\footnote \pard\plain \s19\nowidctlpar 
\f5\fs20\lang1031 {\cs18\fs16\up6 $} language extensions}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} language extensions}}{\lang2057  Information specific to the RA Oberon-2 Compiler
\par }\pard\plain \s26\sb240\sa180\nowidctlpar \b\f5\fs22\lang1031 Language Extensions
\par \pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 The following new keywords have been introduced:
\par }\pard\plain \s23\sl288\slmult1\nowidctlpar \f5\fs20\lang1031 {\strike DISPOSE}{\v key_DISPOSE}
\par {\strike [WINDOWS]}{\v key_WINDOWS}
\par {\strike DEFINITION}{\v key_DEFINITION}
\par \pard\plain \s26\sb240\sa180\nowidctlpar \b\f5\fs22\lang1031 Module System
\par \pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\strike\lang2057 Register numbers}{\v\lang2057 Register_numbers}{\lang2057 
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} Register_numbers}${\footnote \pard\plain \s19\nowidctlpar 
\f5\fs20\lang1031 {\cs18\fs16\up6 $} Register numbers}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} Register numbers}}{\lang2057  Register numbers
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 The register numbers in PUTREG and GETREG are encoded as:
\par 
\par EAX=0;
\par ECX=1;
\par EDX=2;
\par EBX=3;
\par ESP=4;:
\par EBP=5;
\par ESI=6;
\par EDI=7;
\par ES=8;
\par CS=9;
\par SS=10;
\par DS=11;
\par FS=12;
\par GS=13;
\par EIP=14;
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} key_{\lang2057 DEFINITION}}${\footnote \pard\plain 
\s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 $} {\lang2057 DEFINITION}}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} {\lang2057 DEFINITION}}}{\lang2057  DEFINITION
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 If instead of the keyword MODULE the word DEFINITION is used then only a symbol and a reduced object file is generated. In this case }{\b\lang2057 all }{\lang2057 
symbols declared in such a module will be exported. There are no statements in a definition module.
\par Definition modules are used to interface to the Windows API or to DLLs not created by the RA Oberon-2 Compiler. Have a look at the file WINDOWS.MOD for an example.
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} key_{\lang2057 DISPOSE}}${\footnote \pard\plain 
\s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 $} {\lang2057 DISPOSE}}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} {\lang2057 DISPOSE; GC; garbage collector}}}{\lang2057  DISPOSE
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 DISPOSE frees memory previously allocated with NEW.
\par When working with the garbage collector it is not necessary to call DISPOSE; however calling it in situations where memory can be disposed securely reduces the frequency of garbage collector runs and thus slightly increases performance.
\par It is also possible to create programs, which do not use the garbage collector. In this case all memory allocated with NEW has to be freed explicitly with DISPOSE.
\par 
\par Syntax: DISPOSE(pointer);
\par 
\par The garbage collector can be activated and deactivated in the linker options by selecting either a runtime system with or without the garbage collector.
\par 
\par 
\par Using the garbage collector might lead to problems in a special situation: when working with the Windows API, it is possible to allocate an object, transf
er a reference to the object to Windows (e.g. by calling Windows.SetWindowLong) and not keep a reference within the scope of the Oberon program at all. In this case the garbage collector will remove the object at its next run. To prevent this it is necess
ary to import the module RTSGC and explicitly lock and unlock the memory objects in question via calls to RTSGC.Lock(pointer) and RTSGC.Unlock(pointer).
\par }\pard\plain \s22\sb72\sa120\sl288\slmult1\keepn\nowidctlpar \f5\fs28\lang1031 {\lang2057 \page }{\cs18\fs16\up6 #{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 #} key_{\lang2057 WINDOWS}}${\footnote \pard\plain 
\s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 $} [WINDOWS]}K{\footnote \pard\plain \s19\nowidctlpar \f5\fs20\lang1031 {\cs18\fs16\up6 K} [WINDOWS]}}{\lang2057  [WINDOWS]
\par }\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 The keyword [WINDOWS] has been introduced to facilitate interfacing to the Windows API.
\par 
\par It can be applied as follows:
\par 
\par }\pard\plain \s26\sb240\sa180\nowidctlpar \b\f5\fs22\lang1031 Arrays
\par \pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 TYPE ... = ARRAY [WINDOWS] ...
\par There is no alignment between array elements or at the end of the array.
\par }\pard\plain \s26\sb240\sa180\nowidctlpar \b\f5\fs22\lang1031 Records
\par \pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 TYPE ... = RECORD [WINDOWS] ...
\par There is no alignment between the fields or at the end of the record.
\par }\pard\plain \s26\sb240\sa180\nowidctlpar \b\f5\fs22\lang1031 Procedures
\par \pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 PROCEDURE [WINDOWS] ....
\par The calling convention of the procedure complies with the calling convention for the Windows API.
\par }\pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 {\lang2057 \page }{\field{\*\fldinst {\lang2057  INCLUDETEXT \\\\\\\\ASERV_NT\\\\WorkGrp\\\\POW\\\\POW32\\\\SRC\\\\HELP\\\\_OB32\\\\OPAL.RTF \\c MSRTF }}{\fldrslt {\f4\fs24\super #{\footnote 
\pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 contents}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 contents}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super 
K}{\b\f4\fs24 contents}}}Contents
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 {\strike\cf4 module ColorPlane}{\v ColorPlane}
\par {\strike\cf4 module Display}{\v Display}
\par {\strike\cf4 module File}{\v File}
\par {\strike\cf4 module Float}{\v Float}
\par {\strike\cf4 module In}{\v In}
\par {\strike\cf4 module OOBase}{\v OOBase}
\par {\strike\cf4 module Out}{\v Out}
\par {\strike\cf4 module Param}{\v Param}
\par {\strike\cf4 module Print}{\v Print}
\par {\strike\cf4 module Process}{\v Process}
\par {\strike\cf4 module Strings}{\v Strings}
\par {\strike\cf4 module Utils}{\v Utils}
\par {\strike\cf4 module Volume}{\v Volume}
\par {\strike\cf4 module XYplane}{\v XYplane}
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 ColorPlane}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
module ColorPlane}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 ColorPlane}}}Module ColorPlane
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 This module provides easy to use simple color graphics.
\par All output operations represent their output in a drawing region with fixed resolution. This implementation provides an area of 800 x 650 pixel (horizontal by vertical).
\par The left bottom corner of the output area has the co-ordinate (0,0), the same as for the Cartesian system of co-ordinates.
\par The definition of colors is based upon a true-color model which defines the colors by their relative concentrations of red, green and blue. As not every system supports a true-color display the desired colors are mapped to the nearest available colors.

\par A cursor is used to indicate the position for input and output of text. It can be positioned by calling the relevant procedures and appears as a flashing mark on the screen.
\par \pard\plain \s46\sb180 \b\f5\lang1031 Constants
\par \pard\plain \s49\fi-2880\li2880\sb60 \f5\fs20\lang1031 draw\tab \tab \tab \tab 
\par erase\tab \tab \tab \tab 
\par DRAW\tab \tab \tab \tab required with the parameter {\b mode} to draw with the foreground color 
\par ERASE\tab \tab \tab required with the parameter {\b mode} to draw with the background color 
\par RESOLUTIONX\tab \tab \tab horizontal resolution of the drawing area 
\par RESOLUTIONY\tab \tab vertical resolution of the drawing area 
\par CURSUP\tab \tab \tab 
\par CURSDOWN\tab \tab \tab 
\par CURSLEFT\tab \tab \tab 
\par CURSRIGHT\tab \tab \tab 
\par INSERT\tab \tab \tab 
\par DELETE\tab \tab \tab 
\par HOME\tab \tab \tab \tab 
\par ENDKEY\tab \tab \tab 
\par PAGEUP\tab \tab \tab 
\par PAGEDOWN\tab \tab \tab 
\par F1\tab \tab \tab \tab 
\par F2\tab \tab \tab \tab 
\par F3\tab \tab \tab \tab 
\par F4\tab \tab \tab \tab 
\par F5\tab \tab \tab \tab 
\par F6\tab \tab \tab \tab 
\par F7\tab \tab \tab \tab 
\par F8\tab \tab \tab \tab 
\par F9\tab \tab \tab \tab 
\par F10\tab \tab \tab \tab 
\par F11\tab \tab \tab \tab 
\par F12\tab \tab \tab \tab 
\par F13\tab \tab \tab \tab 
\par F14\tab \tab \tab \tab 
\par F15\tab \tab \tab \tab 
\par F16\tab \tab \tab \tab 
\par F17\tab \tab \tab \tab 
\par F18\tab \tab \tab \tab 
\par F19\tab \tab \tab \tab 
\par F20\tab \tab \tab \tab 
\par F21\tab \tab \tab \tab 
\par F22\tab \tab \tab \tab 
\par F23\tab \tab \tab \tab 
\par F24\tab \tab \tab \tab 
\par ENTER\tab \tab \tab \tab 
\par ESC\tab \tab \tab \tab 
\par TAB\tab \tab \tab \tab 
\par BACKSPACE\tab \tab \tab 
\par INPUTINVALID\tab \tab \tab 
\par \pard\plain \s46\sb180 \b\f5\lang1031 Procedures
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 {\strike\cf4 Open}{\v ColorPlane_Open}
\par {\strike\cf4 Close}{\v ColorPlane_Close}
\par {\strike\cf4 SetScreenUpdate}{\v ColorPlane_SetScreenUpdate}
\par {\strike\cf4 Dot}{\v ColorPlane_Dot}
\par {\strike\cf4 Line}{\v ColorPlane_Line}
\par {\strike\cf4 Bar}{\v ColorPlane_Bar}
\par {\strike\cf4 Box}{\v ColorPlane_Box}
\par {\strike\cf4 GetDot}{\v ColorPlane_GetDot}
\par {\strike\cf4 Clear}{\v ColorPlane_Clear}
\par {\strike\cf4 SetForeColor}{\v ColorPlane_SetForeColor}
\par {\strike\cf4 SetBackColor}{\v ColorPlane_SetBackColor}
\par {\strike\cf4 GetForeColor}{\v ColorPlane_GetForeColor}
\par {\strike\cf4 GetBackColor}{\v ColorPlane_GetBackColor}
\par {\strike\cf4 WriteStr}{\v ColorPlane_WriteStr}
\par {\strike\cf4 WriteLn}{\v ColorPlane_WriteLn}
\par {\strike\cf4 GotoXY}{\v ColorPlane_GotoXY}
\par {\strike\cf4 WhereX}{\v ColorPlane_WhereX}
\par {\strike\cf4 WhereY}{\v ColorPlane_WhereY}
\par {\strike\cf4 KeyPressed}{\v ColorPlane_KeyPressed}
\par {\strike\cf4 ReadKey}{\v ColorPlane_ReadKey}
\par {\strike\cf4 CursorOn}{\v ColorPlane_CursorOn}
\par {\strike\cf4 CursorOff}{\v ColorPlane_CursorOff}
\par {\strike\cf4 IsCursorOn}{\v ColorPlane_IsCursorOn}
\par {\strike\cf4 ReadStr}{\v ColorPlane_ReadStr}
\par {\strike\cf4 EditStr}{\v ColorPlane_EditStr}
\par {\strike\cf4 GetMouse}{\v ColorPlane_GetMouse}
\par {\strike\cf4 TextWidth}{\v ColorPlane_TextWidth}
\par {\strike\cf4 TextHeight}{\v ColorPlane_TextHeight}
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 ColorPlane_Open}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 ColorPlane.Open}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Open}}}Open
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 ColorPlane}{\v ColorPlane}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Open()
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 The display area for the graphics is created in the program window. This function must be called before any other function in the module as it provides the initialization. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 ColorPlane_Close}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 ColorPlane.Close}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Close}}}Close
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 ColorPlane}{\v ColorPlane}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Close()
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 The display area for the graphics is closed. The free space in the program window is divided for the remaining output areas (e.g., for the modules {\b Display} or {\b Out}). 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 ColorPlane_SetScreenUpdate}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {
\b\f4\fs24\super $}{\b\f4\fs24 ColorPlane.SetScreenUpdate}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 SetScreenUpdate}}}SetScreenUpdate
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 ColorPlane}{\v ColorPlane}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE SetScreenUpdate(x:BOOLEAN)
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 This function inhibits drawing visibly on the screen if {\b x} is FALSE; if TRUE then drawing is as normal. When the update is re-enabled again all chan
ges that have taken place in the meantime are displayed automatically. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 ColorPlane_Dot}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 ColorPlane.Dot}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Dot}}}Dot
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 ColorPlane}{\v ColorPlane}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Dot(x, y, mode:INTEGER)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 ColorPlane_Line}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 ColorPlane.Line}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Line}}}Line
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 ColorPlane}{\v ColorPlane}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Line(x1, y1, x2, y2, mode:INTEGER)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 ColorPlane_Bar}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 ColorPlane.Bar}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Bar}}}Bar
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 ColorPlane}{\v ColorPlane}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Bar(x1, y1, x2, y2, mode:INTEGER)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 ColorPlane_Box}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 ColorPlane.Box}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Box}}}Box
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 ColorPlane}{\v ColorPlane}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Box(x1, y1, x2, y2, mode:INTEGER)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 ColorPlane_GetDot}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 ColorPlane.GetDot}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 GetDot}}}GetDot
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 ColorPlane}{\v ColorPlane}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE GetDot(x, y:INTEGER; \line                  VAR r, g, b:INTEGER)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 ColorPlane_Clear}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 ColorPlane.Clear}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Clear}}}Clear
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 ColorPlane}{\v ColorPlane}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Clear()
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 ColorPlane_SetForeColor}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $
}{\b\f4\fs24 ColorPlane.SetForeColor}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 SetForeColor}}}SetForeColor
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 ColorPlane}{\v ColorPlane}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE SetForeColor(r, g, b:INTEGER)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 ColorPlane_SetBackColor}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $
}{\b\f4\fs24 ColorPlane.SetBackColor}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 SetBackColor}}}SetBackColor
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 ColorPlane}{\v ColorPlane}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE SetBackColor(r, g, b:INTEGER)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 ColorPlane_GetForeColor}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $
}{\b\f4\fs24 ColorPlane.GetForeColor}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 GetForeColor}}}GetForeColor
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 ColorPlane}{\v ColorPlane}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE GetForeColor(VAR r, g, b:INTEGER)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 ColorPlane_GetBackColor}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $
}{\b\f4\fs24 ColorPlane.GetBackColor}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 GetBackColor}}}GetBackColor
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 ColorPlane}{\v ColorPlane}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE GetBackColor(VAR r, g, b:INTEGER)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 ColorPlane_WriteStr}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 ColorPlane.WriteStr}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 WriteStr}}}WriteStr
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 ColorPlane}{\v ColorPlane}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE WriteStr(txt:ARRAY OF CHAR)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 ColorPlane_WriteLn}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 ColorPlane.WriteLn}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 WriteLn}}}WriteLn
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 ColorPlane}{\v ColorPlane}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE WriteLn()
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 ColorPlane_GotoXY}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 ColorPlane.GotoXY}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 GotoXY}}}GotoXY
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 ColorPlane}{\v ColorPlane}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE GotoXY(x, y:INTEGER)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 ColorPlane_WhereX}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 ColorPlane.WhereX}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 WhereX}}}WhereX
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 ColorPlane}{\v ColorPlane}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE WhereX():INTEGER
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 ColorPlane_WhereY}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 ColorPlane.WhereY}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 WhereY}}}WhereY
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 ColorPlane}{\v ColorPlane}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE WhereY():INTEGER
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 ColorPlane_KeyPressed}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 ColorPlane.KeyPressed}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 KeyPressed}}}KeyPressed
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 ColorPlane}{\v ColorPlane}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE KeyPressed():BOOLEAN
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 ColorPlane_ReadKey}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 ColorPlane.ReadKey}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 ReadKey}}}ReadKey
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 ColorPlane}{\v ColorPlane}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE ReadKey():CHAR
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 ColorPlane_CursorOn}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 ColorPlane.CursorOn}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 CursorOn}}}CursorOn
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 ColorPlane}{\v ColorPlane}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE CursorOn()
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 ColorPlane_CursorOff}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 ColorPlane.CursorOff}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 CursorOff}}}CursorOff
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 ColorPlane}{\v ColorPlane}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE CursorOff()
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 ColorPlane_IsCursorOn}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 ColorPlane.IsCursorOn}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 IsCursorOn}}}IsCursorOn
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 ColorPlane}{\v ColorPlane}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE IsCursorOn():BOOLEAN
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 ColorPlane_ReadStr}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 ColorPlane.ReadStr}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 ReadStr}}}ReadStr
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 ColorPlane}{\v ColorPlane}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE ReadStr(VAR t:ARRAY OF CHAR; \line                   maxLen:INTEGER; \line                   VAR resCode:CHAR)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 ColorPlane_EditStr}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 ColorPlane.EditStr}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 EditStr}}}EditStr
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 ColorPlane}{\v ColorPlane}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE EditStr(VAR t:ARRAY OF CHAR; \line                   maxLen:INTEGER; \line                   VAR resCode:CHAR)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 ColorPlane_GetMouse}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 ColorPlane.GetMouse}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 GetMouse}}}GetMouse
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 ColorPlane}{\v ColorPlane}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE GetMouse(VAR buttons:SET; \line                    VAR x, y:INTEGER)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 ColorPlane_TextWidth}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 ColorPlane.TextWidth}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 TextWidth}}}TextWidth
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 ColorPlane}{\v ColorPlane}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE TextWidth(VAR txt:ARRAY OF CHAR):INTEGER
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 ColorPlane_TextHeight}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 ColorPlane.TextHeight}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 TextHeight}}}TextHeight
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 ColorPlane}{\v ColorPlane}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE TextHeight():INTEGER
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Display}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
module Display}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Display}}}Module Display
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 This module provides a simple, text-oriented user interface. It is an easy to understand basis especially for programmers just starting to use Obe
ron-2. Its main purpose is to make it easy to display text from a Windows program. As far as its features are concerned it is adapted to the possibilities of usual devices operating in the text mode.
\par In this implementation a window is used for displaying up to 80 characters and 25 lines with a non-proportional font. If the size of the window is reduced any desired section of the whole window can be viewed using scroll bars.
\par \pard\plain \s46\sb180 \b\f5\lang1031 Constants
\par \pard\plain \s49\fi-2880\li2880\sb60 \f5\fs20\lang1031 CURSUP\tab \tab \tab 
\par CURSDOWN\tab \tab \tab 
\par CURSLEFT\tab \tab \tab 
\par CURSRIGHT\tab \tab \tab 
\par INSERT\tab \tab \tab 
\par DELETE\tab \tab \tab 
\par HOME\tab \tab \tab \tab 
\par ENDKEY\tab \tab \tab 
\par PAGEUP\tab \tab \tab 
\par PAGEDOWN\tab \tab \tab 
\par F1\tab \tab \tab \tab 
\par F2\tab \tab \tab \tab 
\par F3\tab \tab \tab \tab 
\par F4\tab \tab \tab \tab 
\par F5\tab \tab \tab \tab 
\par F6\tab \tab \tab \tab 
\par F7\tab \tab \tab \tab 
\par F8\tab \tab \tab \tab 
\par F9\tab \tab \tab \tab 
\par F10\tab \tab \tab \tab 
\par F11\tab \tab \tab \tab 
\par F12\tab \tab \tab \tab 
\par F13\tab \tab \tab \tab 
\par F14\tab \tab \tab \tab 
\par F15\tab \tab \tab \tab 
\par F16\tab \tab \tab \tab 
\par F17\tab \tab \tab \tab 
\par F18\tab \tab \tab \tab 
\par F19\tab \tab \tab \tab 
\par F20\tab \tab \tab \tab 
\par F21\tab \tab \tab \tab 
\par F22\tab \tab \tab \tab 
\par F23\tab \tab \tab \tab 
\par F24\tab \tab \tab \tab 
\par ENTER\tab \tab \tab \tab 
\par ESC\tab \tab \tab \tab 
\par TAB\tab \tab \tab \tab 
\par BACKSPACE\tab \tab \tab 
\par INPUTINVALID\tab \tab \tab 
\par \pard\plain \s46\sb180 \b\f5\lang1031 Procedures
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 {\strike\cf4 SetWindowTitle}{\v Display_SetWindowTitle}
\par {\strike\cf4 GotoXY}{\v Display_GotoXY}
\par {\strike\cf4 WhereX}{\v Display_WhereX}
\par {\strike\cf4 WhereY}{\v Display_WhereY}
\par {\strike\cf4 WriteCharXY}{\v Display_WriteCharXY}
\par {\strike\cf4 GetCharXY}{\v Display_GetCharXY}
\par {\strike\cf4 GetStrXY}{\v Display_GetStrXY}
\par {\strike\cf4 WriteLn}{\v Display_WriteLn}
\par {\strike\cf4 WriteChar}{\v Display_WriteChar}
\par {\strike\cf4 WriteStrXY}{\v Display_WriteStrXY}
\par {\strike\cf4 WriteStr}{\v Display_WriteStr}
\par {\strike\cf4 WriteSpacesXY}{\v Display_WriteSpacesXY}
\par {\strike\cf4 WriteSpaces}{\v Display_WriteSpaces}
\par {\strike\cf4 WriteIntXY}{\v Display_WriteIntXY}
\par {\strike\cf4 WriteInt}{\v Display_WriteInt}
\par {\strike\cf4 WriteRealXY}{\v Display_WriteRealXY}
\par {\strike\cf4 WriteReal}{\v Display_WriteReal}
\par {\strike\cf4 KeyPressed}{\v Display_KeyPressed}
\par {\strike\cf4 ReadKey}{\v Display_ReadKey}
\par {\strike\cf4 CursorOn}{\v Display_CursorOn}
\par {\strike\cf4 CursorOff}{\v Display_CursorOff}
\par {\strike\cf4 IsCursorOn}{\v Display_IsCursorOn}
\par {\strike\cf4 TerminalBell}{\v Display_TerminalBell}
\par {\strike\cf4 ReadChar}{\v Display_ReadChar}
\par {\strike\cf4 ReadLongInt}{\v Display_ReadLongInt}
\par {\strike\cf4 ReadReal}{\v Display_ReadReal}
\par {\strike\cf4 ReadLongReal}{\v Display_ReadLongReal}
\par {\strike\cf4 ReadInt}{\v Display_ReadInt}
\par {\strike\cf4 ReadStr}{\v Display_ReadStr}
\par {\strike\cf4 EditStr}{\v Display_EditStr}
\par {\strike\cf4 FlushKeyBuffer}{\v Display_FlushKeyBuffer}
\par {\strike\cf4 ClrScr}{\v Display_ClrScr}
\par {\strike\cf4 SetForeColor}{\v Display_SetForeColor}
\par {\strike\cf4 SetBackColor}{\v Display_SetBackColor}
\par {\strike\cf4 GetForeColor}{\v Display_GetForeColor}
\par {\strike\cf4 GetBackColor}{\v Display_GetBackColor}
\par {\strike\cf4 IsColorSupported}{\v Display_IsColorSupported}
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Display_SetWindowTitle}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}
{\b\f4\fs24 Display.SetWindowTitle}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 SetWindowTitle}}}SetWindowTitle
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Display}{\v Display}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE SetWindowTitle(t:ARRAY OF CHAR)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Display_GotoXY}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Display.GotoXY}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 GotoXY}}}GotoXY
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Display}{\v Display}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE GotoXY(s, z:INTEGER)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Display_WhereX}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Display.WhereX}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 WhereX}}}WhereX
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Display}{\v Display}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE WhereX():INTEGER
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Display_WhereY}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Display.WhereY}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 WhereY}}}WhereY
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Display}{\v Display}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE WhereY():INTEGER
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Display_WriteCharXY}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Display.WriteCharXY}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 WriteCharXY}}}WriteCharXY
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Display}{\v Display}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE WriteCharXY(s, z:INTEGER; \line                       x:CHAR)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Display_GetCharXY}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Display.GetCharXY}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 GetCharXY}}}GetCharXY
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Display}{\v Display}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE GetCharXY(s, z:INTEGER):CHAR
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Display_GetStrXY}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Display.GetStrXY}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 GetStrXY}}}GetStrXY
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Display}{\v Display}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE GetStrXY(s, z, n:INTEGER; \line                    VAR t:ARRAY OF CHAR)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Display_WriteLn}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Display.WriteLn}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 WriteLn}}}WriteLn
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Display}{\v Display}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE WriteLn()
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Display_WriteChar}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Display.WriteChar}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 WriteChar}}}WriteChar
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Display}{\v Display}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE WriteChar(x:CHAR)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Display_WriteStrXY}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Display.WriteStrXY}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 WriteStrXY}}}WriteStrXY
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Display}{\v Display}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE WriteStrXY(s, z:INTEGER; \line                      t:ARRAY OF CHAR)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Display_WriteStr}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Display.WriteStr}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 WriteStr}}}WriteStr
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Display}{\v Display}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE WriteStr(t:ARRAY OF CHAR)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Display_WriteSpacesXY}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Display.WriteSpacesXY}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 WriteSpacesXY}}}WriteSpacesXY
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Display}{\v Display}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE WriteSpacesXY(s, z:INTEGER; \line                         n:INTEGER)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Display_WriteSpaces}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Display.WriteSpaces}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 WriteSpaces}}}WriteSpaces
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Display}{\v Display}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE WriteSpaces(n:INTEGER)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Display_WriteIntXY}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Display.WriteIntXY}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 WriteIntXY}}}WriteIntXY
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Display}{\v Display}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE WriteIntXY(s, z:INTEGER; \line                      x:LONGINT; \line                      len:INTEGER)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Display_WriteInt}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Display.WriteInt}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 WriteInt}}}WriteInt
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Display}{\v Display}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE WriteInt(x:LONGINT; \line                    len:INTEGER)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Display_WriteRealXY}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Display.WriteRealXY}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 WriteRealXY}}}WriteRealXY
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Display}{\v Display}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE WriteRealXY(s, z:INTEGER; \line                       x:LONGREAL; \line                       n:INTEGER)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Display_WriteReal}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Display.WriteReal}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 WriteReal}}}WriteReal
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Display}{\v Display}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE WriteReal(x:LONGREAL; \line                     n:INTEGER)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Display_KeyPressed}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Display.KeyPressed}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 KeyPressed}}}KeyPressed
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Display}{\v Display}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE KeyPressed():BOOLEAN
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Display_ReadKey}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Display.ReadKey}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 ReadKey}}}ReadKey
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Display}{\v Display}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE ReadKey():CHAR
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Display_CursorOn}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Display.CursorOn}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 CursorOn}}}CursorOn
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Display}{\v Display}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE CursorOn()
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Display_CursorOff}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Display.CursorOff}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 CursorOff}}}CursorOff
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Display}{\v Display}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE CursorOff()
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Display_IsCursorOn}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Display.IsCursorOn}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 IsCursorOn}}}IsCursorOn
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Display}{\v Display}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE IsCursorOn():BOOLEAN
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Display_TerminalBell}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Display.TerminalBell}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 TerminalBell}}}TerminalBell
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Display}{\v Display}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE TerminalBell()
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Display_ReadChar}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Display.ReadChar}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 ReadChar}}}ReadChar
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Display}{\v Display}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE ReadChar(VAR x:CHAR)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Display_ReadLongInt}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Display.ReadLongInt}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 ReadLongInt}}}ReadLongInt
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Display}{\v Display}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE ReadLongInt(VAR x:LONGINT; \line                       maxl:INTEGER; \line                       VAR resCode:CHAR)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Display_ReadReal}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Display.ReadReal}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 ReadReal}}}ReadReal
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Display}{\v Display}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE ReadReal(VAR x:REAL; \line                    maxl:INTEGER; \line                    VAR resCode:CHAR)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Display_ReadLongReal}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Display.ReadLongReal}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 ReadLongReal}}}ReadLongReal
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Display}{\v Display}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE ReadLongReal(VAR x:LONGREAL; \line                        maxl:INTEGER; \line                        VAR resCode:CHAR)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Display_ReadInt}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Display.ReadInt}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 ReadInt}}}ReadInt
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Display}{\v Display}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE ReadInt(VAR x:INTEGER; \line                   maxl:INTEGER; \line                   VAR resCode:CHAR)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Display_ReadStr}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Display.ReadStr}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 ReadStr}}}ReadStr
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Display}{\v Display}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE ReadStr(VAR t:ARRAY OF CHAR; \line                   maxl:INTEGER; \line                   VAR resCode:CHAR)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Display_EditStr}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Display.EditStr}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 EditStr}}}EditStr
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Display}{\v Display}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE EditStr(VAR t:ARRAY OF CHAR; \line                   maxl:INTEGER; \line                   VAR resCode:CHAR)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Display_FlushKeyBuffer}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}
{\b\f4\fs24 Display.FlushKeyBuffer}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 FlushKeyBuffer}}}FlushKeyBuffer
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Display}{\v Display}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE FlushKeyBuffer()
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Display_ClrScr}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Display.ClrScr}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 ClrScr}}}ClrScr
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Display}{\v Display}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE ClrScr()
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Display_SetForeColor}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Display.SetForeColor}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 SetForeColor}}}SetForeColor
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Display}{\v Display}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE SetForeColor(r, g, b:INTEGER)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Display_SetBackColor}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Display.SetBackColor}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 SetBackColor}}}SetBackColor
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Display}{\v Display}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE SetBackColor(r, g, b:INTEGER)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Display_GetForeColor}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Display.GetForeColor}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 GetForeColor}}}GetForeColor
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Display}{\v Display}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE GetForeColor(VAR r, g, b:INTEGER)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Display_GetBackColor}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Display.GetBackColor}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 GetBackColor}}}GetBackColor
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Display}{\v Display}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE GetBackColor(VAR r, g, b:INTEGER)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Display_IsColorSupported}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super 
$}{\b\f4\fs24 Display.IsColorSupported}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 IsColorSupported}}}IsColorSupported
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Display}{\v Display}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE IsColorSupported():BOOLEAN
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 File}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
module File}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 File}}}Module File
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 This module provides the functionality needed for working with files and doing file management.
\par All functions for file processing need a so-called {\b Handle} which is a unique reference which identifies a particular file. To obtain a valid handle a file must be opened with the function {\b Open}. When all work on a file has been complete
d the file must be closed with the function {\b Close}.
\par Functions that refer to a file as a whole rather than its contents require its file name as an argument instead of a handle.
\par Files are regarded as streams of characters without predefined type. Single characters or whole data blocks can be read one after another. In order to control the current reading position within a file the system provides an internal variable for every op
en file, the so-called "fle pointer", which is also used to define the writing position. Initially the value of the file pointer start with zero.
\par After data has been read or written at the current position, the file pointer is moved on for each read or written character. Additionally, there are functions {\b Seek} and {\b SeekRel}
 which make it possible to set the file pointer to a particular position.
\par \pard\plain \s46\sb180 \b\f5\lang1031 Constants
\par \pard\plain \s49\fi-2880\li2880\sb60 \f5\fs20\lang1031 MAXPATH\tab \tab \tab maximum length of a full pathname including the filename 
\par MAXFILENAME\tab \tab maximum length of a filename
\par 
\par \pard\plain \s51\sb90 \b\f5\fs20\lang1031 File Attributes 
\par \pard\plain \s49\fi-2880\li2880\sb60 \f5\fs20\lang1031 ATTRREADONLY\tab \tab the file is read-only                     
\par ATTRHIDDEN\tab \tab \tab the file is hidden                        
\par ATTRSYSTEM\tab \tab \tab the file is part of the operating system  
\par ATTRVOLUME\tab \tab \tab maintained for compatibility only         
\par ATTRDIR\tab \tab \tab file entry is really a directory          
\par ATTRARCHIVE\tab \tab \tab file marked for backup                    
\par ATTRNORMAL\tab \tab \tab a plain file with no other attributes set 
\par ATTRTEMP\tab \tab \tab the file is used for temporary storage    
\par ATTRCOMPRESSED\tab \tab the file or directory is compressed       
\par ATTROFFLINE\tab \tab \tab file currently physically unavailable
\par 
\par \pard\plain \s51\sb90 \b\f5\fs20\lang1031 Constants for <mode> parameter of open command 
\par \pard\plain \s49\fi-2880\li2880\sb60 \f5\fs20\lang1031 READONLY\tab \tab \tab 
\par WRITEONLY\tab \tab \tab 
\par READWRITE\tab \tab \tab 
\par \pard\plain \s51\sb90 \b\f5\fs20\lang1031 Constants for <deny> parameter of open command 
\par \pard\plain \s49\fi-2880\li2880\sb60 \f5\fs20\lang1031 DENYALL\tab \tab \tab 
\par DENYWRITE\tab \tab \tab 
\par DENYREAD\tab \tab \tab 
\par DENYNONE\tab \tab \tab 
\par \pard\plain \s51\sb90 \b\f5\fs20\lang1031 Error Codes 
\par \pard\plain \s49\fi-2880\li2880\sb60 \f5\fs20\lang1031 NOERROR\tab \tab \tab 
\par EOFREACHED\tab \tab 
\par INVALIDHANDLE\tab \tab 
\par FILENOTFOUND\tab \tab 
\par ACCESSDENIED\tab \tab 
\par WRITEPROTECTED\tab \tab 
\par SHARINGVIOLATION\tab \tab 
\par \pard\plain \s46\sb180 \b\f5\lang1031 Types
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 {\ul\cf4 Handle}{\v File_Handle}
\par {\ul\cf4 RetCodeT}{\v File_RetCodeT}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Procedures
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 {\strike\cf4 GetErrorMessage}{\v File_GetErrorMessage}
\par {\strike\cf4 Pos}{\v File_Pos}
\par {\strike\cf4 Seek}{\v File_Seek}
\par {\strike\cf4 SeekRel}{\v File_SeekRel}
\par {\strike\cf4 Size}{\v File_Size}
\par {\strike\cf4 Open}{\v File_Open}
\par {\strike\cf4 ReadChar}{\v File_ReadChar}
\par {\strike\cf4 WriteChar}{\v File_WriteChar}
\par {\strike\cf4 Truncate}{\v File_Truncate}
\par {\strike\cf4 ReadLn}{\v File_ReadLn}
\par {\strike\cf4 WriteLn}{\v File_WriteLn}
\par {\strike\cf4 ReadBlock}{\v File_ReadBlock}
\par {\strike\cf4 WriteBlock}{\v File_WriteBlock}
\par {\strike\cf4 AtEnd}{\v File_AtEnd}
\par {\strike\cf4 Close}{\v File_Close}
\par {\strike\cf4 GetModifyDate}{\v File_GetModifyDate}
\par {\strike\cf4 GetCreationDate}{\v File_GetCreationDate}
\par {\strike\cf4 GetAccessDate}{\v File_GetAccessDate}
\par {\strike\cf4 SetModifyDate}{\v File_SetModifyDate}
\par {\strike\cf4 Exist}{\v File_Exist}
\par {\strike\cf4 GetAttributes}{\v File_GetAttributes}
\par {\strike\cf4 SetAttributes}{\v File_SetAttributes}
\par {\strike\cf4 Rename}{\v File_Rename}
\par {\strike\cf4 Delete}{\v File_Delete}
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 File_GetErrorMessage}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 File.GetErrorMessage}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 GetErrorMessage}}}GetErrorMessage
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 File}{\v File}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE GetErrorMessage(error:{\ul\cf4 RetCodeT}{\v File_RetCodeT}; \line                           VAR message:ARRAY OF CHAR)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 File_Pos}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
File.Pos}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Pos}}}Pos
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 File}{\v File}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Pos(handle:{\ul\cf4 Handle}{\v File_Handle}; \line               VAR pos:LONGINT; \line               VAR res:{\ul\cf4 RetCodeT}{\v File_RetCodeT})
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 File_Seek}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
File.Seek}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Seek}}}Seek
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 File}{\v File}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Seek(handle:{\ul\cf4 Handle}{\v File_Handle}; \line                pos:LONGINT; \line                VAR res:{\ul\cf4 RetCodeT}{\v File_RetCodeT})
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 File_SeekRel}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 File.SeekRel}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 SeekRel}}}SeekRel
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 File}{\v File}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE SeekRel(handle:{\ul\cf4 Handle}{\v File_Handle}; \line                   pos:LONGINT; \line                   VAR res:{\ul\cf4 RetCodeT}{\v File_RetCodeT})
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 File_Size}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
File.Size}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Size}}}Size
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 File}{\v File}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Size(handle:{\ul\cf4 Handle}{\v File_Handle}; \line                VAR len:LONGINT; \line                VAR res:{\ul\cf4 RetCodeT}{\v File_RetCodeT})
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 File_Open}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
File.Open}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Open}}}Open
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 File}{\v File}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Open(name:ARRAY OF CHAR; \line                create:BOOLEAN; \line                deny:INTEGER; \line                mode:INTEGER; \line                VAR fHandle:{\ul\cf4 Handle}{\v 
File_Handle}; \line                VAR res:{\ul\cf4 RetCodeT}{\v File_RetCodeT})
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 File_ReadChar}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 File.ReadChar}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 ReadChar}}}ReadChar
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 File}{\v File}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE ReadChar(handle:{\ul\cf4 Handle}{\v File_Handle}; \line                    VAR x:CHAR; \line                    VAR res:{\ul\cf4 RetCodeT}{\v File_RetCodeT})
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 File_WriteChar}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 File.WriteChar}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 WriteChar}}}WriteChar
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 File}{\v File}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE WriteChar(handle:{\ul\cf4 Handle}{\v File_Handle}; \line                     x:CHAR; \line                     VAR res:{\ul\cf4 RetCodeT}{\v File_RetCodeT})
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 File_Truncate}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 File.Truncate}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Truncate}}}Truncate
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 File}{\v File}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Truncate(handle:{\ul\cf4 Handle}{\v File_Handle}; \line                    VAR res:{\ul\cf4 RetCodeT}{\v File_RetCodeT})
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 File_ReadLn}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 File.ReadLn}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 ReadLn}}}ReadLn
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 File}{\v File}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE ReadLn(handle:{\ul\cf4 Handle}{\v File_Handle}; \line                  VAR t:ARRAY OF CHAR; \line                  VAR res:{\ul\cf4 RetCodeT}{\v File_RetCodeT})
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 File_WriteLn}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 File.WriteLn}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 WriteLn}}}WriteLn
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 File}{\v File}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE WriteLn(handle:{\ul\cf4 Handle}{\v File_Handle}; \line                   VAR txt-:ARRAY OF CHAR; \line                   VAR res:{\ul\cf4 RetCodeT}{\v File_RetCodeT})
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 File_ReadBlock}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 File.ReadBlock}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 ReadBlock}}}ReadBlock
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 File}{\v File}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE ReadBlock(handle:{\ul\cf4 Handle}{\v File_Handle}; \line                     VAR data:ARRAY OF SYSTEM.BYTE; \line                     n:LONGINT; \line 
                    VAR bytesRead:LONGINT; \line                     VAR res:{\ul\cf4 RetCodeT}{\v File_RetCodeT})
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 File_WriteBlock}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 File.WriteBlock}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 WriteBlock}}}WriteBlock
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 File}{\v File}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE WriteBlock(handle:{\ul\cf4 Handle}{\v File_Handle}; \line                      VAR data-:ARRAY OF SYSTEM.BYTE; \line                      n:LONGINT; \line                      VAR res:{
\ul\cf4 RetCodeT}{\v File_RetCodeT})
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 File_AtEnd}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
File.AtEnd}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 AtEnd}}}AtEnd
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 File}{\v File}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE AtEnd(handle:{\ul\cf4 Handle}{\v File_Handle}):BOOLEAN
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 File_Close}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
File.Close}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Close}}}Close
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 File}{\v File}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Close(handle:{\ul\cf4 Handle}{\v File_Handle})
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 File_GetModifyDate}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 File.GetModifyDate}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 GetModifyDate}}}GetModifyDate
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 File}{\v File}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE GetModifyDate(handle:{\ul\cf4 Handle}{\v File_Handle}; \line                         VAR date:ARRAY OF CHAR; \line                         VAR res:{\ul\cf4 RetCodeT}{\v File_RetCodeT})

\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 File_GetCreationDate}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 File.GetCreationDate}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 GetCreationDate}}}GetCreationDate
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 File}{\v File}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE GetCreationDate(handle:{\ul\cf4 Handle}{\v File_Handle}; \line                           VAR date:ARRAY OF CHAR; \line                           VAR res:{\ul\cf4 RetCodeT}{\v 
File_RetCodeT})
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 File_GetAccessDate}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 File.GetAccessDate}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 GetAccessDate}}}GetAccessDate
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 File}{\v File}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE GetAccessDate(handle:{\ul\cf4 Handle}{\v File_Handle}; \line                         VAR date:ARRAY OF CHAR; \line                         VAR res:{\ul\cf4 RetCodeT}{\v File_RetCodeT})

\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 File_SetModifyDate}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 File.SetModifyDate}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 SetModifyDate}}}SetModifyDate
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 File}{\v File}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE SetModifyDate(handle:{\ul\cf4 Handle}{\v File_Handle}; \line                         VAR date-:ARRAY OF CHAR; \line                         VAR res:{\ul\cf4 RetCodeT}{\v File_RetCodeT})

\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 File_Exist}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
File.Exist}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Exist}}}Exist
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 File}{\v File}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Exist(name:ARRAY OF CHAR):BOOLEAN
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 This function checks whether the file given in {\b name} exists. {\b name} may also contain wildchards. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 File_GetAttributes}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 File.GetAttributes}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 GetAttributes}}}GetAttributes
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 File}{\v File}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE GetAttributes(name:ARRAY OF CHAR; \line                         VAR attr:SET; \line                         VAR res:{\ul\cf4 RetCodeT}{\v File_RetCodeT})
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 File_SetAttributes}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 File.SetAttributes}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 SetAttributes}}}SetAttributes
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 File}{\v File}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE SetAttributes(name:ARRAY OF CHAR; \line                         attr:SET; \line                         VAR res:{\ul\cf4 RetCodeT}{\v File_RetCodeT})
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 File_Rename}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 File.Rename}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Rename}}}Rename
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 File}{\v File}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Rename(oldName, newName:ARRAY OF CHAR; \line                  VAR res:{\ul\cf4 RetCodeT}{\v File_RetCodeT})
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 File_Delete}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 File.Delete}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Delete}}}Delete
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 File}{\v File}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Delete(name:ARRAY OF CHAR; \line                  VAR res:{\ul\cf4 RetCodeT}{\v File_RetCodeT})
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super #}{\f4\fs24 File_Handle}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super $}{\f4\fs24 File.Handle}}K
{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super K}{\f4\fs24 Handle}}}{\b Handle}
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 Handle*=WD.HANDLE;
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super #}{\f4\fs24 File_RetCodeT}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super $}{\f4\fs24 File.RetCodeT}}K
{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super K}{\f4\fs24 RetCodeT}}}{\b RetCodeT}
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 RetCodeT*=INTEGER;
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Float}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
module Float}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Float}}}Module Float
\par \pard\plain \s46\sb180 \b\f5\lang1031 Constants
\par \pard\plain \s49\fi-2880\li2880\sb60 \f5\fs20\lang1031 ISREAL\tab \tab \tab 
\par ISLONGREAL\tab \tab \tab 
\par ISOUTOFRANGE\tab \tab 
\par STRINGEMPTY\tab \tab 
\par STRINGILLEGAL\tab \tab 
\par UNSUPPORTED\tab \tab 
\par NAN\tab \tab \tab \tab 
\par NORMAL\tab \tab \tab 
\par POSINF\tab \tab \tab 
\par ZERO\tab \tab \tab \tab 
\par DENORMAL\tab \tab \tab 
\par IMPOSSIBLE\tab \tab \tab 
\par NEGINF\tab \tab \tab 
\par Pi\tab \tab \tab \tab 
\par e\tab \tab \tab \tab 
\par \pard\plain \s46\sb180 \b\f5\lang1031 Procedures
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 {\strike\cf4 Log2}{\v Float_Log2}
\par {\strike\cf4 Log2L}{\v Float_Log2L}
\par {\strike\cf4 Ln}{\v Float_Ln}
\par {\strike\cf4 LnL}{\v Float_LnL}
\par {\strike\cf4 Log10}{\v Float_Log10}
\par {\strike\cf4 Log10L}{\v Float_Log10L}
\par {\strike\cf4 Exp}{\v Float_Exp}
\par {\strike\cf4 ExpL}{\v Float_ExpL}
\par {\strike\cf4 Sqrt}{\v Float_Sqrt}
\par {\strike\cf4 SqrtL}{\v Float_SqrtL}
\par {\strike\cf4 Cos}{\v Float_Cos}
\par {\strike\cf4 CosL}{\v Float_CosL}
\par {\strike\cf4 Sin}{\v Float_Sin}
\par {\strike\cf4 SinL}{\v Float_SinL}
\par {\strike\cf4 Tan}{\v Float_Tan}
\par {\strike\cf4 TanL}{\v Float_TanL}
\par {\strike\cf4 ArcTan}{\v Float_ArcTan}
\par {\strike\cf4 ArcTanL}{\v Float_ArcTanL}
\par {\strike\cf4 ArcSin}{\v Float_ArcSin}
\par {\strike\cf4 ArcSinL}{\v Float_ArcSinL}
\par {\strike\cf4 KindOfNumber}{\v Float_KindOfNumber}
\par {\strike\cf4 KindOfNumberL}{\v Float_KindOfNumberL}
\par {\strike\cf4 ValResult}{\v Float_ValResult}
\par {\strike\cf4 Val}{\v Float_Val}
\par {\strike\cf4 StrF}{\v Float_StrF}
\par {\strike\cf4 Str}{\v Float_Str}
\par {\strike\cf4 StrL}{\v Float_StrL}
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Float_Log2}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
Float.Log2}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Log2}}}Log2
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Float}{\v Float}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Log2(x:REAL):REAL
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 The return value is the logarithm base 2 of {\b x}. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Float_Log2L}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Float.Log2L}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Log2L}}}Log2L
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Float}{\v Float}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Log2L(x:LONGREAL):LONGREAL
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 The return value is the logarithm base 2 of {\b x}. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Float_Ln}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
Float.Ln}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Ln}}}Ln
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Float}{\v Float}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Ln(x:REAL):REAL
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 The return value is the natural logarithm (base e) of {\b x}. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Float_LnL}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
Float.LnL}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 LnL}}}LnL
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Float}{\v Float}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE LnL(x:LONGREAL):LONGREAL
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 The return value is the natural logarithm (base e) of {\b x}. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Float_Log10}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Float.Log10}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Log10}}}Log10
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Float}{\v Float}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Log10(x:REAL):REAL
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 The return value is the logarithm base 10 of {\b x}. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Float_Log10L}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Float.Log10L}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Log10L}}}Log10L
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Float}{\v Float}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Log10L(x:LONGREAL):LONGREAL
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 The return value is the logarithm base 10 of {\b x}. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Float_Exp}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
Float.Exp}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Exp}}}Exp
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Float}{\v Float}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Exp(x, y:REAL):REAL
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 The return value is {\b x} to the power of {\b y}. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Float_ExpL}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
Float.ExpL}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 ExpL}}}ExpL
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Float}{\v Float}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE ExpL(x, y:LONGREAL):LONGREAL
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 The return value is {\b x} to the power of {\b y}. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Float_Sqrt}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
Float.Sqrt}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Sqrt}}}Sqrt
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Float}{\v Float}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Sqrt(x:REAL):REAL
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 The return value is the square root of {\b x}. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Float_SqrtL}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Float.SqrtL}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 SqrtL}}}SqrtL
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Float}{\v Float}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE SqrtL(x:LONGREAL):LONGREAL
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 The return value is the square root of {\b x}. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Float_Cos}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
Float.Cos}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Cos}}}Cos
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Float}{\v Float}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Cos(x:REAL):REAL
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 The return value is the cosine of {\b x} in radians. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Float_CosL}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
Float.CosL}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 CosL}}}CosL
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Float}{\v Float}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE CosL(x:LONGREAL):LONGREAL
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 The return value is the cosine of {\b x} in radians. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Float_Sin}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
Float.Sin}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Sin}}}Sin
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Float}{\v Float}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Sin(x:REAL):REAL
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 The return value is the sine of {\b x} in radians. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Float_SinL}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
Float.SinL}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 SinL}}}SinL
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Float}{\v Float}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE SinL(x:LONGREAL):LONGREAL
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 The return value is the sine of {\b x} in radians. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Float_Tan}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
Float.Tan}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Tan}}}Tan
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Float}{\v Float}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Tan(x:REAL):REAL
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 The return value is the tangent of {\b x} in radians. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Float_TanL}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
Float.TanL}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 TanL}}}TanL
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Float}{\v Float}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE TanL(x:LONGREAL):LONGREAL
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 The return value is the tangent of {\b x} in radians. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Float_ArcTan}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Float.ArcTan}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 ArcTan}}}ArcTan
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Float}{\v Float}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE ArcTan(x:REAL):REAL
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 The return value is the arc tangent of {\b x} in radians. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Float_ArcTanL}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Float.ArcTanL}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 ArcTanL}}}ArcTanL
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Float}{\v Float}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE ArcTanL(x:LONGREAL):LONGREAL
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 The return value is the arc tangent of {\b x} in radians. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Float_ArcSin}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Float.ArcSin}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 ArcSin}}}ArcSin
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Float}{\v Float}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE ArcSin(x:REAL):REAL
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 The return value is the arc sine of {\b x} in radians. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Float_ArcSinL}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Float.ArcSinL}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 ArcSinL}}}ArcSinL
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Float}{\v Float}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE ArcSinL(x:LONGREAL):LONGREAL
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 The return value is the arc sine of {\b x} in radians. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Float_KindOfNumber}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Float.KindOfNumber}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 KindOfNumber}}}KindOfNumber
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Float}{\v Float}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE KindOfNumber(x:REAL):INTEGER
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 Returns one of the following values which characterizes the contents of {\b x}:
\par NAN          not a number
\par NORMAL       ordinary number
\par POSINF       positive infinity
\par ZERO         zero
\par DENORMAL     number stored with reduced precision
\par NEGINF       negative infinity
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Float_KindOfNumberL}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Float.KindOfNumberL}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 KindOfNumberL}}}KindOfNumberL
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Float}{\v Float}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE KindOfNumberL(x:LONGREAL):INTEGER
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 Returns one of the following values which characterizes the contents of {\b x}:
\par UNSUPPORTED NAN          not a number NORMAL       ordinary number POSINF       positive infinity ZERO         zero DENORMAL     number stored with reduced precision NEGINF       negative infinity
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Float_ValResult}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Float.ValResult}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 ValResult}}}ValResult
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Float}{\v Float}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE ValResult(t:ARRAY OF CHAR):INTEGER
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Float_Val}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
Float.Val}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Val}}}Val
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Float}{\v Float}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Val(t:ARRAY OF CHAR):LONGREAL
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Float_StrF}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
Float.StrF}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 StrF}}}StrF
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Float}{\v Float}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE StrF(x:LONGREAL; \line                n1, n2:INTEGER; \line                VAR t:ARRAY OF CHAR)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Float_Str}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
Float.Str}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Str}}}Str
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Float}{\v Float}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Str(x:LONGREAL; \line               VAR t:ARRAY OF CHAR)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Float_StrL}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
Float.StrL}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 StrL}}}StrL
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Float}{\v Float}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE StrL(x:LONGREAL; \line                n:INTEGER; \line                VAR t:ARRAY OF CHAR)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 In}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
module In}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 In}}}Module In
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 This module provides simple, data-stream-oriented input. The source of input
 can be from the keyboard or from a file. The input from a file is especially useful for the program development as input test data can be prepared and saved in a file. This file is then selected as input source after each program start to run a complete 
test.
\par \pard\plain \s46\sb180 \b\f5\lang1031 Variables
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 {\ul\cf4 Done}{\v In_Done}
\par {\ul\cf4 echo}{\v In_echo}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Procedures
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 {\strike\cf4 Echo}{\v In_Echo}
\par {\strike\cf4 Prompt}{\v In_Prompt}
\par {\strike\cf4 Open}{\v In_Open}
\par {\strike\cf4 Char}{\v In_Char}
\par {\strike\cf4 Int}{\v In_Int}
\par {\strike\cf4 LongInt}{\v In_LongInt}
\par {\strike\cf4 Real}{\v In_Real}
\par {\strike\cf4 LongReal}{\v In_LongReal}
\par {\strike\cf4 Name}{\v In_Name}
\par {\strike\cf4 String}{\v In_String}
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 In_Echo}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
In.Echo}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Echo}}}Echo
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 In}{\v In}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Echo(x:BOOLEAN)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 In_Prompt}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
In.Prompt}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Prompt}}}Prompt
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 In}{\v In}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Prompt(txt:ARRAY OF CHAR)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 In_Open}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
In.Open}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Open}}}Open
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 In}{\v In}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Open()
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 In_Char}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
In.Char}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Char}}}Char
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 In}{\v In}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Char(VAR ch:CHAR)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 In_Int}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
In.Int}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Int}}}Int
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 In}{\v In}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Int(VAR i:INTEGER)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 In_LongInt}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
In.LongInt}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 LongInt}}}LongInt
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 In}{\v In}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE LongInt(VAR l:LONGINT)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 In_Real}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
In.Real}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Real}}}Real
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 In}{\v In}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Real(VAR x:REAL)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 In_LongReal}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 In.LongReal}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 LongReal}}}LongReal
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 In}{\v In}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE LongReal(VAR x:LONGREAL)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 In_Name}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
In.Name}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Name}}}Name
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 In}{\v In}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Name(VAR nme:ARRAY OF CHAR)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 In_String}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
In.String}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 String}}}String
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 In}{\v In}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE String(VAR str:ARRAY OF CHAR)
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super #}{\f4\fs24 In_Done}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super $}{\f4\fs24 In.Done}}K{\footnote 
\pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super K}{\f4\fs24 Done}}}{\b Done}
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 Done*:BOOLEAN;
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super #}{\f4\fs24 In_echo}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super $}{\f4\fs24 In.echo}}K{\footnote 
\pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super K}{\f4\fs24 echo}}}{\b echo}
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 echo-:BOOLEAN;
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 OOBase}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
module OOBase}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 OOBase}}}Module OOBase
\par \pard\plain \s46\sb180 \b\f5\lang1031 Constants
\par \pard\plain \s49\fi-2880\li2880\sb60 \f5\fs20\lang1031 TYP_ARRAY\tab \tab \tab 
\par TYP_DYNARRAY\tab \tab 
\par TYP_RECORD\tab \tab \tab 
\par TYP_ENDRECORD\tab \tab 
\par TYP_UNDEF\tab \tab \tab 
\par TYP_BYTE\tab \tab \tab 
\par TYP_BOOL\tab \tab \tab 
\par TYP_CHAR\tab \tab \tab 
\par TYP_SHORTINT\tab \tab 
\par TYP_INT\tab \tab \tab 
\par TYP_LONGINT\tab \tab \tab 
\par TYP_REAL\tab \tab \tab 
\par TYP_LONGREAL\tab \tab 
\par TYP_SET\tab \tab \tab 
\par TYP_STRING\tab \tab \tab 
\par TYP_NIL\tab \tab \tab 
\par TYP_NOTYP\tab \tab \tab 
\par TYP_POINTER\tab \tab \tab 
\par TYP_HDPOINTER\tab \tab 
\par TYP_PROCTYP\tab \tab 
\par \pard\plain \s46\sb180 \b\f5\lang1031 Types
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 {\ul\cf4 Object}{\v OOBase_Object}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Classes / Record Types
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 {\strike\cf4 ObjectT}{\v OOBase_ObjectT}
\par {\strike\cf4 ObjMetaToolT}{\v OOBase_ObjMetaToolT}
\par {\strike\cf4 ObjMetaToolMarkerT}{\v OOBase_ObjMetaToolMarkerT}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Procedures
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 {\strike\cf4 Clone}{\v OOBase_Clone}
\par {\strike\cf4 ObjToName}{\v OOBase_ObjToName}
\par {\strike\cf4 NameToObj}{\v OOBase_NameToObj}
\par {\strike\cf4 TypeHasOffset}{\v OOBase_TypeHasOffset}
\par {\strike\cf4 TypeToName}{\v OOBase_TypeToName}
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 OOBase_Clone}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 OOBase.Clone}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Clone}}}Clone
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 OOBase}{\v OOBase}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Clone(obj:{\ul\cf4 Object}{\v OOBase_Object}):{\ul\cf4 Object}{\v OOBase_Object}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 The object passed in obj is cloned. This means that a new object of the same class is created, which has the same state as the original object.
\par The same state has to be taken literal: if the original object contains any pointers to other objects, which should by design be private, the new object will contain pointers to the same objects and not possess new private copies of those.
\par The return value is either a pointer to the cloned object or NIL if the function failed. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 OOBase_ObjToName}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 OOBase.ObjToName}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 ObjToName}}}ObjToName
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 OOBase}{\v OOBase}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE ObjToName(p:{\ul\cf4 Object}{\v OOBase_Object}; \line                     VAR codeName, name:ARRAY OF CHAR)
\par \pard\plain \s46\sb180 \b\f5\lang1031 Parameters
\par \pard\plain \s49\fi-2880\li2880\sb60 \f5\fs20\lang1031 p\tab \tab \tab \tab pointer to the object whose symbolic name should be determined 
\par codeName\tab \tab \tab returns the full pathname of the .EXE or .DLL file containing the code of the class implementation 
\par name\tab \tab \tab \tab returns the qualified class name of the object in the form moduleName.typeName 
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 The symbolic name of an objects qualified class name and the name of its code module are returned. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 OOBase_NameToObj}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 OOBase.NameToObj}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 NameToObj}}}NameToObj
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 OOBase}{\v OOBase}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE NameToObj(VAR codeName-, name-:ARRAY OF CHAR; \line                     VAR p:{\ul\cf4 Object}{\v OOBase_Object})
\par \pard\plain \s46\sb180 \b\f5\lang1031 Parameters
\par \pard\plain \s49\fi-2880\li2880\sb60 \f5\fs20\lang1031 codeName\tab \tab \tab the full pathname of the .EXE or .DLL file containig the implementation of the desired class 
\par name\tab \tab \tab \tab the qualified class name in the form moduleName.className 
\par p\tab \tab \tab \tab returns a pointer to the object created or NIL if the call failed 
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 A new object is created according to a given class and code module name.
\par The code module name has to be given because the class might be implemented in a DLL which has not yet been loaded and whose name can not be derived from the Oberon class name.
\par It is possible to implement different modules with the same name in different DLLs. In this case it is not adviseable to use both DLLs in the same program. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 OOBase_TypeHasOffset}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 OOBase.TypeHasOffset}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 TypeHasOffset}}}TypeHasOffset
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 OOBase}{\v OOBase}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE TypeHasOffset(typeCode:INTEGER):BOOLEAN
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 return TRUE if the given type is accompanied by an offset in the RTTI 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 OOBase_TypeToName}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 OOBase.TypeToName}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 TypeToName}}}TypeToName
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 OOBase}{\v OOBase}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE TypeToName(typeCode:INTEGER; \line                      VAR txt:ARRAY OF CHAR)
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 returns the symbolic name of the type given in typeCode 
\par \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super #}{\f4\fs24 OOBase_Object}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super $}{\f4\fs24 OOBase.Object}}K{\footnote \pard\plain \nowidctlpar 
\f5\fs20\lang1031 {\f4\fs24\super K}{\f4\fs24 Object}}}{\b Object}
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 Object*=POINTER TO {\strike\cf4 ObjectT}{\v OOBase_ObjectT};
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 OOBase_ObjectT}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 OOBase.ObjectT}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 ObjectT}}}ObjectT
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 OOBase}{\v OOBase}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 This class should be the base of any class hierarchy. This class only contains the empty method Init.
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 ObjectT=RECORD \line END;
\par \pard\plain \s46\sb180 \b\f5\lang1031 Methods
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 {\strike\cf4 Init}{\v OOBase_ObjectT_Init}
\par {\strike\cf4 GetFieldType}{\v OOBase_ObjectT_GetFieldType}
\par {\strike\cf4 PutIntField}{\v OOBase_ObjectT_PutIntField}
\par {\strike\cf4 GetIntField}{\v OOBase_ObjectT_GetIntField}
\par {\strike\cf4 PutLongIntField}{\v OOBase_ObjectT_PutLongIntField}
\par {\strike\cf4 GetLongIntField}{\v OOBase_ObjectT_GetLongIntField}
\par {\strike\cf4 PutShortIntField}{\v OOBase_ObjectT_PutShortIntField}
\par {\strike\cf4 GetShortIntField}{\v OOBase_ObjectT_GetShortIntField}
\par {\strike\cf4 PutCharField}{\v OOBase_ObjectT_PutCharField}
\par {\strike\cf4 GetCharField}{\v OOBase_ObjectT_GetCharField}
\par {\strike\cf4 PutBoolField}{\v OOBase_ObjectT_PutBoolField}
\par {\strike\cf4 GetBoolField}{\v OOBase_ObjectT_GetBoolField}
\par {\strike\cf4 PutSetField}{\v OOBase_ObjectT_PutSetField}
\par {\strike\cf4 GetSetField}{\v OOBase_ObjectT_GetSetField}
\par {\strike\cf4 PutRealField}{\v OOBase_ObjectT_PutRealField}
\par {\strike\cf4 GetRealField}{\v OOBase_ObjectT_GetRealField}
\par {\strike\cf4 PutLongRealField}{\v OOBase_ObjectT_PutLongRealField}
\par {\strike\cf4 GetLongRealField}{\v OOBase_ObjectT_GetLongRealField}
\par {\strike\cf4 PutStrField}{\v OOBase_ObjectT_PutStrField}
\par {\strike\cf4 GetStrField}{\v OOBase_ObjectT_GetStrField}
\par {\strike\cf4 GetStrFieldLen}{\v OOBase_ObjectT_GetStrFieldLen}
\par {\strike\cf4 PutPointerField}{\v OOBase_ObjectT_PutPointerField}
\par {\strike\cf4 GetPointerField}{\v OOBase_ObjectT_GetPointerField}
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 OOBase_ObjectT_Init}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 OOBase.ObjectT.Init}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Init}}}Init
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 OOBase}{\v OOBase}, bound to type {\strike\cf4 ObjectT}{\v OOBase_ObjectT}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE (VAR) Init()
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 
This is an abstract method. The initialization methods of all classes should be called Init. This makes it possible to have a general convention for object creation: after allocating an object with NEW the method Init can be called regardless of the objec
ts class. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 OOBase_ObjectT_GetFieldType}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {
\b\f4\fs24\super $}{\b\f4\fs24 OOBase.ObjectT.GetFieldType}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 GetFieldType}}}GetFieldType
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 OOBase}{\v OOBase}, bound to type {\strike\cf4 ObjectT}{\v OOBase_ObjectT}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE (POINTER) GetFieldType(VAR fieldName:ARRAY OF CHAR; \line                                  VAR typeCode:INTEGER; \line                                  VAR done:BOOLEAN)
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 Returns the type code of a specific record field; the specified field must be of a basic type or an array of char in which case typeCode is set to TYP_STRING. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 OOBase_ObjectT_PutIntField}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {
\b\f4\fs24\super $}{\b\f4\fs24 OOBase.ObjectT.PutIntField}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 PutIntField}}}PutIntField
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 OOBase}{\v OOBase}, bound to type {\strike\cf4 ObjectT}{\v OOBase_ObjectT}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE (POINTER) PutIntField(fieldName:ARRAY OF CHAR; \line                                 x:INTEGER; \line                                 VAR done:BOOLEAN)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 OOBase_ObjectT_GetIntField}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {
\b\f4\fs24\super $}{\b\f4\fs24 OOBase.ObjectT.GetIntField}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 GetIntField}}}GetIntField
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 OOBase}{\v OOBase}, bound to type {\strike\cf4 ObjectT}{\v OOBase_ObjectT}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE (POINTER) GetIntField(fieldName:ARRAY OF CHAR; \line                                 VAR x:INTEGER; \line                                 VAR done:BOOLEAN)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 OOBase_ObjectT_PutLongIntField}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {
\b\f4\fs24\super $}{\b\f4\fs24 OOBase.ObjectT.PutLongIntField}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 PutLongIntField}}}PutLongIntField
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 OOBase}{\v OOBase}, bound to type {\strike\cf4 ObjectT}{\v OOBase_ObjectT}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE (POINTER) PutLongIntField(fieldName:ARRAY OF CHAR; \line                                     x:LONGINT; \line                                     VAR done:BOOLEAN)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 OOBase_ObjectT_GetLongIntField}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {
\b\f4\fs24\super $}{\b\f4\fs24 OOBase.ObjectT.GetLongIntField}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 GetLongIntField}}}GetLongIntField
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 OOBase}{\v OOBase}, bound to type {\strike\cf4 ObjectT}{\v OOBase_ObjectT}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE (POINTER) GetLongIntField(fieldName:ARRAY OF CHAR; \line                                     VAR x:LONGINT; \line                                     VAR done:BOOLEAN)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 OOBase_ObjectT_PutShortIntField}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {
\b\f4\fs24\super $}{\b\f4\fs24 OOBase.ObjectT.PutShortIntField}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 PutShortIntField}}}PutShortIntField
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 OOBase}{\v OOBase}, bound to type {\strike\cf4 ObjectT}{\v OOBase_ObjectT}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE (POINTER) PutShortIntField(fieldName:ARRAY OF CHAR; \line                                      x:SHORTINT; \line                                      VAR done:BOOLEAN)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 OOBase_ObjectT_GetShortIntField}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {
\b\f4\fs24\super $}{\b\f4\fs24 OOBase.ObjectT.GetShortIntField}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 GetShortIntField}}}GetShortIntField
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 OOBase}{\v OOBase}, bound to type {\strike\cf4 ObjectT}{\v OOBase_ObjectT}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE (POINTER) GetShortIntField(fieldName:ARRAY OF CHAR; \line                                      VAR x:SHORTINT; \line                                      VAR done:BOOLEAN)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 OOBase_ObjectT_PutCharField}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {
\b\f4\fs24\super $}{\b\f4\fs24 OOBase.ObjectT.PutCharField}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 PutCharField}}}PutCharField
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 OOBase}{\v OOBase}, bound to type {\strike\cf4 ObjectT}{\v OOBase_ObjectT}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE (POINTER) PutCharField(fieldName:ARRAY OF CHAR; \line                                  x:CHAR; \line                                  VAR done:BOOLEAN)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 OOBase_ObjectT_GetCharField}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {
\b\f4\fs24\super $}{\b\f4\fs24 OOBase.ObjectT.GetCharField}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 GetCharField}}}GetCharField
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 OOBase}{\v OOBase}, bound to type {\strike\cf4 ObjectT}{\v OOBase_ObjectT}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE (POINTER) GetCharField(fieldName:ARRAY OF CHAR; \line                                  VAR x:CHAR; \line                                  VAR done:BOOLEAN)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 OOBase_ObjectT_PutBoolField}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {
\b\f4\fs24\super $}{\b\f4\fs24 OOBase.ObjectT.PutBoolField}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 PutBoolField}}}PutBoolField
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 OOBase}{\v OOBase}, bound to type {\strike\cf4 ObjectT}{\v OOBase_ObjectT}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE (POINTER) PutBoolField(fieldName:ARRAY OF CHAR; \line                                  x:BOOLEAN; \line                                  VAR done:BOOLEAN)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 OOBase_ObjectT_GetBoolField}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {
\b\f4\fs24\super $}{\b\f4\fs24 OOBase.ObjectT.GetBoolField}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 GetBoolField}}}GetBoolField
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 OOBase}{\v OOBase}, bound to type {\strike\cf4 ObjectT}{\v OOBase_ObjectT}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE (POINTER) GetBoolField(fieldName:ARRAY OF CHAR; \line                                  VAR x:BOOLEAN; \line                                  VAR done:BOOLEAN)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 OOBase_ObjectT_PutSetField}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {
\b\f4\fs24\super $}{\b\f4\fs24 OOBase.ObjectT.PutSetField}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 PutSetField}}}PutSetField
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 OOBase}{\v OOBase}, bound to type {\strike\cf4 ObjectT}{\v OOBase_ObjectT}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE (POINTER) PutSetField(fieldName:ARRAY OF CHAR; \line                                 x:SET; \line                                 VAR done:BOOLEAN)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 OOBase_ObjectT_GetSetField}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {
\b\f4\fs24\super $}{\b\f4\fs24 OOBase.ObjectT.GetSetField}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 GetSetField}}}GetSetField
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 OOBase}{\v OOBase}, bound to type {\strike\cf4 ObjectT}{\v OOBase_ObjectT}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE (POINTER) GetSetField(fieldName:ARRAY OF CHAR; \line                                 VAR x:SET; \line                                 VAR done:BOOLEAN)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 OOBase_ObjectT_PutRealField}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {
\b\f4\fs24\super $}{\b\f4\fs24 OOBase.ObjectT.PutRealField}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 PutRealField}}}PutRealField
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 OOBase}{\v OOBase}, bound to type {\strike\cf4 ObjectT}{\v OOBase_ObjectT}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE (POINTER) PutRealField(fieldName:ARRAY OF CHAR; \line                                  x:REAL; \line                                  VAR done:BOOLEAN)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 OOBase_ObjectT_GetRealField}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {
\b\f4\fs24\super $}{\b\f4\fs24 OOBase.ObjectT.GetRealField}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 GetRealField}}}GetRealField
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 OOBase}{\v OOBase}, bound to type {\strike\cf4 ObjectT}{\v OOBase_ObjectT}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE (POINTER) GetRealField(fieldName:ARRAY OF CHAR; \line                                  VAR x:REAL; \line                                  VAR done:BOOLEAN)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 OOBase_ObjectT_PutLongRealField}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {
\b\f4\fs24\super $}{\b\f4\fs24 OOBase.ObjectT.PutLongRealField}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 PutLongRealField}}}PutLongRealField
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 OOBase}{\v OOBase}, bound to type {\strike\cf4 ObjectT}{\v OOBase_ObjectT}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE (POINTER) PutLongRealField(fieldName:ARRAY OF CHAR; \line                                      x:LONGREAL; \line                                      VAR done:BOOLEAN)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 OOBase_ObjectT_GetLongRealField}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {
\b\f4\fs24\super $}{\b\f4\fs24 OOBase.ObjectT.GetLongRealField}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 GetLongRealField}}}GetLongRealField
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 OOBase}{\v OOBase}, bound to type {\strike\cf4 ObjectT}{\v OOBase_ObjectT}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE (POINTER) GetLongRealField(fieldName:ARRAY OF CHAR; \line                                      VAR x:LONGREAL; \line                                      VAR done:BOOLEAN)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 OOBase_ObjectT_PutStrField}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {
\b\f4\fs24\super $}{\b\f4\fs24 OOBase.ObjectT.PutStrField}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 PutStrField}}}PutStrField
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 OOBase}{\v OOBase}, bound to type {\strike\cf4 ObjectT}{\v OOBase_ObjectT}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE (POINTER) PutStrField(fieldName:ARRAY OF CHAR; \line                                 x:ARRAY OF CHAR; \line                                 VAR done:BOOLEAN)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 OOBase_ObjectT_GetStrField}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {
\b\f4\fs24\super $}{\b\f4\fs24 OOBase.ObjectT.GetStrField}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 GetStrField}}}GetStrField
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 OOBase}{\v OOBase}, bound to type {\strike\cf4 ObjectT}{\v OOBase_ObjectT}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE (POINTER) GetStrField(fieldName:ARRAY OF CHAR; \line                                 VAR x:ARRAY OF CHAR; \line                                 VAR done:BOOLEAN)
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 {\b done} is set to FALSE if either the desired field can not be found, the field has the wrong type or {\b x} is not large enough to store the contents of the field. If {\b x}
 is not large enough to hold the result it is truncated. In all other cases of error {\b x} is set to the empty string. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 OOBase_ObjectT_GetStrFieldLen}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {
\b\f4\fs24\super $}{\b\f4\fs24 OOBase.ObjectT.GetStrFieldLen}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 GetStrFieldLen}}}GetStrFieldLen
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 OOBase}{\v OOBase}, bound to type {\strike\cf4 ObjectT}{\v OOBase_ObjectT}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE (POINTER) GetStrFieldLen(fieldName:ARRAY OF CHAR; \line                                    VAR x:LONGINT; \line                                    VAR done:BOOLEAN)
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 returns the length of the string stored in the record field with the name fieldName 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 OOBase_ObjectT_PutPointerField}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {
\b\f4\fs24\super $}{\b\f4\fs24 OOBase.ObjectT.PutPointerField}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 PutPointerField}}}PutPointerField
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 OOBase}{\v OOBase}, bound to type {\strike\cf4 ObjectT}{\v OOBase_ObjectT}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE (POINTER) PutPointerField(fieldName:ARRAY OF CHAR; \line                                     x:{\ul\cf4 Object}{\v OOBase_Object}; \line 
                                    VAR done:BOOLEAN)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 OOBase_ObjectT_GetPointerField}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {
\b\f4\fs24\super $}{\b\f4\fs24 OOBase.ObjectT.GetPointerField}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 GetPointerField}}}GetPointerField
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 OOBase}{\v OOBase}, bound to type {\strike\cf4 ObjectT}{\v OOBase_ObjectT}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE (POINTER) GetPointerField(fieldName:ARRAY OF CHAR; \line                                     VAR x:{\ul\cf4 Object}{\v OOBase_Object}; \line 
                                    VAR done:BOOLEAN)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 OOBase_ObjMetaToolT}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 OOBase.ObjMetaToolT}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 ObjMetaToolT}}}ObjMetaToolT
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 OOBase}{\v OOBase}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 ObjMetaToolT=RECORD \line END;
\par \pard\plain \s46\sb180 \b\f5\lang1031 Methods
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 {\strike\cf4 InitToObj}{\v OOBase_ObjMetaToolT_InitToObj}
\par {\strike\cf4 GetNextName}{\v OOBase_ObjMetaToolT_GetNextName}
\par {\strike\cf4 SetMarker}{\v OOBase_ObjMetaToolT_SetMarker}
\par {\strike\cf4 ToMarker}{\v OOBase_ObjMetaToolT_ToMarker}
\par {\strike\cf4 GetTypeEntry}{\v OOBase_ObjMetaToolT_GetTypeEntry}
\par {\strike\cf4 GetNextSymbol}{\v OOBase_ObjMetaToolT_GetNextSymbol}
\par {\strike\cf4 GetSymbolInfo}{\v OOBase_ObjMetaToolT_GetSymbolInfo}
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 OOBase_ObjMetaToolT_InitToObj}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {
\b\f4\fs24\super $}{\b\f4\fs24 OOBase.ObjMetaToolT.InitToObj}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 InitToObj}}}InitToObj
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 OOBase}{\v OOBase}, bound to type {\strike\cf4 ObjMetaToolT}{\v OOBase_ObjMetaToolT}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE (VAR) InitToObj(obj:{\ul\cf4 Object}{\v OOBase_Object})
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 The object meta information tool has to be initialized to work on a specific object prior to a call to any other method of this class. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 OOBase_ObjMetaToolT_GetNextName}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {
\b\f4\fs24\super $}{\b\f4\fs24 OOBase.ObjMetaToolT.GetNextName}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 GetNextName}}}GetNextName
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 OOBase}{\v OOBase}, bound to type {\strike\cf4 ObjMetaToolT}{\v OOBase_ObjMetaToolT}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE (VAR) GetNextName(VAR name:ARRAY OF CHAR; \line                             VAR table:LONGINT; \line                             VAR codeInx:INTEGER)
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 retrieve next name from RTTI string table. codeInx is set to -1 if there is no directly associated entry in the code table. The name contains the empty string if the last name has already been read. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 OOBase_ObjMetaToolT_SetMarker}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {
\b\f4\fs24\super $}{\b\f4\fs24 OOBase.ObjMetaToolT.SetMarker}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 SetMarker}}}SetMarker
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 OOBase}{\v OOBase}, bound to type {\strike\cf4 ObjMetaToolT}{\v OOBase_ObjMetaToolT}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE (VAR) SetMarker(VAR marker:{\strike\cf4 ObjMetaToolMarkerT}{\v OOBase_ObjMetaToolMarkerT})
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 store the internal reader position in the marker 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 OOBase_ObjMetaToolT_ToMarker}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {
\b\f4\fs24\super $}{\b\f4\fs24 OOBase.ObjMetaToolT.ToMarker}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 ToMarker}}}ToMarker
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 OOBase}{\v OOBase}, bound to type {\strike\cf4 ObjMetaToolT}{\v OOBase_ObjMetaToolT}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE (VAR) ToMarker(VAR marker:{\strike\cf4 ObjMetaToolMarkerT}{\v OOBase_ObjMetaToolMarkerT})
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 Set the internal reader position to the state recorded in the given marker 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 OOBase_ObjMetaToolT_GetTypeEntry}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {
\b\f4\fs24\super $}{\b\f4\fs24 OOBase.ObjMetaToolT.GetTypeEntry}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 GetTypeEntry}}}GetTypeEntry
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 OOBase}{\v OOBase}, bound to type {\strike\cf4 ObjMetaToolT}{\v OOBase_ObjMetaToolT}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE (VAR) GetTypeEntry(table:LONGINT; \line                              inx:INTEGER; \line                              VAR code:INTEGER; \line 
                             VAR offset:LONGINT; \line                              VAR elemSize:LONGINT; \line                              VAR nofElems:LONGINT)
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 Retrieves a specific entry in the RTTI code table. Properties which do not apply are set to -1. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 OOBase_ObjMetaToolT_GetNextSymbol}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {
\b\f4\fs24\super $}{\b\f4\fs24 OOBase.ObjMetaToolT.GetNextSymbol}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 GetNextSymbol}}}GetNextSymbol
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 OOBase}{\v OOBase}, bound to type {\strike\cf4 ObjMetaToolT}{\v OOBase_ObjMetaToolT}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE (VAR) GetNextSymbol(VAR symName:ARRAY OF CHAR; \line                               VAR done:BOOLEAN)
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 retrieve only symbols at top level; returns an empty string if the last symbol has already been read. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 OOBase_ObjMetaToolT_GetSymbolInfo}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {
\b\f4\fs24\super $}{\b\f4\fs24 OOBase.ObjMetaToolT.GetSymbolInfo}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 GetSymbolInfo}}}GetSymbolInfo
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 OOBase}{\v OOBase}, bound to type {\strike\cf4 ObjMetaToolT}{\v OOBase_ObjMetaToolT}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE (VAR) GetSymbolInfo(VAR typeCode:INTEGER; \line                               VAR offs:LONGINT)
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 retrieve information about the last symbol read by GetNextSymbol; typeCode is -1 if call failed 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 OOBase_ObjMetaToolMarkerT}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {
\b\f4\fs24\super $}{\b\f4\fs24 OOBase.ObjMetaToolMarkerT}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 ObjMetaToolMarkerT}}}ObjMetaToolMarkerT
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 OOBase}{\v OOBase}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 ObjMetaToolMarkerT=RECORD \line END;
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Out}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
module Out}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Out}}}Module Out
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 This module offers a simple sequential output to the screen. A particular advantage is that the whole output is always accessible, even if it is far longer than one screen page.
\par \pard\plain \s46\sb180 \b\f5\lang1031 Procedures
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 {\strike\cf4 SetScreenUpdate}{\v Out_SetScreenUpdate}
\par {\strike\cf4 Char}{\v Out_Char}
\par {\strike\cf4 String}{\v Out_String}
\par {\strike\cf4 Real}{\v Out_Real}
\par {\strike\cf4 Int}{\v Out_Int}
\par {\strike\cf4 Ln}{\v Out_Ln}
\par {\strike\cf4 Open}{\v Out_Open}
\par {\strike\cf4 Close}{\v Out_Close}
\par {\strike\cf4 LongReal}{\v Out_LongReal}
\par {\strike\cf4 F}{\v Out_F}
\par {\strike\cf4 F2}{\v Out_F2}
\par {\strike\cf4 F3}{\v Out_F3}
\par {\strike\cf4 F4}{\v Out_F4}
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Out_SetScreenUpdate}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Out.SetScreenUpdate}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 SetScreenUpdate}}}SetScreenUpdate
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Out}{\v Out}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE SetScreenUpdate(x:BOOLEAN)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Out_Char}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
Out.Char}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Char}}}Char
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Out}{\v Out}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Char(ch:CHAR)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Out_String}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
Out.String}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 String}}}String
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Out}{\v Out}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE String(str:ARRAY OF CHAR)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Out_Real}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
Out.Real}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Real}}}Real
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Out}{\v Out}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Real(x:LONGREAL; \line                n:INTEGER)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Out_Int}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
Out.Int}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Int}}}Int
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Out}{\v Out}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Int(i, n:LONGINT)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Out_Ln}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
Out.Ln}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Ln}}}Ln
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Out}{\v Out}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Ln()
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Out_Open}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
Out.Open}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Open}}}Open
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Out}{\v Out}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Open()
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Out_Close}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
Out.Close}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Close}}}Close
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Out}{\v Out}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Close()
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Out_LongReal}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Out.LongReal}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 LongReal}}}LongReal
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Out}{\v Out}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE LongReal(x:LONGREAL; \line                    n:INTEGER)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Out_F}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 Out.F
}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 F}}}F
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Out}{\v Out}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE F(t:ARRAY OF CHAR; \line             x1:LONGINT)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Out_F2}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
Out.F2}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 F2}}}F2
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Out}{\v Out}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE F2(t:ARRAY OF CHAR; \line              x1, x2:LONGINT)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Out_F3}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
Out.F3}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 F3}}}F3
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Out}{\v Out}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE F3(t:ARRAY OF CHAR; \line              x1, x2, x3:LONGINT)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Out_F4}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
Out.F4}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 F4}}}F4
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Out}{\v Out}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE F4(t:ARRAY OF CHAR; \line              x1, x2, x3, x4:LONGINT)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Param}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
module Param}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Param}}}Module Param
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 
This module offers access to the command line which was used to start the program. It is possible to access the command line as a whole or only single parameters. It is assumed that the single parameters of the command line are separated either by blanks,
 commas or both.
\par \pard\plain \s46\sb180 \b\f5\lang1031 Constants
\par \pard\plain \s49\fi-2880\li2880\sb60 \f5\fs20\lang1031 MAXPARAMLEN\tab \tab maximum length of the entire parameter string 
\par MAXSTR\tab \tab \tab maximum number of different parts of the parameter string 
\par \pard\plain \s46\sb180 \b\f5\lang1031 Procedures
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 {\strike\cf4 CompleteStr}{\v Param_CompleteStr}
\par {\strike\cf4 Count}{\v Param_Count}
\par {\strike\cf4 Parse}{\v Param_Parse}
\par {\strike\cf4 Str}{\v Param_Str}
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Param_CompleteStr}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Param.CompleteStr}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 CompleteStr}}}CompleteStr
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Param}{\v Param}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE CompleteStr(VAR t:ARRAY OF CHAR)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Param_Count}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Param.Count}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Count}}}Count
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Param}{\v Param}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Count():INTEGER
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Param_Parse}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Param.Parse}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Parse}}}Parse
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Param}{\v Param}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Parse(VAR line:ARRAY OF CHAR)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Param_Str}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
Param.Str}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Str}}}Str
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Param}{\v Param}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Str(i:INTEGER; \line               VAR t:ARRAY OF CHAR)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Print}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
module Print}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Print}}}Module Print
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 This module provides character based access to printers.
\par \pard\plain \s46\sb180 \b\f5\lang1031 Procedures
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 {\strike\cf4 StartWithDialog}{\v Print_StartWithDialog}
\par {\strike\cf4 Start}{\v Print_Start}
\par {\strike\cf4 Page}{\v Print_Page}
\par {\strike\cf4 Ln}{\v Print_Ln}
\par {\strike\cf4 GetInfo}{\v Print_GetInfo}
\par {\strike\cf4 Char}{\v Print_Char}
\par {\strike\cf4 Str}{\v Print_Str}
\par {\strike\cf4 Real}{\v Print_Real}
\par {\strike\cf4 Int}{\v Print_Int}
\par {\strike\cf4 Finished}{\v Print_Finished}
\par {\strike\cf4 SetLeftMargin}{\v Print_SetLeftMargin}
\par {\strike\cf4 SetTopMargin}{\v Print_SetTopMargin}
\par {\strike\cf4 RemainingLines}{\v Print_RemainingLines}
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Print_StartWithDialog}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Print.StartWithDialog}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 StartWithDialog}}}StartWithDialog
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Print}{\v Print}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE StartWithDialog():BOOLEAN
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Print_Start}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Print.Start}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Start}}}Start
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Print}{\v Print}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Start()
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Print_Page}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
Print.Page}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Page}}}Page
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Print}{\v Print}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Page()
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Print_Ln}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
Print.Ln}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Ln}}}Ln
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Print}{\v Print}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Ln()
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Print_GetInfo}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Print.GetInfo}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 GetInfo}}}GetInfo
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Print}{\v Print}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE GetInfo(VAR x, y:LONGINT; \line                   VAR hdc:WD.HDC)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Print_Char}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
Print.Char}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Char}}}Char
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Print}{\v Print}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Char(x:CHAR)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Print_Str}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
Print.Str}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Str}}}Str
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Print}{\v Print}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Str(t:ARRAY OF CHAR)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Print_Real}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
Print.Real}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Real}}}Real
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Print}{\v Print}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Real(x:LONGREAL; \line                n:INTEGER)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Print_Int}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
Print.Int}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Int}}}Int
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Print}{\v Print}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Int(i, n:LONGINT)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Print_Finished}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Print.Finished}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Finished}}}Finished
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Print}{\v Print}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Finished()
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Print_SetLeftMargin}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Print.SetLeftMargin}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 SetLeftMargin}}}SetLeftMargin
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Print}{\v Print}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE SetLeftMargin(marg:INTEGER)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Print_SetTopMargin}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Print.SetTopMargin}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 SetTopMargin}}}SetTopMargin
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Print}{\v Print}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE SetTopMargin(marg:INTEGER)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Print_RemainingLines}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Print.RemainingLines}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 RemainingLines}}}RemainingLines
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Print}{\v Print}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE RemainingLines():INTEGER
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Process}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
module Process}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Process}}}Module Process
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 This module helps to control the execution of a program.
\par \pard\plain \s46\sb180 \b\f5\lang1031 Types
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 {\ul\cf4 ExitProc}{\v Process_ExitProc}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Variables
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 {\ul\cf4 exitProc}{\v Process_exitProc}
\par {\ul\cf4 importantExitProc}{\v Process_importantExitProc}
\par {\ul\cf4 terminateMsgLoops}{\v Process_terminateMsgLoops}
\par {\ul\cf4 breakEnabled}{\v Process_breakEnabled}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Procedures
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 {\strike\cf4 NumberOfActiveThreads}{\v Process_NumberOfActiveThreads}
\par {\strike\cf4 Yield}{\v Process_Yield}
\par {\strike\cf4 SetIdleStatus}{\v Process_SetIdleStatus}
\par {\strike\cf4 ResetIdleStatus}{\v Process_ResetIdleStatus}
\par {\strike\cf4 WaitForAllToTerminate}{\v Process_WaitForAllToTerminate}
\par {\strike\cf4 SetBreak}{\v Process_SetBreak}
\par {\strike\cf4 SetExitProc}{\v Process_SetExitProc}
\par {\strike\cf4 GetExitProc}{\v Process_GetExitProc}
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Process_NumberOfActiveThreads}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {
\b\f4\fs24\super $}{\b\f4\fs24 Process.NumberOfActiveThreads}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 NumberOfActiveThreads}}}NumberOfActiveThreads
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Process}{\v Process}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE NumberOfActiveThreads():INTEGER
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Process_Yield}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Process.Yield}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Yield}}}Yield
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Process}{\v Process}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Yield()
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Process_SetIdleStatus}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Process.SetIdleStatus}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 SetIdleStatus}}}SetIdleStatus
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Process}{\v Process}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE SetIdleStatus()
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Process_ResetIdleStatus}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $
}{\b\f4\fs24 Process.ResetIdleStatus}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 ResetIdleStatus}}}ResetIdleStatus
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Process}{\v Process}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE ResetIdleStatus()
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Process_WaitForAllToTerminate}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {
\b\f4\fs24\super $}{\b\f4\fs24 Process.WaitForAllToTerminate}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 WaitForAllToTerminate}}}WaitForAllToTerminate
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Process}{\v Process}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE WaitForAllToTerminate()
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Process_SetBreak}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Process.SetBreak}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 SetBreak}}}SetBreak
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Process}{\v Process}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE SetBreak(x:BOOLEAN)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Process_SetExitProc}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Process.SetExitProc}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 SetExitProc}}}SetExitProc
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Process}{\v Process}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE SetExitProc(proc:{\ul\cf4 ExitProc}{\v Process_ExitProc})
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Process_GetExitProc}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Process.GetExitProc}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 GetExitProc}}}GetExitProc
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Process}{\v Process}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE GetExitProc(VAR proc:{\ul\cf4 ExitProc}{\v Process_ExitProc})
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super #}{\f4\fs24 Process_exitProc}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super $}{\f4\fs24 Process.exitProc}
}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super K}{\f4\fs24 exitProc}}}{\b exitProc}
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 exitProc-:{\ul\cf4 ExitProc}{\v Process_ExitProc};
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super #}{\f4\fs24 Process_importantExitProc}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super $}{\f4\fs24 
Process.importantExitProc}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super K}{\f4\fs24 importantExitProc}}}{\b importantExitProc}
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 importantExitProc*:;
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super #}{\f4\fs24 Process_terminateMsgLoops}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super $}{\f4\fs24 
Process.terminateMsgLoops}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super K}{\f4\fs24 terminateMsgLoops}}}{\b terminateMsgLoops}
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 terminateMsgLoops*:BOOLEAN;
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super #}{\f4\fs24 Process_breakEnabled}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super $}{\f4\fs24 
Process.breakEnabled}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super K}{\f4\fs24 breakEnabled}}}{\b breakEnabled}
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 breakEnabled*:BOOLEAN;
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super #}{\f4\fs24 Process_ExitProc}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super $}{\f4\fs24 Process.ExitProc}
}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super K}{\f4\fs24 ExitProc}}}{\b ExitProc}
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 ExitProc*=PROCEDURE ();
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Strings}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
module Strings}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Strings}}}Module Strings
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 This module provides functions for string processing. This includes combining strings, copying parts of a string, the conversion of a string to a number or vice-versa etc.
\par All procedures should be save. If character arrays are being used which are to short for a result, the result will be truncated accordingly.
\par All functions of this module start to count the character positions with one i.e. the first character of a string is at position one.
\par All procedures applying to characters instead of strings have a trailing "Char" in their names.
\par \pard\plain \s46\sb180 \b\f5\lang1031 Constants
\par \pard\plain \s49\fi-2880\li2880\sb60 \f5\fs20\lang1031 ISSHORTINT\tab \tab \tab 
\par ISINTEGER\tab \tab \tab 
\par ISLONGINT\tab \tab \tab 
\par ISOUTOFRANGE\tab \tab 
\par STRINGEMPTY\tab \tab 
\par STRINGILLEGAL\tab \tab 
\par \pard\plain \s46\sb180 \b\f5\lang1031 Types
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 {\ul\cf4 StringT}{\v Strings_StringT}
\par {\ul\cf4 String}{\v Strings_String}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Procedures
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 {\strike\cf4 Length}{\v Strings_Length}
\par {\strike\cf4 PosChar}{\v Strings_PosChar}
\par {\strike\cf4 Pos}{\v Strings_Pos}
\par {\strike\cf4 Copy}{\v Strings_Copy}
\par {\strike\cf4 Append}{\v Strings_Append}
\par {\strike\cf4 AppendChar}{\v Strings_AppendChar}
\par {\strike\cf4 UpCaseChar}{\v Strings_UpCaseChar}
\par {\strike\cf4 UpCase}{\v Strings_UpCase}
\par {\strike\cf4 Delete}{\v Strings_Delete}
\par {\strike\cf4 RemoveTrailingSpaces}{\v Strings_RemoveTrailingSpaces}
\par {\strike\cf4 RemoveLeadingSpaces}{\v Strings_RemoveLeadingSpaces}
\par {\strike\cf4 Val}{\v Strings_Val}
\par {\strike\cf4 ValResult}{\v Strings_ValResult}
\par {\strike\cf4 Str}{\v Strings_Str}
\par {\strike\cf4 HexStr}{\v Strings_HexStr}
\par {\strike\cf4 InsertChar}{\v Strings_InsertChar}
\par {\strike\cf4 Insert}{\v Strings_Insert}
\par {\strike\cf4 LeftAlign}{\v Strings_LeftAlign}
\par {\strike\cf4 RightAlign}{\v Strings_RightAlign}
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Strings_Length}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Strings.Length}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Length}}}Length
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Strings}{\v Strings}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Length(VAR t-:{\ul\cf4 StringT}{\v Strings_StringT}):LONGINT
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 Returns the length of a zero terminated string in characters. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Strings_PosChar}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Strings.PosChar}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 PosChar}}}PosChar
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Strings}{\v Strings}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE PosChar(x:CHAR; \line                   VAR t-:{\ul\cf4 StringT}{\v Strings_StringT}; \line                   start:LONGINT):LONGINT
\par \pard\plain \s46\sb180 \b\f5\lang1031 Parameters
\par \pard\plain \s49\fi-2880\li2880\sb60 \f5\fs20\lang1031 start\tab \tab \tab \tab 
Indicates the position starting from which the search is to be carried out. If start is less than one it is set to one. If start denotes a position beyond the end of t the function returns zero. 
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 This function returns the position of the character {\b x} in the string {\b t}. If {\b x} does not occur in {\b t} zero is returned. If {\b x} occurs several times the position of the first occurrence is returned. 

\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Strings_Pos}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Strings.Pos}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Pos}}}Pos
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Strings}{\v Strings}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Pos(VAR pattern-:{\ul\cf4 StringT}{\v Strings_StringT}; \line               VAR t-:{\ul\cf4 StringT}{\v Strings_StringT}; \line               start:LONGINT):LONGINT
\par \pard\plain \s46\sb180 \b\f5\lang1031 Parameters
\par \pard\plain \s49\fi-2880\li2880\sb60 \f5\fs20\lang1031 start\tab \tab \tab \tab 
Indicates the position starting from which the search shall be carried out. If start is less than one it is set to one. If start denotes a position beyond the end of t the function returns zero. 
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 This function returns the position of the string pattern in the string {\b t}. If pattern does not occur in {\b t}
 zero is returned. If the pattern occurs several times the position of the first occurrence is returned. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Strings_Copy}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Strings.Copy}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Copy}}}Copy
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Strings}{\v Strings}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Copy(VAR source-, dest:{\ul\cf4 StringT}{\v Strings_StringT}; \line                pos, n:LONGINT)
\par \pard\plain \s46\sb180 \b\f5\lang1031 Parameters
\par \pard\plain \s49\fi-2880\li2880\sb60 \f5\fs20\lang1031 pos\tab \tab \tab \tab character position of the source fragment 
\par n\tab \tab \tab \tab length of the source fragment 
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 A section of the string {\b source} is copied to the string {\b dest}. The former contents of {\b dest} are overwritten and therefore lost.
\par The copied section in {\b source} starts at the position {\b pos} and is {\b n} characters long.
\par If {\b dest} is not large enough to hold the copied string then only the part that fits into {\b dest} is copied. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Strings_Append}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Strings.Append}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Append}}}Append
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Strings}{\v Strings}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Append(VAR dest:{\ul\cf4 StringT}{\v Strings_StringT}; \line                  VAR src-:{\ul\cf4 StringT}{\v Strings_StringT})
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 The string {\b src} is appended to the string {\b dest}. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Strings_AppendChar}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Strings.AppendChar}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 AppendChar}}}AppendChar
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Strings}{\v Strings}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE AppendChar(VAR dest:{\ul\cf4 StringT}{\v Strings_StringT}; \line                      ch:CHAR)
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 The character {\b ch} is appended to the string {\b dest}. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Strings_UpCaseChar}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Strings.UpCaseChar}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 UpCaseChar}}}UpCaseChar
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Strings}{\v Strings}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE UpCaseChar(x:CHAR):CHAR
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 For all lower case letters the corresponding capital letter is returned. This also applies to international characters such as \'e4, \'e1, \'e0, \'e2
... All other characters are returned unchanged. The difference between this function and the Oberon-2 function CAP(x:CHAR): CHAR is that the return value for characters other than lower case letters of the latter function depends on the individual com
piler implementation. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Strings_UpCase}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Strings.UpCase}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 UpCase}}}UpCase
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Strings}{\v Strings}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE UpCase(VAR t:{\ul\cf4 StringT}{\v Strings_StringT})
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 All lower case letters in {\b t} are converted to upper case. This also applies to international characters such as \'e4, \'e1, \'e0, \'e2... All other characters are returned unchanged. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Strings_Delete}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Strings.Delete}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Delete}}}Delete
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Strings}{\v Strings}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Delete(VAR t:{\ul\cf4 StringT}{\v Strings_StringT}; \line                  pos, n:LONGINT)
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 Starting at the position {\b pos} {\b n} characters of the string {\b t} are deleted. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Strings_RemoveTrailingSpaces}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {
\b\f4\fs24\super $}{\b\f4\fs24 Strings.RemoveTrailingSpaces}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 RemoveTrailingSpaces}}}RemoveTrailingSpaces
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Strings}{\v Strings}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE RemoveTrailingSpaces(VAR t:{\ul\cf4 StringT}{\v Strings_StringT})
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 All blanks at the end of {\b t} are removed. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Strings_RemoveLeadingSpaces}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {
\b\f4\fs24\super $}{\b\f4\fs24 Strings.RemoveLeadingSpaces}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 RemoveLeadingSpaces}}}RemoveLeadingSpaces
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Strings}{\v Strings}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE RemoveLeadingSpaces(VAR t:{\ul\cf4 StringT}{\v Strings_StringT})
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 All blanks at the beginning of {\b t} are removed. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Strings_Val}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Strings.Val}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Val}}}Val
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Strings}{\v Strings}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Val(t:{\ul\cf4 StringT}{\v Strings_StringT}):LONGINT
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 The string {\b t} is converted to a number and returned as result of the function.
\par If the character sequence in {\b t} does not represent a number and thus the conversion to a number fails the smallest negative number (MIN(LONGINT)) is returned. Blanks at the beginning and the end of {\b t}
 are ignored. The number must not contain blanks. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Strings_ValResult}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Strings.ValResult}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 ValResult}}}ValResult
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Strings}{\v Strings}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE ValResult(t:{\ul\cf4 StringT}{\v Strings_StringT}):INTEGER
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 This function can be used to discover whether the string {\b t} can be converted to a number, and which kind of integer is at least necessary for storing it.
\par The IS??? constants defined for the return value have a numerical order defined relative to each other:
\par ISSHORTINT < ISINTEGER < ISLONGINT < ISOUTOFRANGE < (STRINGEMPTY, STRINGILLEGAL)
\par This definition makes it easier to find out if e.g. a number is small enough to be stored in a INTEGER variable.
\par IF Strings.ValResult(txt)<=Strings.ISINTEGER THEN ... END;
\par instead of
\par IF (Strings.ValResult(txt)=Strings.ISSHORTINT) OR (Strings.ValResult(txt)=Strings.ISINTEGER) THEN ... 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Strings_Str}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Strings.Str}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Str}}}Str
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Strings}{\v Strings}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Str(x:LONGINT; \line               VAR t:{\ul\cf4 StringT}{\v Strings_StringT})
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 The number {\b x} is converted to a string and the result is stored in {\b t}. If {\b t} is not large enough to hold all characters of the number, {\b t} is filled with "$" characters. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Strings_HexStr}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Strings.HexStr}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 HexStr}}}HexStr
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Strings}{\v Strings}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE HexStr(x:LONGINT; \line                  VAR t:{\ul\cf4 StringT}{\v Strings_StringT})
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 The number {\b x} is converted to a string of hexadecimal format and the result is stored in {\b t}. At the end of the string an "h" is appended to indicate the hexadecimal representation of the number.
\par If {\b t} is not large enough to hold all characters of the number, {\b t} is filled with "$" characters. Example: 0 becomes "0h", 15 becomes "Fh", 16 becomes "10h". 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Strings_InsertChar}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Strings.InsertChar}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 InsertChar}}}InsertChar
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Strings}{\v Strings}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE InsertChar(x:CHAR; \line                      VAR t:{\ul\cf4 StringT}{\v Strings_StringT}; \line                      pos:LONGINT)
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 The character {\b x} is inserted into the string {\b t} at the position {\b pos} if {\b t} provides space for it. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Strings_Insert}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Strings.Insert}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Insert}}}Insert
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Strings}{\v Strings}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Insert(VAR source-:{\ul\cf4 StringT}{\v Strings_StringT}; \line                  VAR dest:{\ul\cf4 StringT}{\v Strings_StringT}; \line                  pos:LONGINT)
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 The string {\b source} is inserted into the string {\b dest} at the position {\b pos}. If the maximum length of {\b dest} is insufficient to store the result only the part of {\b source} fitting in {\b dest}
 is inserted. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Strings_LeftAlign}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Strings.LeftAlign}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 LeftAlign}}}LeftAlign
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Strings}{\v Strings}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE LeftAlign(VAR t:{\ul\cf4 StringT}{\v Strings_StringT}; \line                     n:LONGINT)
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 The length of {\b t} is increased to {\b n} characters by appending blanks. If {\b t} has already the appropriate length or is longer {\b t} remains unchanged. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Strings_RightAlign}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Strings.RightAlign}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 RightAlign}}}RightAlign
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Strings}{\v Strings}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE RightAlign(VAR t:{\ul\cf4 StringT}{\v Strings_StringT}; \line                      n:LONGINT)
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 The length of {\b t} is increased to {\b n} characters by inserting blanks at the beginning. If {\b t} has already the appropriate length or is longer {\b t} remains unchanged. 
\par \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super #}{\f4\fs24 Strings_StringT}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super $}{\f4\fs24 Strings.StringT}}K{\footnote \pard\plain \nowidctlpar 
\f5\fs20\lang1031 {\f4\fs24\super K}{\f4\fs24 StringT}}}{\b StringT}
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 StringT*=ARRAY OF CHAR;
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super #}{\f4\fs24 Strings_String}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super $}{\f4\fs24 Strings.String}}K
{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super K}{\f4\fs24 String}}}{\b String}
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 String*=POINTER TO {\ul\cf4 StringT}{\v Strings_StringT};
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Utils}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
module Utils}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Utils}}}Module Utils
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 The functions implemented here tend to be system dependent. Therefore the module Utils is a relative of the module SYSTEM. The import of Utils is an indicator that the program using it is non-portable
\par \pard\plain \s46\sb180 \b\f5\lang1031 Procedures
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 {\strike\cf4 BitAnd}{\v Utils_BitAnd}
\par {\strike\cf4 BitXOr}{\v Utils_BitXOr}
\par {\strike\cf4 BitOr}{\v Utils_BitOr}
\par {\strike\cf4 BitNot}{\v Utils_BitNot}
\par {\strike\cf4 BitAndL}{\v Utils_BitAndL}
\par {\strike\cf4 BitXOrL}{\v Utils_BitXOrL}
\par {\strike\cf4 BitOrL}{\v Utils_BitOrL}
\par {\strike\cf4 BitNotL}{\v Utils_BitNotL}
\par {\strike\cf4 LoWord}{\v Utils_LoWord}
\par {\strike\cf4 HiWord}{\v Utils_HiWord}
\par {\strike\cf4 LoByte}{\v Utils_LoByte}
\par {\strike\cf4 HiByte}{\v Utils_HiByte}
\par {\strike\cf4 MakeLong}{\v Utils_MakeLong}
\par {\strike\cf4 MakeWord}{\v Utils_MakeWord}
\par {\strike\cf4 GetDate}{\v Utils_GetDate}
\par {\strike\cf4 GetTime}{\v Utils_GetTime}
\par {\strike\cf4 GetDateStr}{\v Utils_GetDateStr}
\par {\strike\cf4 GetTimeStr}{\v Utils_GetTimeStr}
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Utils_BitAnd}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Utils.BitAnd}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 BitAnd}}}BitAnd
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Utils}{\v Utils}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE BitAnd(a, b:INTEGER):INTEGER
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Utils_BitXOr}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Utils.BitXOr}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 BitXOr}}}BitXOr
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Utils}{\v Utils}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE BitXOr(a, b:INTEGER):INTEGER
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Utils_BitOr}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Utils.BitOr}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 BitOr}}}BitOr
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Utils}{\v Utils}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE BitOr(a, b:INTEGER):INTEGER
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Utils_BitNot}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Utils.BitNot}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 BitNot}}}BitNot
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Utils}{\v Utils}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE BitNot(a:INTEGER):INTEGER
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Utils_BitAndL}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Utils.BitAndL}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 BitAndL}}}BitAndL
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Utils}{\v Utils}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE BitAndL(a, b:LONGINT):LONGINT
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Utils_BitXOrL}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Utils.BitXOrL}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 BitXOrL}}}BitXOrL
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Utils}{\v Utils}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE BitXOrL(a, b:LONGINT):LONGINT
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Utils_BitOrL}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Utils.BitOrL}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 BitOrL}}}BitOrL
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Utils}{\v Utils}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE BitOrL(a, b:LONGINT):LONGINT
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Utils_BitNotL}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Utils.BitNotL}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 BitNotL}}}BitNotL
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Utils}{\v Utils}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE BitNotL(a:LONGINT):LONGINT
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Utils_LoWord}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Utils.LoWord}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 LoWord}}}LoWord
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Utils}{\v Utils}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE LoWord(x:LONGINT):INTEGER
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Utils_HiWord}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Utils.HiWord}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 HiWord}}}HiWord
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Utils}{\v Utils}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE HiWord(x:LONGINT):INTEGER
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Utils_LoByte}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Utils.LoByte}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 LoByte}}}LoByte
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Utils}{\v Utils}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE LoByte(x:INTEGER):CHAR
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Utils_HiByte}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Utils.HiByte}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 HiByte}}}HiByte
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Utils}{\v Utils}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE HiByte(x:INTEGER):CHAR
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Utils_MakeLong}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Utils.MakeLong}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 MakeLong}}}MakeLong
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Utils}{\v Utils}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE MakeLong(hi, lo:INTEGER):LONGINT
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Utils_MakeWord}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Utils.MakeWord}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 MakeWord}}}MakeWord
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Utils}{\v Utils}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE MakeWord(hi, lo:CHAR):INTEGER
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Utils_GetDate}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Utils.GetDate}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 GetDate}}}GetDate
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Utils}{\v Utils}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE GetDate(VAR day, month, year, dayOfWeek:INTEGER)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Utils_GetTime}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Utils.GetTime}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 GetTime}}}GetTime
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Utils}{\v Utils}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE GetTime(VAR sec, min, hour:INTEGER)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Utils_GetDateStr}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Utils.GetDateStr}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 GetDateStr}}}GetDateStr
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Utils}{\v Utils}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE GetDateStr(VAR t:ARRAY OF CHAR)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Utils_GetTimeStr}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Utils.GetTimeStr}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 GetTimeStr}}}GetTimeStr
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Utils}{\v Utils}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE GetTimeStr(VAR t:ARRAY OF CHAR)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Volume}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
module Volume}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Volume}}}Module Volume
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 The Volume module provides facilities for creating, searching, and modifying file directories.
\par \pard\plain \s46\sb180 \b\f5\lang1031 Constants
\par \pard\plain \s49\fi-2880\li2880\sb60 \f5\fs20\lang1031 MAXPATH\tab \tab \tab 
\par MAXFILENAME\tab \tab 
\par \pard\plain \s51\sb90 \b\f5\fs20\lang1031 Error Codes 
\par \pard\plain \s49\fi-2880\li2880\sb60 \f5\fs20\lang1031 NOERROR\tab \tab \tab the operation was successfull              
\par WRITEPROTECTED\tab \tab attempted write to a write-protected drive 
\par PATHNOTFOUND\tab \tab the stated path could not be found         
\par INVALIDDRIVE\tab \tab \tab the indicated drive could not be found     
\par NOMOREFILES\tab \tab no further suitable files could be found 
\par \pard\plain \s51\sb90 \b\f5\fs20\lang1031 File Attributes 
\par \pard\plain \s49\fi-2880\li2880\sb60 \f5\fs20\lang1031 ATTRREADONLY\tab \tab the file is read-only                     
\par ATTRHIDDEN\tab \tab \tab the file is hidden                        
\par ATTRSYSTEM\tab \tab \tab the file is part of the operating system  
\par ATTRVOLUME\tab \tab \tab maintained for compatibility only         
\par ATTRDIR\tab \tab \tab file entry is really a directory          
\par ATTRARCHIVE\tab \tab \tab file marked for backup                    
\par ATTRNORMAL\tab \tab \tab a plain file with no other attributes set 
\par ATTRTEMP\tab \tab \tab the file is used for temporary storage    
\par ATTRCOMPRESSED\tab \tab the file or directory is compressed       
\par ATTROFFLINE\tab \tab \tab file currently physically unavailable     
\par \pard\plain \s46\sb180 \b\f5\lang1031 Types
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 {\ul\cf4 ScanP}{\v Volume_ScanP}
\par {\ul\cf4 RetCodeT}{\v Volume_RetCodeT}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Classes / Record Types
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 {\strike\cf4 Scan}{\v Volume_Scan}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Procedures
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 {\strike\cf4 GetErrorMessage}{\v Volume_GetErrorMessage}
\par {\strike\cf4 CurrentDirectory}{\v Volume_CurrentDirectory}
\par {\strike\cf4 ChangeDirectory}{\v Volume_ChangeDirectory}
\par {\strike\cf4 CreateDirectory}{\v Volume_CreateDirectory}
\par {\strike\cf4 RemoveDirectory}{\v Volume_RemoveDirectory}
\par {\strike\cf4 FreeSpace}{\v Volume_FreeSpace}
\par {\strike\cf4 TotalSpace}{\v Volume_TotalSpace}
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Volume_GetErrorMessage}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}
{\b\f4\fs24 Volume.GetErrorMessage}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 GetErrorMessage}}}GetErrorMessage
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Volume}{\v Volume}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE GetErrorMessage(error:{\ul\cf4 RetCodeT}{\v Volume_RetCodeT}; \line                           VAR message:ARRAY OF CHAR)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Volume_CurrentDirectory}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $
}{\b\f4\fs24 Volume.CurrentDirectory}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 CurrentDirectory}}}CurrentDirectory
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Volume}{\v Volume}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE CurrentDirectory(VAR dir:ARRAY OF CHAR; \line                            VAR resCode:{\ul\cf4 RetCodeT}{\v Volume_RetCodeT})
\par \pard\plain \s46\sb180 \b\f5\lang1031 Description
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 The interface has changed from OPAL 16 bit: the drive is no longer a parameter of this function. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Volume_ChangeDirectory}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}
{\b\f4\fs24 Volume.ChangeDirectory}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 ChangeDirectory}}}ChangeDirectory
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Volume}{\v Volume}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE ChangeDirectory(dir:ARRAY OF CHAR; \line                           VAR resCode:{\ul\cf4 RetCodeT}{\v Volume_RetCodeT})
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Volume_CreateDirectory}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}
{\b\f4\fs24 Volume.CreateDirectory}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 CreateDirectory}}}CreateDirectory
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Volume}{\v Volume}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE CreateDirectory(dir:ARRAY OF CHAR; \line                           VAR resCode:{\ul\cf4 RetCodeT}{\v Volume_RetCodeT})
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Volume_RemoveDirectory}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}
{\b\f4\fs24 Volume.RemoveDirectory}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 RemoveDirectory}}}RemoveDirectory
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Volume}{\v Volume}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE RemoveDirectory(dir:ARRAY OF CHAR; \line                           VAR resCode:{\ul\cf4 RetCodeT}{\v Volume_RetCodeT})
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Volume_FreeSpace}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Volume.FreeSpace}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 FreeSpace}}}FreeSpace
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Volume}{\v Volume}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE FreeSpace(drive:ARRAY OF CHAR; \line                     VAR space:LONGINT; \line                     VAR unit:LONGINT; \line                     VAR resCode:{\ul\cf4 RetCodeT}{\v 
Volume_RetCodeT})
\par \pard\plain \s46\sb180 \b\f5\lang1031 Parameters
\par \pard\plain \s49\fi-2880\li2880\sb60 \f5\fs20\lang1031 unit\tab \tab \tab \tab {\b unit} determins the unit used for the number returned in {\b space}. The returned value is 
either 1 for 1 byte or 1024 for kBytes. The smallest possible unit is used which still allows {\b space} to be expressed as a LONGINT. 
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Volume_TotalSpace}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Volume.TotalSpace}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 TotalSpace}}}TotalSpace
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Volume}{\v Volume}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE TotalSpace(drive:ARRAY OF CHAR; \line                      VAR space:LONGINT; \line                      VAR unit:LONGINT; \line                      VAR resCode:{\ul\cf4 RetCodeT}{\v 
Volume_RetCodeT})
\par \pard\plain \s46\sb180 \b\f5\lang1031 Parameters
\par \pard\plain \s49\fi-2880\li2880\sb60 \f5\fs20\lang1031 unit\tab \tab \tab \tab {\b unit} determins the unit used for the number returned in {\b space}
. The returned value is either 1 for 1 byte or 1024 for kBytes. The smallest possible unit is used which still allows {\b space} to be expressed as a LONGINT. 
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super #}{\f4\fs24 Volume_ScanP}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super $}{\f4\fs24 Volume.ScanP}}K
{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super K}{\f4\fs24 ScanP}}}{\b ScanP}
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 ScanP*=POINTER TO {\strike\cf4 Scan}{\v Volume_Scan};
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super #}{\f4\fs24 Volume_RetCodeT}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super $}{\f4\fs24 Volume.RetCodeT}}K
{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super K}{\f4\fs24 RetCodeT}}}{\b RetCodeT}
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 RetCodeT*=INTEGER;
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Volume_Scan}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Volume.Scan}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Scan}}}Scan
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Volume}{\v Volume}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 Scan=RECORD \line END;
\par \pard\plain \s46\sb180 \b\f5\lang1031 Methods
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 {\strike\cf4 First}{\v Volume_Scan_First}
\par {\strike\cf4 Next}{\v Volume_Scan_Next}
\par {\strike\cf4 GetName}{\v Volume_Scan_GetName}
\par {\strike\cf4 GetCreationDate}{\v Volume_Scan_GetCreationDate}
\par {\strike\cf4 GetModifyDate}{\v Volume_Scan_GetModifyDate}
\par {\strike\cf4 GetAccessDate}{\v Volume_Scan_GetAccessDate}
\par {\strike\cf4 GetAttr}{\v Volume_Scan_GetAttr}
\par {\strike\cf4 GetSize}{\v Volume_Scan_GetSize}
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Volume_Scan_First}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Volume.Scan.First}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 First}}}First
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Volume}{\v Volume}, bound to type {\strike\cf4 Scan}{\v Volume_Scan}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE (VAR) First(searchName:ARRAY OF CHAR; \line                       VAR resCode:{\ul\cf4 RetCodeT}{\v Volume_RetCodeT})
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Volume_Scan_Next}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Volume.Scan.Next}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Next}}}Next
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Volume}{\v Volume}, bound to type {\strike\cf4 Scan}{\v Volume_Scan}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE (VAR) Next(VAR resCode:{\ul\cf4 RetCodeT}{\v Volume_RetCodeT})
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Volume_Scan_GetName}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Volume.Scan.GetName}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 GetName}}}GetName
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Volume}{\v Volume}, bound to type {\strike\cf4 Scan}{\v Volume_Scan}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE (VAR) GetName(VAR fileName:ARRAY OF CHAR)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Volume_Scan_GetCreationDate}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {
\b\f4\fs24\super $}{\b\f4\fs24 Volume.Scan.GetCreationDate}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 GetCreationDate}}}GetCreationDate
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Volume}{\v Volume}, bound to type {\strike\cf4 Scan}{\v Volume_Scan}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE (VAR) GetCreationDate(VAR dateStr:ARRAY OF CHAR)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Volume_Scan_GetModifyDate}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {
\b\f4\fs24\super $}{\b\f4\fs24 Volume.Scan.GetModifyDate}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 GetModifyDate}}}GetModifyDate
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Volume}{\v Volume}, bound to type {\strike\cf4 Scan}{\v Volume_Scan}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE (VAR) GetModifyDate(VAR dateStr:ARRAY OF CHAR)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Volume_Scan_GetAccessDate}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {
\b\f4\fs24\super $}{\b\f4\fs24 Volume.Scan.GetAccessDate}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 GetAccessDate}}}GetAccessDate
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Volume}{\v Volume}, bound to type {\strike\cf4 Scan}{\v Volume_Scan}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE (VAR) GetAccessDate(VAR dateStr:ARRAY OF CHAR)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Volume_Scan_GetAttr}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Volume.Scan.GetAttr}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 GetAttr}}}GetAttr
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Volume}{\v Volume}, bound to type {\strike\cf4 Scan}{\v Volume_Scan}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE (VAR) GetAttr():SET
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 Volume_Scan_GetSize}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 Volume.Scan.GetSize}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 GetSize}}}GetSize
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 Volume}{\v Volume}, bound to type {\strike\cf4 Scan}{\v Volume_Scan}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE (VAR) GetSize():LONGINT
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 XYplane}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{\b\f4\fs24 
module XYplane}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 XYplane}}}Module XYplane
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 This module supports very simple, monochrome graphics.
\par \pard\plain \s46\sb180 \b\f5\lang1031 Constants
\par \pard\plain \s49\fi-2880\li2880\sb60 \f5\fs20\lang1031 erase\tab \tab \tab \tab 
\par draw\tab \tab \tab \tab 
\par \pard\plain \s46\sb180 \b\f5\lang1031 Variables
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 {\ul\cf4 X}{\v XYplane_X}
\par {\ul\cf4 Y}{\v XYplane_Y}
\par {\ul\cf4 W}{\v XYplane_W}
\par {\ul\cf4 H}{\v XYplane_H}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Procedures
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 {\strike\cf4 Open}{\v XYplane_Open}
\par {\strike\cf4 Close}{\v XYplane_Close}
\par {\strike\cf4 Dot}{\v XYplane_Dot}
\par {\strike\cf4 IsDot}{\v XYplane_IsDot}
\par {\strike\cf4 Key}{\v XYplane_Key}
\par {\strike\cf4 Clear}{\v XYplane_Clear}
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 XYplane_Open}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 XYplane.Open}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Open}}}Open
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 XYplane}{\v XYplane}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Open()
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 XYplane_Close}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 XYplane.Close}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Close}}}Close
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 XYplane}{\v XYplane}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Close()
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 XYplane_Dot}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 XYplane.Dot}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Dot}}}Dot
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 XYplane}{\v XYplane}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Dot(x, y, mode:INTEGER)
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 XYplane_IsDot}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 XYplane.IsDot}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 IsDot}}}IsDot
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 XYplane}{\v XYplane}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE IsDot(x, y:INTEGER):BOOLEAN
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 XYplane_Key}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 XYplane.Key}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Key}}}Key
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 XYplane}{\v XYplane}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Key():CHAR
\par \pard\plain \s45\sb120\sa120\keepn \b\f5\fs28\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super #}{\b\f4\fs24 XYplane_Clear}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super $}{
\b\f4\fs24 XYplane.Clear}}K{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\b\f4\fs24\super K}{\b\f4\fs24 Clear}}}Clear
\par \pard\plain \s48\sb120\sa120 \b\f5\fs20\lang1031 defined in module {\strike\cf4 XYplane}{\v XYplane}
\par \pard\plain \s46\sb180 \b\f5\lang1031 Syntax
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 PROCEDURE Clear()
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super #}{\f4\fs24 XYplane_X}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super $}{\f4\fs24 XYplane.X}}K{\footnote 
\pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super K}{\f4\fs24 X}}}{\b X}
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 X-:INTEGER;
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super #}{\f4\fs24 XYplane_Y}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super $}{\f4\fs24 XYplane.Y}}K{\footnote 
\pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super K}{\f4\fs24 Y}}}{\b Y}
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 Y-:INTEGER;
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super #}{\f4\fs24 XYplane_W}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super $}{\f4\fs24 XYplane.W}}K{\footnote 
\pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super K}{\f4\fs24 W}}}{\b W}
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 W-:INTEGER;
\par \pard\plain \s47\sb60 \f5\fs20\lang1031 \page {\super #{\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super #}{\f4\fs24 XYplane_H}}${\footnote \pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super $}{\f4\fs24 XYplane.H}}K{\footnote 
\pard\plain \nowidctlpar \f5\fs20\lang1031 {\f4\fs24\super K}{\f4\fs24 H}}}{\b H}
\par \pard\plain \s25\sb180\sa120\nowidctlpar \f11\fs20\lang1031 H-:INTEGER;
\par \page 
\par \pard\plain \s24\nowidctlpar \f5\fs20\lang1031 }}\pard\plain \s24\nowidctlpar \f5\fs20\lang1031 {\lang2057 
\par }}